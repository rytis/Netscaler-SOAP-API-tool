################################################## 
# NSConfig_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# urn:NSConfig
##############################

class ns0:
    targetNamespace = "urn:NSConfig"

    class proximitycontextEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "proximitycontextEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class locationfileformatEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "locationfileformatEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class enabledisabledEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "enabledisabledEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class yesnoEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "yesnoEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class stringList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "stringList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class servicetypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "servicetypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class cachtypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cachtypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class onoffEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "onoffEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class unsignedIntList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "unsignedIntList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TCnumbers.IunsignedInt(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'unsignedInt[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class spillovermethodsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "spillovermethodsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class uiinternalentitytypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "uiinternalentitytypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class radpassencodingEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "radpassencodingEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class sectypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sectypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class authtypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authtypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class allowdenyEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "allowdenyEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class appsecprofiledefaultEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appsecprofiledefaultEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class appsecdispositionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appsecdispositionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class appsecdispositioncommerceEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appsecdispositioncommerceEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class appsecsafecommercecardtypesEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appsecsafecommercecardtypesEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class appsecsqlinjectionparsecommentsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appsecsqlinjectionparsecommentsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class appsecprofiletypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appsecprofiletypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class regexnotregexEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "regexnotregexEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class appsecdispositionobjectexpressionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appsecdispositionobjectexpressionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class auditloglevelEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "auditloglevelEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class dateformatEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dateformatEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class syslogfacilityEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "syslogfacilityEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class auditlogstatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "auditlogstatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class aclauditlogstatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aclauditlogstatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class auditlogtimezoneEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "auditlogtimezoneEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class sslvpnvservicetypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslvpnvservicetypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class httpmethodEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "httpmethodEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class cachedirectiveEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cachedirectiveEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class cacheundefdirectiveEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cacheundefdirectiveEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class cachepolicylabeltypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cachepolicylabeltypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class cachepolicylabelinvoketypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cachepolicylabelinvoketypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class cacheglobalbindpointEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cacheglobalbindpointEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class verifyusingEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "verifyusingEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class actioncmptypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "actioncmptypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class actiondeltacmptypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "actiondeltacmptypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class cmplevelEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cmplevelEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class crvservicetypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "crvservicetypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class crdtypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "crdtypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class onmatchEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "onmatchEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class csprecedenceEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "csprecedenceEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class cspolicylabeltypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cspolicylabeltypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class csinvokelabeltypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "csinvokelabeltypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class csvservicetypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "csvservicetypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vipinsertEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vipinsertEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vserverbindpointEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vserverbindpointEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class policylabelinvoketypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "policylabelinvoketypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class booleanList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "booleanList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.Boolean(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'boolean[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class namelookuppriorityEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "namelookuppriorityEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class actionfilqualifierEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "actionfilqualifierEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class gslbviptypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslbviptypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class triggermonitorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "triggermonitorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class gslbvservicetypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslbvservicetypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class httpsitepersistenceEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "httpsitepersistenceEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class gslblbmethodEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslblbmethodEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class gslbpersistenceEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslbpersistenceEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class dynamic_wt_optionsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dynamic_wt_optionsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class gslbvipconsiderstatsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslbvipconsiderstatsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class syncmodeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "syncmodeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class hastatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "hastatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class monitortypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "monitortypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class grppersisttypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "grppersisttypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class grpbkppersisttypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "grpbkppersisttypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class monactionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "monactionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class sipmethodEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sipmethodEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class dnsqueryEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnsqueryEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class timeunitsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "timeunitsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class agentversionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "agentversionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vservicetypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vservicetypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class lbpersisttypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lbpersisttypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class bkplbpersisttypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "bkplbpersisttypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class lbmethodEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lbmethodEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class redirmodeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "redirmodeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class connfailEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "connfailEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class clearrtoptionsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "clearrtoptionsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class clearrt6optionsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "clearrt6optionsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class enabledisabledifEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "enabledisabledifEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class lamodeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lamodeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class laconndistrEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "laconndistrEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class lamacdistrEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lamacdistrEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ifspeedEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ifspeedEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class flowcontrolEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "flowcontrolEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ifmonitortypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ifmonitortypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class trunktypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "trunktypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ifduplexEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ifduplexEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class lacpmodeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lacpmodeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class lacptimeoutEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lacptimeoutEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class rtprotocoloptionsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "rtprotocoloptionsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class iptunnelsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "iptunnelsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class clearconfiglevelEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "clearconfiglevelEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class enabledisabled2Enum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "enabledisabled2Enum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class cookieverEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cookieverEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class nsconfigtimezoneEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsconfigtimezoneEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ratelimitmodeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ratelimitmodeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ratelimitratetypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ratelimitratetypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class extaclactionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "extaclactionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class xacloperatorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "xacloperatorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class extaclprotoenumEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "extaclprotoenumEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class xaclenabledisabledEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "xaclenabledisabledEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class genericenabledisableEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "genericenabledisableEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class acl6protoenumEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "acl6protoenumEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class featureEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "featureEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ipv6scopeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ipv6scopeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ipv6typeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ipv6typeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class accesscmdEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "accesscmdEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vserverrhilevelEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vserverrhilevelEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ospflsatype6Enum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ospflsatype6Enum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ipv6stateEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ipv6stateEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class iptypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "iptypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ospflsatypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ospflsatypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class modeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "modeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class spthrottleEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "spthrottleEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class intList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "intList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TCnumbers.Iint(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'int[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class saclactionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "saclactionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class saclprotoclEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "saclprotoclEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class auditformatEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "auditformatEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class httpcallouttypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "httpcallouttypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class actionrespondertypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "actionrespondertypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class responderglobalbindpointEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "responderglobalbindpointEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class policylabelresponderinvoketypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "policylabelresponderinvoketypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class actionrewritetypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "actionrewritetypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class rwglobalbindpointEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "rwglobalbindpointEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class policylabeltransformEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "policylabeltransformEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class thresholdsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "thresholdsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class trapseverityEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "trapseverityEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class snmppermEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmppermEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class trapclassEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "trapclassEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class trapversionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "trapversionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class securitylevelEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "securitylevelEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class subtreetypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "subtreetypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class snmpauthtypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmpauthtypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class privtypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "privtypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class scactionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "scactionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class fipskeyexpEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "fipskeyexpEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ciphopEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ciphopEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class informatsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "informatsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class crlcheckEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "crlcheckEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ssl_params_quantumEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ssl_params_quantumEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ssl_renegEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ssl_renegEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class refreshmethodEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "refreshmethodEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ldapsrchscopeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ldapsrchscopeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class addcrlrefreshintervlEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "addcrlrefreshintervlEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class refreshintervlEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "refreshintervlEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class fipsinitlevelEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "fipsinitlevelEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class fipsfwupdateEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "fipsfwupdateEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class fipskeyinformEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "fipskeyinformEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class client_authcertEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "client_authcertEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class clntauthEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "clntauthEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class enabledisablednzEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "enabledisablednzEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessactEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessactEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_sso_credential_indexEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_sso_credential_indexEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class urltransprofiletypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "urltransprofiletypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class protocolsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "protocolsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class appmodeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appmodeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class actionvpntraffictypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "actionvpntraffictypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class onoff2Enum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "onoff2Enum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_splitdnsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_splitdnsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_splittunnelEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_splittunnelEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_locallanaccessEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_locallanaccessEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_clttypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_clttypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_proxyEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_proxyEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_enabledisabledEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_enabledisabledEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class forceclnupEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "forceclnupEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class clntoptionsEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "clntoptionsEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class clntconfEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "clntconfEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_usemipEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_usemipEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_useiipEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_useiipEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class clntdbgEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "clntdbgEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_portal_wimodeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_portal_wimodeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_cvpnmodeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_cvpnmodeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_urlencodingEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_urlencodingEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vpnsessact_perscookieEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessact_perscookieEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class configstatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "configstatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.configstatus_Def.schema
            TClist = [ZSI.TC.String(pname="consistent", aname="_consistent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="culpritcore", aname="_culpritcore", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="core", aname="_core", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="culpritcoreconfstring", aname="_culpritcoreconfstring", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="coreconfstring", aname="_coreconfstring", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._consistent = None
                    self._culpritcore = None
                    self._core = None
                    self._culpritcoreconfstring = None
                    self._coreconfstring = None
                    return
            Holder.__name__ = "configstatus_Holder"
            self.pyclass = Holder

    class configstatusList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "configstatusList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.configstatus_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'configstatus[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class location_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "location")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.location_Def.schema
            TClist = [ZSI.TC.String(pname="ipfrom", aname="_ipfrom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipto", aname="_ipto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="preferredlocation", aname="_preferredlocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q1label", aname="_q1label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q2label", aname="_q2label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q3label", aname="_q3label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q4label", aname="_q4label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q5label", aname="_q5label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q6label", aname="_q6label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipfrom = None
                    self._ipto = None
                    self._preferredlocation = None
                    self._q1label = None
                    self._q2label = None
                    self._q3label = None
                    self._q4label = None
                    self._q5label = None
                    self._q6label = None
                    return
            Holder.__name__ = "location_Holder"
            self.pyclass = Holder

    class locationList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "locationList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.location_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'location[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class locationparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "locationparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.locationparameter_Def.schema
            TClist = [ZSI.TC.String(pname="context", aname="_context", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q1label", aname="_q1label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q2label", aname="_q2label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q3label", aname="_q3label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q4label", aname="_q4label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q5label", aname="_q5label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="q6label", aname="_q6label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locationfile", aname="_locationfile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="custom", aname="_custom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="statiC", aname="_statiC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._context = None
                    self._q1label = None
                    self._q2label = None
                    self._q3label = None
                    self._q4label = None
                    self._q5label = None
                    self._q6label = None
                    self._locationfile = None
                    self._format = None
                    self._custom = None
                    self._statiC = None
                    self._flags = None
                    self._status = None
                    return
            Holder.__name__ = "locationparameter_Holder"
            self.pyclass = Holder

    class locationparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "locationparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.locationparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'locationparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class locationfile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "locationfile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.locationfile_Def.schema
            TClist = [ZSI.TC.String(pname="locationfile", aname="_locationfile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._locationfile = None
                    self._format = None
                    return
            Holder.__name__ = "locationfile_Holder"
            self.pyclass = Holder

    class locationfileList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "locationfileList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.locationfile_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'locationfile[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class server_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "server")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.server_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="internaL", aname="_internaL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="domainresolveretry", aname="_domainresolveretry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="servicegroupname", aname="_servicegroupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="translationip", aname="_translationip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="translationmask", aname="_translationmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._internaL = None
                    self._ipaddress = None
                    self._state = None
                    self._domain = None
                    self._domainresolveretry = None
                    self._servicename = None
                    self._servicegroupname = None
                    self._translationip = None
                    self._translationmask = None
                    return
            Holder.__name__ = "server_Holder"
            self.pyclass = Holder

    class serverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "serverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.server_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'server[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class service_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "service")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.service_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="all", aname="_all", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="internaL", aname="_internaL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servername", aname="_servername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="serviceconftpye", aname="_serviceconftpye", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="serviceconftype", aname="_serviceconftype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cleartextport", aname="_cleartextport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gslb", aname="_gslb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachetype", aname="_cachetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxclient", aname="_maxclient", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxreq", aname="_maxreq", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cacheable", aname="_cacheable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cip", aname="_cip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipheader", aname="_cipheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="usip", aname="_usip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="useproxyport", aname="_useproxyport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sc", aname="_sc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sp", aname="_sp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rtspsessionidremap", aname="_rtspsessionidremap", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="failedprobes", aname="_failedprobes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="totalprobes", aname="_totalprobes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="svrtimeout", aname="_svrtimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="totalfailedprobes", aname="_totalfailedprobes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serverid", aname="_serverid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cka", aname="_cka", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tcpb", aname="_tcpb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cmp", aname="_cmp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxbandwidth", aname="_maxbandwidth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="accessdown", aname="_accessdown", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="svrstate", aname="_svrstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="delay", aname="_delay", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="monitorname", aname="_monitorname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="monthreshold", aname="_monthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="monstate", aname="_monstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="monstate2", aname="_monstate2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatcode", aname="_monstatcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="responsetime", aname="_responsetime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam1", aname="_monstatparam1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam2", aname="_monstatparam2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam3", aname="_monstatparam3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="downstateflush", aname="_downstateflush", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="statechangetimesec", aname="_statechangetimesec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="statechangetimemsec", aname="_statechangetimemsec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timesincelaststatechange", aname="_timesincelaststatechange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tickssincelaststatechange", aname="_tickssincelaststatechange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="stateupdatereason", aname="_stateupdatereason", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="runningmonstate", aname="_runningmonstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="scpolicyname", aname="_scpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="dospolicyname", aname="_dospolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._all = None
                    self._internaL = None
                    self._servername = None
                    self._servicetype = None
                    self._serviceconftpye = None
                    self._serviceconftype = None
                    self._port = None
                    self._value = None
                    self._cleartextport = None
                    self._gslb = None
                    self._cachetype = None
                    self._maxclient = None
                    self._maxreq = None
                    self._cacheable = None
                    self._cip = None
                    self._cipheader = None
                    self._usip = None
                    self._useproxyport = None
                    self._sc = None
                    self._weight = None
                    self._sp = None
                    self._rtspsessionidremap = None
                    self._failedprobes = None
                    self._clttimeout = None
                    self._totalprobes = None
                    self._svrtimeout = None
                    self._totalfailedprobes = None
                    self._serverid = None
                    self._cka = None
                    self._tcpb = None
                    self._cmp = None
                    self._maxbandwidth = None
                    self._accessdown = None
                    self._svrstate = None
                    self._delay = None
                    self._ipaddress = None
                    self._monitorname = None
                    self._monthreshold = None
                    self._monstate = None
                    self._monstate2 = None
                    self._monstatcode = None
                    self._responsetime = None
                    self._monstatparam1 = None
                    self._monstatparam2 = None
                    self._monstatparam3 = None
                    self._downstateflush = None
                    self._statechangetimesec = None
                    self._statechangetimemsec = None
                    self._timesincelaststatechange = None
                    self._tickssincelaststatechange = None
                    self._stateupdatereason = None
                    self._runningmonstate = None
                    self._scpolicyname = None
                    self._dospolicyname = None
                    return
            Holder.__name__ = "service_Holder"
            self.pyclass = Holder

    class serviceList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "serviceList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.service_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'service[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class servicegroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "servicegroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.servicegroup_Def.schema
            TClist = [ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="serviceconftpye", aname="_serviceconftpye", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="serviceconftype", aname="_serviceconftype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachetype", aname="_cachetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxclient", aname="_maxclient", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxreq", aname="_maxreq", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cacheable", aname="_cacheable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cip", aname="_cip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipheader", aname="_cipheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="usip", aname="_usip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="useproxyport", aname="_useproxyport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sc", aname="_sc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sp", aname="_sp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rtspsessionidremap", aname="_rtspsessionidremap", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="svrtimeout", aname="_svrtimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cka", aname="_cka", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tcpb", aname="_tcpb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cmp", aname="_cmp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxbandwidth", aname="_maxbandwidth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="svrstate", aname="_svrstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="delay", aname="_delay", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="servername", aname="_servername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="monitorname", aname="_monitorname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="monthreshold", aname="_monthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="monstate", aname="_monstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="serverid", aname="_serverid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="monstate2", aname="_monstate2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatcode", aname="_monstatcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam1", aname="_monstatparam1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam2", aname="_monstatparam2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam3", aname="_monstatparam3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="downstateflush", aname="_downstateflush", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="statechangetimesec", aname="_statechangetimesec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="statechangetimemsec", aname="_statechangetimemsec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timesincelaststatechange", aname="_timesincelaststatechange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tickssincelaststatechange", aname="_tickssincelaststatechange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="stateupdatereason", aname="_stateupdatereason", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="groupcount", aname="_groupcount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="svcstate", aname="_svcstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._servicegroupname = None
                    self._servicetype = None
                    self._port = None
                    self._serviceconftpye = None
                    self._serviceconftype = None
                    self._value = None
                    self._cachetype = None
                    self._maxclient = None
                    self._maxreq = None
                    self._cacheable = None
                    self._cip = None
                    self._cipheader = None
                    self._usip = None
                    self._useproxyport = None
                    self._sc = None
                    self._sp = None
                    self._rtspsessionidremap = None
                    self._clttimeout = None
                    self._svrtimeout = None
                    self._cka = None
                    self._tcpb = None
                    self._cmp = None
                    self._maxbandwidth = None
                    self._state = None
                    self._svrstate = None
                    self._delay = None
                    self._ipaddress = None
                    self._servername = None
                    self._monitorname = None
                    self._monthreshold = None
                    self._monstate = None
                    self._weight = None
                    self._serverid = None
                    self._monstate2 = None
                    self._monstatcode = None
                    self._monstatparam1 = None
                    self._monstatparam2 = None
                    self._monstatparam3 = None
                    self._downstateflush = None
                    self._statechangetimesec = None
                    self._statechangetimemsec = None
                    self._timesincelaststatechange = None
                    self._tickssincelaststatechange = None
                    self._stateupdatereason = None
                    self._groupcount = None
                    self._svcstate = None
                    return
            Holder.__name__ = "servicegroup_Holder"
            self.pyclass = Holder

    class servicegroupList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "servicegroupList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.servicegroup_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'servicegroup[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vserver_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vserver")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vserver_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="insertvserveripport", aname="_insertvserveripport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vipheader", aname="_vipheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress2", aname="_ipaddress2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipv6address", aname="_ipv6address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ippattern", aname="_ippattern", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipmask", aname="_ipmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="effectivestate", aname="_effectivestate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachetype", aname="_cachetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirect", aname="_redirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="precedence", aname="_precedence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirecturl", aname="_redirecturl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authentication", aname="_authentication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="homepage", aname="_homepage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachevserver", aname="_cachevserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="somethod", aname="_somethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sopersistence", aname="_sopersistence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sothreshold", aname="_sothreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lbmethod", aname="_lbmethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hashlength", aname="_hashlength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="dataoffset", aname="_dataoffset", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="datalength", aname="_datalength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groupname", aname="_groupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m", aname="_m", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tosid", aname="_tosid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistencetype", aname="_persistencetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cookiedomain", aname="_cookiedomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistmask", aname="_persistmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistencebackup", aname="_persistencebackup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cacheable", aname="_cacheable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pq", aname="_pq", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sc", aname="_sc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionless", aname="_sessionless", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reuse", aname="_reuse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destinationvserver", aname="_destinationvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="via", aname="_via", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="connfailover", aname="_connfailover", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="casesensitive", aname="_casesensitive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirectportrewrite", aname="_redirectportrewrite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="downstateflush", aname="_downstateflush", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cookieipport", aname="_cookieipport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vserverid", aname="_vserverid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="version", aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="totalservices", aname="_totalservices", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activeservices", aname="_activeservices", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._insertvserveripport = None
                    self._vipheader = None
                    self._ipaddress = None
                    self._ipaddress2 = None
                    self._port = None
                    self._range = None
                    self._ipv6address = None
                    self._ippattern = None
                    self._ipmask = None
                    self._servicetype = None
                    self._value = None
                    self._type = None
                    self._state = None
                    self._effectivestate = None
                    self._status = None
                    self._cachetype = None
                    self._redirect = None
                    self._precedence = None
                    self._redirecturl = None
                    self._authentication = None
                    self._homepage = None
                    self._dnsvservername = None
                    self._domain = None
                    self._rule = None
                    self._policyname = None
                    self._hits = None
                    self._servicename = None
                    self._weight = None
                    self._cachevserver = None
                    self._backupvserver = None
                    self._priority = None
                    self._clttimeout = None
                    self._somethod = None
                    self._sopersistence = None
                    self._sothreshold = None
                    self._lbmethod = None
                    self._hashlength = None
                    self._dataoffset = None
                    self._datalength = None
                    self._netmask = None
                    self._groupname = None
                    self._m = None
                    self._tosid = None
                    self._persistencetype = None
                    self._cookiedomain = None
                    self._persistmask = None
                    self._persistencebackup = None
                    self._timeout = None
                    self._cacheable = None
                    self._pq = None
                    self._sc = None
                    self._sessionless = None
                    self._url = None
                    self._reuse = None
                    self._destinationvserver = None
                    self._via = None
                    self._flags = None
                    self._connfailover = None
                    self._casesensitive = None
                    self._redirectportrewrite = None
                    self._downstateflush = None
                    self._cookieipport = None
                    self._vserverid = None
                    self._version = None
                    self._totalservices = None
                    self._activeservices = None
                    return
            Holder.__name__ = "vserver_Holder"
            self.pyclass = Holder

    class vserverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vserverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vserver_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vserver[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class uiinternal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "uiinternal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.uiinternal_Def.schema
            TClist = [ZSI.TC.String(pname="entitytype", aname="_entitytype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="templatE", aname="_templatE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entitytype = None
                    self._name = None
                    self._templatE = None
                    self._comment = None
                    self._rule = None
                    return
            Holder.__name__ = "uiinternal_Holder"
            self.pyclass = Holder

    class uiinternalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "uiinternalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.uiinternal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'uiinternal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaasession_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaasession")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaasession_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groupname", aname="_groupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="intranetip", aname="_intranetip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publicip", aname="_publicip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="publicport", aname="_publicport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="privateip", aname="_privateip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="privateport", aname="_privateport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destip", aname="_destip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="intranetip2", aname="_intranetip2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._groupname = None
                    self._intranetip = None
                    self._netmask = None
                    self._publicip = None
                    self._publicport = None
                    self._ipaddress = None
                    self._port = None
                    self._privateip = None
                    self._privateport = None
                    self._destip = None
                    self._destport = None
                    self._intranetip2 = None
                    return
            Holder.__name__ = "aaasession_Holder"
            self.pyclass = Holder

    class aaasessionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaasessionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaasession_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaasession[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaauser_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaauser")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaauser_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="loggedin", aname="_loggedin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="groupname", aname="_groupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="policy", aname="_policy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="intranetapplication", aname="_intranetapplication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="urlname", aname="_urlname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="intranetip", aname="_intranetip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._loggedin = None
                    self._groupname = None
                    self._policy = None
                    self._priority = None
                    self._intranetapplication = None
                    self._urlname = None
                    self._intranetip = None
                    self._netmask = None
                    return
            Holder.__name__ = "aaauser_Holder"
            self.pyclass = Holder

    class aaauserList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaauserList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaauser_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaauser[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaagroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaagroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaagroup_Def.schema
            TClist = [ZSI.TC.String(pname="groupname", aname="_groupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="loggedin", aname="_loggedin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="policy", aname="_policy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="intranetapplication", aname="_intranetapplication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="urlname", aname="_urlname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="intranetip", aname="_intranetip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._groupname = None
                    self._loggedin = None
                    self._username = None
                    self._policy = None
                    self._priority = None
                    self._intranetapplication = None
                    self._urlname = None
                    self._intranetip = None
                    self._netmask = None
                    return
            Holder.__name__ = "aaagroup_Holder"
            self.pyclass = Holder

    class aaagroupList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaagroupList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaagroup_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaagroup[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaaradiusparams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaaradiusparams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaaradiusparams_Def.schema
            TClist = [ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radkey", aname="_radkey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radnasip", aname="_radnasip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radnasid", aname="_radnasid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="radvendorid", aname="_radvendorid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="radattributetype", aname="_radattributetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radgroupsprefix", aname="_radgroupsprefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radgroupseparator", aname="_radgroupseparator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="passencoding", aname="_passencoding", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ipvendorid", aname="_ipvendorid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ipattributetype", aname="_ipattributetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="accounting", aname="_accounting", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverip = None
                    self._serverport = None
                    self._radkey = None
                    self._authtimeout = None
                    self._radnasip = None
                    self._radnasid = None
                    self._ipaddress = None
                    self._radvendorid = None
                    self._radattributetype = None
                    self._radgroupsprefix = None
                    self._radgroupseparator = None
                    self._passencoding = None
                    self._ipvendorid = None
                    self._ipattributetype = None
                    self._accounting = None
                    return
            Holder.__name__ = "aaaradiusparams_Holder"
            self.pyclass = Holder

    class aaaradiusparamsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaaradiusparamsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaaradiusparams_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaaradiusparams[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaaldapparams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaaldapparams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaaldapparams_Def.schema
            TClist = [ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ldapbinddn", aname="_ldapbinddn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ldaploginname", aname="_ldaploginname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ldapbase", aname="_ldapbase", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sectype", aname="_sectype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssonameattribute", aname="_ssonameattribute", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="searchfilter", aname="_searchfilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groupattrname", aname="_groupattrname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subattributename", aname="_subattributename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverip = None
                    self._serverport = None
                    self._authtimeout = None
                    self._ldapbinddn = None
                    self._ldaploginname = None
                    self._ldapbase = None
                    self._sectype = None
                    self._ssonameattribute = None
                    self._searchfilter = None
                    self._groupattrname = None
                    self._subattributename = None
                    return
            Holder.__name__ = "aaaldapparams_Holder"
            self.pyclass = Holder

    class aaaldapparamsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaaldapparamsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaaldapparams_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaaldapparams[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaatacacsparams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaatacacsparams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaatacacsparams_Def.schema
            TClist = [ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tacacssecret", aname="_tacacssecret", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authorization", aname="_authorization", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="accounting", aname="_accounting", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverip = None
                    self._serverport = None
                    self._authtimeout = None
                    self._tacacssecret = None
                    self._authorization = None
                    self._accounting = None
                    return
            Holder.__name__ = "aaatacacsparams_Holder"
            self.pyclass = Holder

    class aaatacacsparamsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaatacacsparamsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaatacacsparams_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaatacacsparams[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaant4params_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaant4params")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaant4params_Def.schema
            TClist = [ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nt4servername", aname="_nt4servername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nt4domainname", aname="_nt4domainname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nt4adminuser", aname="_nt4adminuser", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nt4adminpasswd", aname="_nt4adminpasswd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverip = None
                    self._nt4servername = None
                    self._nt4domainname = None
                    self._nt4adminuser = None
                    self._nt4adminpasswd = None
                    return
            Holder.__name__ = "aaant4params_Holder"
            self.pyclass = Holder

    class aaant4paramsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaant4paramsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaant4params_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaant4params[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaacertparams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaacertparams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaacertparams_Def.schema
            TClist = [ZSI.TC.String(pname="twofactor", aname="_twofactor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="usernamefield", aname="_usernamefield", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groupnamefield", aname="_groupnamefield", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._twofactor = None
                    self._usernamefield = None
                    self._groupnamefield = None
                    return
            Holder.__name__ = "aaacertparams_Holder"
            self.pyclass = Holder

    class aaacertparamsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaacertparamsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaacertparams_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaacertparams[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaaparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaaparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaaparameter_Def.schema
            TClist = [ZSI.TC.String(pname="defaultauthtype", aname="_defaultauthtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxaaausers", aname="_maxaaausers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._defaultauthtype = None
                    self._maxaaausers = None
                    return
            Holder.__name__ = "aaaparameter_Holder"
            self.pyclass = Holder

    class aaaparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaaparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaaparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaaparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaapreauthenticationaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaapreauthenticationaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaapreauthenticationaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="preauthenticationaction", aname="_preauthenticationaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="killprocess", aname="_killprocess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="deletefiles", aname="_deletefiles", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._preauthenticationaction = None
                    self._killprocess = None
                    self._deletefiles = None
                    return
            Holder.__name__ = "aaapreauthenticationaction_Holder"
            self.pyclass = Holder

    class aaapreauthenticationactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaapreauthenticationactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaapreauthenticationaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaapreauthenticationaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaapreauthenticationpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaapreauthenticationpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaapreauthenticationpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqaction", aname="_reqaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._reqaction = None
                    self._hits = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "aaapreauthenticationpolicy_Holder"
            self.pyclass = Holder

    class aaapreauthenticationpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaapreauthenticationpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaapreauthenticationpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaapreauthenticationpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaapreauthenticationparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaapreauthenticationparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaapreauthenticationparameter_Def.schema
            TClist = [ZSI.TC.String(pname="preauthenticationaction", aname="_preauthenticationaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="killprocess", aname="_killprocess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="deletefiles", aname="_deletefiles", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._preauthenticationaction = None
                    self._rule = None
                    self._killprocess = None
                    self._deletefiles = None
                    return
            Holder.__name__ = "aaapreauthenticationparameter_Holder"
            self.pyclass = Holder

    class aaapreauthenticationparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaapreauthenticationparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaapreauthenticationparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaapreauthenticationparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class aaaglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "aaaglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.aaaglobal_Def.schema
            TClist = [ZSI.TC.String(pname="policy", aname="_policy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policy = None
                    self._priority = None
                    return
            Holder.__name__ = "aaaglobal_Holder"
            self.pyclass = Holder

    class aaaglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "aaaglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.aaaglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'aaaglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class appfwfieldtype_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appfwfieldtype")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.appfwfieldtype_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="regex", aname="_regex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._regex = None
                    self._priority = None
                    self._comment = None
                    return
            Holder.__name__ = "appfwfieldtype_Holder"
            self.pyclass = Holder

    class appfwfieldtypeList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "appfwfieldtypeList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.appfwfieldtype_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'appfwfieldtype[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class appfwsettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appfwsettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.appfwsettings_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="sessiontimeout", aname="_sessiontimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sessionlifetime", aname="_sessionlifetime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessioncookiename", aname="_sessioncookiename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientiploggingheader", aname="_clientiploggingheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessiontimeout = None
                    self._sessionlifetime = None
                    self._sessioncookiename = None
                    self._clientiploggingheader = None
                    return
            Holder.__name__ = "appfwsettings_Holder"
            self.pyclass = Holder

    class appfwsettingsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "appfwsettingsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.appfwsettings_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'appfwsettings[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class appfwprofile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appfwprofile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.appfwprofile_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="usehtmlerrorobject", aname="_usehtmlerrorobject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="errorurl", aname="_errorurl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="htmlerrorobject", aname="_htmlerrorobject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="stripcomments", aname="_stripcomments", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultcharset", aname="_defaultcharset", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="postbodylimit", aname="_postbodylimit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="canonicalizehtmlresponse", aname="_canonicalizehtmlresponse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="enableformtagging", aname="_enableformtagging", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="excludefileuploadfromchecks", aname="_excludefileuploadfromchecks", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sqlinjectionparsecomments", aname="_sqlinjectionparsecomments", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="starturlaction", aname="_starturlaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="starturl", aname="_starturl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="starturlclosure", aname="_starturlclosure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="denyurlaction", aname="_denyurlaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="denyurl", aname="_denyurl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crosssitescriptingaction", aname="_crosssitescriptingaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crosssitescriptingtransformunsafehtml", aname="_crosssitescriptingtransformunsafehtml", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crosssitescriptingcheckcompleteurls", aname="_crosssitescriptingcheckcompleteurls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crosssitescripting", aname="_crosssitescripting", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="isregex", aname="_isregex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formactionurl", aname="_formactionurl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sqlinjectionaction", aname="_sqlinjectionaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sqlinjectiontransformspecialchars", aname="_sqlinjectiontransformspecialchars", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sqlinjectiononlycheckfieldswithsqlchars", aname="_sqlinjectiononlycheckfieldswithsqlchars", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sqlinjection", aname="_sqlinjection", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="isregex2", aname="_isregex2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formactionurl2", aname="_formactionurl2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fieldconsistencyaction", aname="_fieldconsistencyaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fieldconsistency", aname="_fieldconsistency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="isregex3", aname="_isregex3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formactionurl3", aname="_formactionurl3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cookieconsistencyaction", aname="_cookieconsistencyaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cookieconsistency", aname="_cookieconsistency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="isregex4", aname="_isregex4", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bufferoverflowaction", aname="_bufferoverflowaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bufferoverflowmaxurllength", aname="_bufferoverflowmaxurllength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bufferoverflowmaxheaderlength", aname="_bufferoverflowmaxheaderlength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bufferoverflowmaxcookielength", aname="_bufferoverflowmaxcookielength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fieldformataction", aname="_fieldformataction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultfieldformattype", aname="_defaultfieldformattype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="defaultfieldformatminlength", aname="_defaultfieldformatminlength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="defaultfieldformatmaxlength", aname="_defaultfieldformatmaxlength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fieldformat", aname="_fieldformat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="isregex5", aname="_isregex5", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="formactionurl4", aname="_formactionurl4", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fieldtype", aname="_fieldtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="fieldformatminlength", aname="_fieldformatminlength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="fieldformatmaxlength", aname="_fieldformatmaxlength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="creditcardaction", aname="_creditcardaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="creditcard", aname="_creditcard", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="creditcardmaxallowed", aname="_creditcardmaxallowed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="creditcardxout", aname="_creditcardxout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="safeobject", aname="_safeobject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="expression", aname="_expression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxmatchlength", aname="_maxmatchlength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlerrorobject", aname="_xmlerrorobject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="_xmlformataction", aname="__xmlformataction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="_xmldosaction", aname="__xmldosaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="_xmlsqlinjectionaction", aname="__xmlsqlinjectionaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlsqlinjectiononlycheckfieldswithsqlchars", aname="_xmlsqlinjectiononlycheckfieldswithsqlchars", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlsqlinjectionparsecomments", aname="_xmlsqlinjectionparsecomments", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="_xmlxssaction", aname="__xmlxssaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="_xmlwsiaction", aname="__xmlwsiaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="_xmlattachmentaction", aname="__xmlattachmentaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="_xmlvalidationaction", aname="__xmlvalidationaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmldosurl", aname="_xmldosurl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlwsiurl", aname="_xmlwsiurl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlvalidationurl", aname="_xmlvalidationurl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlmaxelementdepthcheck", aname="_xmlmaxelementdepthcheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="xmlmaxelementdepth", aname="_xmlmaxelementdepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlmaxelementnamelengthcheck", aname="_xmlmaxelementnamelengthcheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="xmlmaxelementnamelength", aname="_xmlmaxelementnamelength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlmaxelementscheck", aname="_xmlmaxelementscheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="xmlmaxelements", aname="_xmlmaxelements", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlmaxelementchildrencheck", aname="_xmlmaxelementchildrencheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="xmlmaxelementchildren", aname="_xmlmaxelementchildren", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlmaxattributescheck", aname="_xmlmaxattributescheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="xmlmaxattributes", aname="_xmlmaxattributes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlmaxattributenamelengthcheck", aname="_xmlmaxattributenamelengthcheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="xmlmaxattributenamelength", aname="_xmlmaxattributenamelength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlmaxattributevaluelengthcheck", aname="_xmlmaxattributevaluelengthcheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="xmlmaxattributevaluelength", aname="_xmlmaxattributevaluelength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlmaxchardatalengthcheck", aname="_xmlmaxchardatalengthcheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="xmlmaxchardatalength", aname="_xmlmaxchardatalength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlmaxfilesizecheck", aname="_xmlmaxfilesizecheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="xmlmaxfilesize", aname="_xmlmaxfilesize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlminfilesizecheck", aname="_xmlminfilesizecheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="xmlminfilesize", aname="_xmlminfilesize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlblockpi", aname="_xmlblockpi", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlblockdtd", aname="_xmlblockdtd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlblockexternalentities", aname="_xmlblockexternalentities", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlwsichecks", aname="_xmlwsichecks", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlrequestschema", aname="_xmlrequestschema", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlresponseschema", aname="_xmlresponseschema", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlwsdl", aname="_xmlwsdl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmladditionalsoapheaders", aname="_xmladditionalsoapheaders", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlvalidatesoapenvelope", aname="_xmlvalidatesoapenvelope", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlvalidateresponse", aname="_xmlvalidateresponse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    self._usehtmlerrorobject = None
                    self._errorurl = None
                    self._htmlerrorobject = None
                    self._stripcomments = None
                    self._defaultcharset = None
                    self._postbodylimit = None
                    self._canonicalizehtmlresponse = None
                    self._enableformtagging = None
                    self._excludefileuploadfromchecks = None
                    self._sqlinjectionparsecomments = None
                    self._starturlaction = None
                    self._starturl = None
                    self._starturlclosure = None
                    self._denyurlaction = None
                    self._denyurl = None
                    self._crosssitescriptingaction = None
                    self._crosssitescriptingtransformunsafehtml = None
                    self._crosssitescriptingcheckcompleteurls = None
                    self._crosssitescripting = None
                    self._isregex = None
                    self._formactionurl = None
                    self._sqlinjectionaction = None
                    self._sqlinjectiontransformspecialchars = None
                    self._sqlinjectiononlycheckfieldswithsqlchars = None
                    self._sqlinjection = None
                    self._isregex2 = None
                    self._formactionurl2 = None
                    self._fieldconsistencyaction = None
                    self._fieldconsistency = None
                    self._isregex3 = None
                    self._formactionurl3 = None
                    self._cookieconsistencyaction = None
                    self._cookieconsistency = None
                    self._isregex4 = None
                    self._bufferoverflowaction = None
                    self._bufferoverflowmaxurllength = None
                    self._bufferoverflowmaxheaderlength = None
                    self._bufferoverflowmaxcookielength = None
                    self._fieldformataction = None
                    self._defaultfieldformattype = None
                    self._defaultfieldformatminlength = None
                    self._defaultfieldformatmaxlength = None
                    self._fieldformat = None
                    self._isregex5 = None
                    self._formactionurl4 = None
                    self._fieldtype = None
                    self._fieldformatminlength = None
                    self._fieldformatmaxlength = None
                    self._creditcardaction = None
                    self._creditcard = None
                    self._creditcardmaxallowed = None
                    self._creditcardxout = None
                    self._safeobject = None
                    self._expression = None
                    self._maxmatchlength = None
                    self._actioN = None
                    self._xmlerrorobject = None
                    self.__xmlformataction = None
                    self.__xmldosaction = None
                    self.__xmlsqlinjectionaction = None
                    self._xmlsqlinjectiononlycheckfieldswithsqlchars = None
                    self._xmlsqlinjectionparsecomments = None
                    self.__xmlxssaction = None
                    self.__xmlwsiaction = None
                    self.__xmlattachmentaction = None
                    self.__xmlvalidationaction = None
                    self._xmldosurl = None
                    self._xmlwsiurl = None
                    self._xmlvalidationurl = None
                    self._state = None
                    self._xmlmaxelementdepthcheck = None
                    self._xmlmaxelementdepth = None
                    self._xmlmaxelementnamelengthcheck = None
                    self._xmlmaxelementnamelength = None
                    self._xmlmaxelementscheck = None
                    self._xmlmaxelements = None
                    self._xmlmaxelementchildrencheck = None
                    self._xmlmaxelementchildren = None
                    self._xmlmaxattributescheck = None
                    self._xmlmaxattributes = None
                    self._xmlmaxattributenamelengthcheck = None
                    self._xmlmaxattributenamelength = None
                    self._xmlmaxattributevaluelengthcheck = None
                    self._xmlmaxattributevaluelength = None
                    self._xmlmaxchardatalengthcheck = None
                    self._xmlmaxchardatalength = None
                    self._xmlmaxfilesizecheck = None
                    self._xmlmaxfilesize = None
                    self._xmlminfilesizecheck = None
                    self._xmlminfilesize = None
                    self._xmlblockpi = None
                    self._xmlblockdtd = None
                    self._xmlblockexternalentities = None
                    self._xmlwsichecks = None
                    self._xmlrequestschema = None
                    self._xmlresponseschema = None
                    self._xmlwsdl = None
                    self._xmladditionalsoapheaders = None
                    self._xmlvalidatesoapenvelope = None
                    self._xmlvalidateresponse = None
                    self._comment = None
                    return
            Holder.__name__ = "appfwprofile_Holder"
            self.pyclass = Holder

    class appfwprofileList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "appfwprofileList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.appfwprofile_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'appfwprofile[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class appfwpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appfwpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.appfwpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="profilename", aname="_profilename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._profilename = None
                    self._hits = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "appfwpolicy_Holder"
            self.pyclass = Holder

    class appfwpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "appfwpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.appfwpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'appfwpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class appfwglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appfwglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.appfwglobal_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._priority = None
                    self._state = None
                    return
            Holder.__name__ = "appfwglobal_Holder"
            self.pyclass = Holder

    class appfwglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "appfwglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.appfwglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'appfwglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class appfwlearningsettings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appfwlearningsettings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.appfwlearningsettings_Def.schema
            TClist = [ZSI.TC.String(pname="profilename", aname="_profilename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="starturlminthreshold", aname="_starturlminthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="starturlpercentthreshold", aname="_starturlpercentthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cookieconsistencyminthreshold", aname="_cookieconsistencyminthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cookieconsistencypercentthreshold", aname="_cookieconsistencypercentthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="fieldconsistencyminthreshold", aname="_fieldconsistencyminthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="fieldconsistencypercentthreshold", aname="_fieldconsistencypercentthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="crosssitescriptingminthreshold", aname="_crosssitescriptingminthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="crosssitescriptingpercentthreshold", aname="_crosssitescriptingpercentthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sqlinjectionminthreshold", aname="_sqlinjectionminthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sqlinjectionpercentthreshold", aname="_sqlinjectionpercentthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="fieldformatminthreshold", aname="_fieldformatminthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="fieldformatpercentthreshold", aname="_fieldformatpercentthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._profilename = None
                    self._starturlminthreshold = None
                    self._starturlpercentthreshold = None
                    self._cookieconsistencyminthreshold = None
                    self._cookieconsistencypercentthreshold = None
                    self._fieldconsistencyminthreshold = None
                    self._fieldconsistencypercentthreshold = None
                    self._crosssitescriptingminthreshold = None
                    self._crosssitescriptingpercentthreshold = None
                    self._sqlinjectionminthreshold = None
                    self._sqlinjectionpercentthreshold = None
                    self._fieldformatminthreshold = None
                    self._fieldformatpercentthreshold = None
                    return
            Holder.__name__ = "appfwlearningsettings_Holder"
            self.pyclass = Holder

    class appfwlearningsettingsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "appfwlearningsettingsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.appfwlearningsettings_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'appfwlearningsettings[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class appfwlearningdata_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appfwlearningdata")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.appfwlearningdata_Def.schema
            TClist = [ZSI.TC.String(pname="profilename", aname="_profilename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="securitycheck", aname="_securitycheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="data", aname="_data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._profilename = None
                    self._securitycheck = None
                    self._data = None
                    return
            Holder.__name__ = "appfwlearningdata_Holder"
            self.pyclass = Holder

    class appfwlearningdataList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "appfwlearningdataList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.appfwlearningdata_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'appfwlearningdata[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class appfwconfidfield_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appfwconfidfield")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.appfwconfidfield_Def.schema
            TClist = [ZSI.TC.String(pname="fieldname", aname="_fieldname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="isregex", aname="_isregex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldname = None
                    self._url = None
                    self._isregex = None
                    self._comment = None
                    self._state = None
                    return
            Holder.__name__ = "appfwconfidfield_Holder"
            self.pyclass = Holder

    class appfwconfidfieldList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "appfwconfidfieldList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.appfwconfidfield_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'appfwconfidfield[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class appfwhtmlerrorpage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "appfwhtmlerrorpage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.appfwhtmlerrorpage_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "appfwhtmlerrorpage_Holder"
            self.pyclass = Holder

    class appfwhtmlerrorpageList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "appfwhtmlerrorpageList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.appfwhtmlerrorpage_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'appfwhtmlerrorpage[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class auditmessages_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "auditmessages")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.auditmessages_Def.schema
            TClist = [ZSI.TC.String(pname="loglevel", aname="_loglevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="numofmesgs", aname="_numofmesgs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._loglevel = None
                    self._numofmesgs = None
                    self._value = None
                    return
            Holder.__name__ = "auditmessages_Holder"
            self.pyclass = Holder

    class auditmessagesList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "auditmessagesList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.auditmessages_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'auditmessages[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class auditsyslogaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "auditsyslogaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.auditsyslogaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loglevel", aname="_loglevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dateformat", aname="_dateformat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logfacility", aname="_logfacility", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tcp", aname="_tcp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="acl", aname="_acl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timezone", aname="_timezone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._serverip = None
                    self._serverport = None
                    self._loglevel = None
                    self._dateformat = None
                    self._logfacility = None
                    self._tcp = None
                    self._acl = None
                    self._timezone = None
                    return
            Holder.__name__ = "auditsyslogaction_Holder"
            self.pyclass = Holder

    class auditsyslogactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "auditsyslogactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.auditsyslogaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'auditsyslogaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class auditsyslogpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "auditsyslogpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.auditsyslogpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._actioN = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "auditsyslogpolicy_Holder"
            self.pyclass = Holder

    class auditsyslogpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "auditsyslogpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.auditsyslogpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'auditsyslogpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class auditsyslogparams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "auditsyslogparams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.auditsyslogparams_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dateformat", aname="_dateformat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loglevel", aname="_loglevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logfacility", aname="_logfacility", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tcp", aname="_tcp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="acl", aname="_acl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timezone", aname="_timezone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._serverip = None
                    self._serverport = None
                    self._dateformat = None
                    self._loglevel = None
                    self._logfacility = None
                    self._tcp = None
                    self._acl = None
                    self._timezone = None
                    return
            Holder.__name__ = "auditsyslogparams_Holder"
            self.pyclass = Holder

    class auditsyslogparamsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "auditsyslogparamsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.auditsyslogparams_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'auditsyslogparams[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class auditnslogaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "auditnslogaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.auditnslogaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loglevel", aname="_loglevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dateformat", aname="_dateformat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logfacility", aname="_logfacility", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tcp", aname="_tcp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="acl", aname="_acl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timezone", aname="_timezone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._serverip = None
                    self._serverport = None
                    self._loglevel = None
                    self._dateformat = None
                    self._logfacility = None
                    self._tcp = None
                    self._acl = None
                    self._timezone = None
                    return
            Holder.__name__ = "auditnslogaction_Holder"
            self.pyclass = Holder

    class auditnslogactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "auditnslogactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.auditnslogaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'auditnslogaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class auditnslogpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "auditnslogpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.auditnslogpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._actioN = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "auditnslogpolicy_Holder"
            self.pyclass = Holder

    class auditnslogpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "auditnslogpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.auditnslogpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'auditnslogpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class auditnslogparams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "auditnslogparams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.auditnslogparams_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dateformat", aname="_dateformat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loglevel", aname="_loglevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logfacility", aname="_logfacility", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tcp", aname="_tcp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="acl", aname="_acl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timezone", aname="_timezone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._serverip = None
                    self._serverport = None
                    self._dateformat = None
                    self._loglevel = None
                    self._logfacility = None
                    self._tcp = None
                    self._acl = None
                    self._timezone = None
                    return
            Holder.__name__ = "auditnslogparams_Holder"
            self.pyclass = Holder

    class auditnslogparamsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "auditnslogparamsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.auditnslogparams_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'auditnslogparams[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationradiusaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationradiusaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationradiusaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radkey", aname="_radkey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radnasip", aname="_radnasip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radnasid", aname="_radnasid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="radvendorid", aname="_radvendorid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="radattributetype", aname="_radattributetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radgroupsprefix", aname="_radgroupsprefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radgroupseparator", aname="_radgroupseparator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="passencoding", aname="_passencoding", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ipvendorid", aname="_ipvendorid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ipattributetype", aname="_ipattributetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="accounting", aname="_accounting", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="success", aname="_success", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="failure", aname="_failure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._serverip = None
                    self._serverport = None
                    self._authtimeout = None
                    self._radkey = None
                    self._radnasip = None
                    self._ipaddress = None
                    self._radnasid = None
                    self._radvendorid = None
                    self._radattributetype = None
                    self._radgroupsprefix = None
                    self._radgroupseparator = None
                    self._passencoding = None
                    self._ipvendorid = None
                    self._ipattributetype = None
                    self._accounting = None
                    self._success = None
                    self._failure = None
                    return
            Holder.__name__ = "authenticationradiusaction_Holder"
            self.pyclass = Holder

    class authenticationradiusactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationradiusactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationradiusaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationradiusaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationldapaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationldapaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationldapaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ldapbinddn", aname="_ldapbinddn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ldaploginname", aname="_ldaploginname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ldapbase", aname="_ldapbase", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="searchfilter", aname="_searchfilter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groupattrname", aname="_groupattrname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subattributename", aname="_subattributename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sectype", aname="_sectype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssonameattribute", aname="_ssonameattribute", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authentication", aname="_authentication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="requireuser", aname="_requireuser", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="success", aname="_success", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="failure", aname="_failure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._serverip = None
                    self._serverport = None
                    self._authtimeout = None
                    self._ldapbinddn = None
                    self._ldaploginname = None
                    self._ldapbase = None
                    self._searchfilter = None
                    self._groupattrname = None
                    self._subattributename = None
                    self._sectype = None
                    self._ssonameattribute = None
                    self._authentication = None
                    self._requireuser = None
                    self._success = None
                    self._failure = None
                    return
            Holder.__name__ = "authenticationldapaction_Holder"
            self.pyclass = Holder

    class authenticationldapactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationldapactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationldapaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationldapaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationtacacsaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationtacacsaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationtacacsaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serverport", aname="_serverport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="authtimeout", aname="_authtimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tacacssecret", aname="_tacacssecret", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authorization", aname="_authorization", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="accounting", aname="_accounting", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="success", aname="_success", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="failure", aname="_failure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._serverip = None
                    self._serverport = None
                    self._authtimeout = None
                    self._tacacssecret = None
                    self._authorization = None
                    self._accounting = None
                    self._success = None
                    self._failure = None
                    return
            Holder.__name__ = "authenticationtacacsaction_Holder"
            self.pyclass = Holder

    class authenticationtacacsactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationtacacsactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationtacacsaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationtacacsaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationnt4action_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationnt4action")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationnt4action_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nt4servername", aname="_nt4servername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nt4domainname", aname="_nt4domainname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nt4adminuser", aname="_nt4adminuser", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="success", aname="_success", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="failure", aname="_failure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._serverip = None
                    self._nt4servername = None
                    self._nt4domainname = None
                    self._nt4adminuser = None
                    self._success = None
                    self._failure = None
                    return
            Holder.__name__ = "authenticationnt4action_Holder"
            self.pyclass = Holder

    class authenticationnt4actionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationnt4actionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationnt4action_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationnt4action[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationcertaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationcertaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationcertaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="twofactor", aname="_twofactor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="usernamefield", aname="_usernamefield", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groupnamefield", aname="_groupnamefield", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._twofactor = None
                    self._usernamefield = None
                    self._groupnamefield = None
                    return
            Holder.__name__ = "authenticationcertaction_Holder"
            self.pyclass = Holder

    class authenticationcertactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationcertactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationcertaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationcertaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationlocalpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationlocalpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationlocalpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "authenticationlocalpolicy_Holder"
            self.pyclass = Holder

    class authenticationlocalpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationlocalpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationlocalpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationlocalpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationradiuspolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationradiuspolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationradiuspolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqaction", aname="_reqaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._reqaction = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "authenticationradiuspolicy_Holder"
            self.pyclass = Holder

    class authenticationradiuspolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationradiuspolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationradiuspolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationradiuspolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationcertpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationcertpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationcertpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqaction", aname="_reqaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._reqaction = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "authenticationcertpolicy_Holder"
            self.pyclass = Holder

    class authenticationcertpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationcertpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationcertpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationcertpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationldappolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationldappolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationldappolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqaction", aname="_reqaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._reqaction = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "authenticationldappolicy_Holder"
            self.pyclass = Holder

    class authenticationldappolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationldappolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationldappolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationldappolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationtacacspolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationtacacspolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationtacacspolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqaction", aname="_reqaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._reqaction = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "authenticationtacacspolicy_Holder"
            self.pyclass = Holder

    class authenticationtacacspolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationtacacspolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationtacacspolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationtacacspolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationnt4policy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationnt4policy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationnt4policy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqaction", aname="_reqaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._reqaction = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "authenticationnt4policy_Holder"
            self.pyclass = Holder

    class authenticationnt4policyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationnt4policyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationnt4policy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationnt4policy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authenticationvserver_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authenticationvserver")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authenticationvserver_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress2", aname="_ipaddress2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachetype", aname="_cachetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirect", aname="_redirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="precedence", aname="_precedence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirecturl", aname="_redirecturl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authentication", aname="_authentication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="curaaausers", aname="_curaaausers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authenticationdomain", aname="_authenticationdomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachevserver", aname="_cachevserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="somethod", aname="_somethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sothreshold", aname="_sothreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sopersistence", aname="_sopersistence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sopersistencetimeout", aname="_sopersistencetimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="downstateflush", aname="_downstateflush", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="disableprimaryondown", aname="_disableprimaryondown", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="auditpolicyname", aname="_auditpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="auditpolicypriority", aname="_auditpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="sessionpolicyname", aname="_sessionpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="sessionpolicypriority", aname="_sessionpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="authpolicyname", aname="_authpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="secondaryauthpolicy", aname="_secondaryauthpolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="authpolicypriority", aname="_authpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._ipaddress = None
                    self._ipaddress2 = None
                    self._value = None
                    self._port = None
                    self._range = None
                    self._servicetype = None
                    self._type = None
                    self._state = None
                    self._status = None
                    self._cachetype = None
                    self._redirect = None
                    self._precedence = None
                    self._redirecturl = None
                    self._authentication = None
                    self._curaaausers = None
                    self._authenticationdomain = None
                    self._rule = None
                    self._policyname = None
                    self._servicename = None
                    self._weight = None
                    self._cachevserver = None
                    self._backupvserver = None
                    self._clttimeout = None
                    self._somethod = None
                    self._sothreshold = None
                    self._sopersistence = None
                    self._sopersistencetimeout = None
                    self._priority = None
                    self._downstateflush = None
                    self._disableprimaryondown = None
                    self._auditpolicyname = None
                    self._auditpolicypriority = None
                    self._sessionpolicyname = None
                    self._sessionpolicypriority = None
                    self._authpolicyname = None
                    self._secondaryauthpolicy = None
                    self._authpolicypriority = None
                    return
            Holder.__name__ = "authenticationvserver_Holder"
            self.pyclass = Holder

    class authenticationvserverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authenticationvserverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authenticationvserver_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authenticationvserver[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class authorizationpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "authorizationpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authorizationpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._actioN = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "authorizationpolicy_Holder"
            self.pyclass = Holder

    class authorizationpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "authorizationpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.authorizationpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'authorizationpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cacheobject_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cacheobject")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cacheobject_Def.schema
            TClist = [ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="locator", aname="_locator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="host", aname="_host", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groupname", aname="_groupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="httpmethod", aname="_httpmethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="group", aname="_group", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ignoremarkerobjects", aname="_ignoremarkerobjects", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="includenotreadyobjects", aname="_includenotreadyobjects", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cacheressize", aname="_cacheressize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachereshdrsize", aname="_cachereshdrsize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="httpstatus", aname="_httpstatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cacheetag", aname="_cacheetag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachereslastmod", aname="_cachereslastmod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecontrol", aname="_cachecontrol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cacheresdate", aname="_cacheresdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="contentgroup", aname="_contentgroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="destip", aname="_destip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellcomplex", aname="_cachecellcomplex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="hitparams", aname="_hitparams", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="hitvalues", aname="_hitvalues", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachecellreqtime", aname="_cachecellreqtime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachecellrestime", aname="_cachecellrestime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachecurage", aname="_cachecurage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachecellexpires", aname="_cachecellexpires", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachecellexpiresmillisec", aname="_cachecellexpiresmillisec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flushed", aname="_flushed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="prefetch", aname="_prefetch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="prefetchperiod", aname="_prefetchperiod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="prefetchperiodmillisec", aname="_prefetchperiodmillisec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachecellcurreaders", aname="_cachecellcurreaders", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachecellcurmisses", aname="_cachecellcurmisses", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachecellhits", aname="_cachecellhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachecellmisses", aname="_cachecellmisses", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellgzipcompressed", aname="_cachecellgzipcompressed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecelldeflatecompressed", aname="_cachecelldeflatecompressed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellcompressionformat", aname="_cachecellcompressionformat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellappfwmetadataexists", aname="_cachecellappfwmetadataexists", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellhttp11", aname="_cachecellhttp11", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellweaketag", aname="_cachecellweaketag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellresbadsize", aname="_cachecellresbadsize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="markerreason", aname="_markerreason", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellpolleverytime", aname="_cachecellpolleverytime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecelletaginserted", aname="_cachecelletaginserted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellreadywithlastbyte", aname="_cachecellreadywithlastbyte", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecelldestipverified", aname="_cachecelldestipverified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellfwpxyobj", aname="_cachecellfwpxyobj", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellbasefile", aname="_cachecellbasefile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecellminhitflag", aname="_cachecellminhitflag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="cachecellminhit", aname="_cachecellminhit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="policy", aname="_policy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="selectorname", aname="_selectorname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="selectorvalue", aname="_selectorvalue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cacheurls", aname="_cacheurls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="warnbucketskip", aname="_warnbucketskip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="totalobjs", aname="_totalobjs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="httpcalloutcell", aname="_httpcalloutcell", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="httpcalloutname", aname="_httpcalloutname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returntype", aname="_returntype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="httpcalloutresult", aname="_httpcalloutresult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._url = None
                    self._locator = None
                    self._host = None
                    self._port = None
                    self._groupname = None
                    self._httpmethod = None
                    self._group = None
                    self._ignoremarkerobjects = None
                    self._includenotreadyobjects = None
                    self._cacheressize = None
                    self._cachereshdrsize = None
                    self._httpstatus = None
                    self._cacheetag = None
                    self._cachereslastmod = None
                    self._cachecontrol = None
                    self._cacheresdate = None
                    self._contentgroup = None
                    self._destip = None
                    self._destport = None
                    self._cachecellcomplex = None
                    self._hitparams = None
                    self._hitvalues = None
                    self._cachecellreqtime = None
                    self._cachecellrestime = None
                    self._cachecurage = None
                    self._cachecellexpires = None
                    self._cachecellexpiresmillisec = None
                    self._flushed = None
                    self._prefetch = None
                    self._prefetchperiod = None
                    self._prefetchperiodmillisec = None
                    self._cachecellcurreaders = None
                    self._cachecellcurmisses = None
                    self._cachecellhits = None
                    self._cachecellmisses = None
                    self._cachecellgzipcompressed = None
                    self._cachecelldeflatecompressed = None
                    self._cachecellcompressionformat = None
                    self._cachecellappfwmetadataexists = None
                    self._cachecellhttp11 = None
                    self._cachecellweaketag = None
                    self._cachecellresbadsize = None
                    self._markerreason = None
                    self._cachecellpolleverytime = None
                    self._cachecelletaginserted = None
                    self._cachecellreadywithlastbyte = None
                    self._cachecelldestipverified = None
                    self._cachecellfwpxyobj = None
                    self._cachecellbasefile = None
                    self._cachecellminhitflag = None
                    self._cachecellminhit = None
                    self._policy = None
                    self._policyname = None
                    self._selectorname = None
                    self._rule = None
                    self._selectorvalue = None
                    self._cacheurls = None
                    self._warnbucketskip = None
                    self._totalobjs = None
                    self._httpcalloutcell = None
                    self._httpcalloutname = None
                    self._returntype = None
                    self._httpcalloutresult = None
                    return
            Holder.__name__ = "cacheobject_Holder"
            self.pyclass = Holder

    class cacheobjectList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cacheobjectList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cacheobject_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cacheobject[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cachepolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cachepolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cachepolicy_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="storeingroup", aname="_storeingroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="invalgroups", aname="_invalgroups", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="invalobjects", aname="_invalobjects", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="undefaction", aname="_undefaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="undefhits", aname="_undefhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="precededefrules", aname="_precededefrules", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._rule = None
                    self._actioN = None
                    self._storeingroup = None
                    self._invalgroups = None
                    self._invalobjects = None
                    self._priority = None
                    self._hits = None
                    self._undefaction = None
                    self._undefhits = None
                    self._flags = None
                    self._precededefrules = None
                    self._activepolicy = None
                    self._boundto = None
                    self._gotopriorityexpression = None
                    self._labeltype = None
                    self._labelname = None
                    return
            Holder.__name__ = "cachepolicy_Holder"
            self.pyclass = Holder

    class cachepolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cachepolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cachepolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cachepolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cachepolicylabel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cachepolicylabel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cachepolicylabel_Def.schema
            TClist = [ZSI.TC.String(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="evaluates", aname="_evaluates", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="numpol", aname="_numpol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labelname2", aname="_labelname2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flowtype", aname="_flowtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._labelname = None
                    self._evaluates = None
                    self._numpol = None
                    self._hits = None
                    self._policyname = None
                    self._priority = None
                    self._gotopriorityexpression = None
                    self._labeltype = None
                    self._labelname2 = None
                    self._flowtype = None
                    return
            Holder.__name__ = "cachepolicylabel_Holder"
            self.pyclass = Holder

    class cachepolicylabelList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cachepolicylabelList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cachepolicylabel_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cachepolicylabel[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cacheglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cacheglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cacheglobal_Def.schema
            TClist = [ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="numpol", aname="_numpol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flowtype", aname="_flowtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="storeingroup", aname="_storeingroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="invalgroups", aname="_invalgroups", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="invalobjects", aname="_invalobjects", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="precededefrules", aname="_precededefrules", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._policyname = None
                    self._priority = None
                    self._gotopriorityexpression = None
                    self._labeltype = None
                    self._labelname = None
                    self._numpol = None
                    self._flowtype = None
                    self._rule = None
                    self._actioN = None
                    self._storeingroup = None
                    self._invalgroups = None
                    self._invalobjects = None
                    self._hits = None
                    self._flags = None
                    self._precededefrules = None
                    return
            Holder.__name__ = "cacheglobal_Holder"
            self.pyclass = Holder

    class cacheglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cacheglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cacheglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cacheglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cachecontentgroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cachecontentgroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cachecontentgroup_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="relexpiry", aname="_relexpiry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="relexpirymillisec", aname="_relexpirymillisec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="absexpiry", aname="_absexpiry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="absexpirygmt", aname="_absexpirygmt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="heurexpiryparam", aname="_heurexpiryparam", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weakposrelexpiry", aname="_weakposrelexpiry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weaknegrelexpiry", aname="_weaknegrelexpiry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="hitparams", aname="_hitparams", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="invalparams", aname="_invalparams", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ignoreparamvaluecase", aname="_ignoreparamvaluecase", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="matchcookies", aname="_matchcookies", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="invalrestrictedtohost", aname="_invalrestrictedtohost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="polleverytime", aname="_polleverytime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ignorereloadreq", aname="_ignorereloadreq", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="removecookies", aname="_removecookies", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="prefetch", aname="_prefetch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="prefetchperiod", aname="_prefetchperiod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="prefetchperiodmillisec", aname="_prefetchperiodmillisec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="prefetchcur", aname="_prefetchcur", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="prefetchmaxpending", aname="_prefetchmaxpending", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flashcache", aname="_flashcache", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="expireatlastbyte", aname="_expireatlastbyte", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="insertvia", aname="_insertvia", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="insertage", aname="_insertage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="insertetag", aname="_insertetag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachecontrol", aname="_cachecontrol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="quickabortsize", aname="_quickabortsize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="minressize", aname="_minressize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxressize", aname="_maxressize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memusage", aname="_memusage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memlimit", aname="_memlimit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ignorereqcachinghdrs", aname="_ignorereqcachinghdrs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="cachenon304hits", aname="_cachenon304hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="cache304hits", aname="_cache304hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachecells", aname="_cachecells", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachegroupincarnation", aname="_cachegroupincarnation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="minhits", aname="_minhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="alwaysevalpolicies", aname="_alwaysevalpolicies", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pinned", aname="_pinned", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lazydnsresolve", aname="_lazydnsresolve", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hitselector", aname="_hitselector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="invalselector", aname="_invalselector", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cachenuminvalpolicy", aname="_cachenuminvalpolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="markercells", aname="_markercells", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._flags = None
                    self._relexpiry = None
                    self._relexpirymillisec = None
                    self._absexpiry = None
                    self._absexpirygmt = None
                    self._heurexpiryparam = None
                    self._weakposrelexpiry = None
                    self._weaknegrelexpiry = None
                    self._hitparams = None
                    self._invalparams = None
                    self._ignoreparamvaluecase = None
                    self._matchcookies = None
                    self._invalrestrictedtohost = None
                    self._polleverytime = None
                    self._ignorereloadreq = None
                    self._removecookies = None
                    self._prefetch = None
                    self._prefetchperiod = None
                    self._prefetchperiodmillisec = None
                    self._prefetchcur = None
                    self._prefetchmaxpending = None
                    self._flashcache = None
                    self._expireatlastbyte = None
                    self._insertvia = None
                    self._insertage = None
                    self._insertetag = None
                    self._cachecontrol = None
                    self._quickabortsize = None
                    self._minressize = None
                    self._maxressize = None
                    self._memusage = None
                    self._memlimit = None
                    self._ignorereqcachinghdrs = None
                    self._cachenon304hits = None
                    self._cache304hits = None
                    self._cachecells = None
                    self._cachegroupincarnation = None
                    self._minhits = None
                    self._alwaysevalpolicies = None
                    self._pinned = None
                    self._lazydnsresolve = None
                    self._hitselector = None
                    self._invalselector = None
                    self._policyname = None
                    self._cachenuminvalpolicy = None
                    self._markercells = None
                    return
            Holder.__name__ = "cachecontentgroup_Holder"
            self.pyclass = Holder

    class cachecontentgroupList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cachecontentgroupList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cachecontentgroup_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cachecontentgroup[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cacheforwardproxy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cacheforwardproxy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cacheforwardproxy_Def.schema
            TClist = [ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipaddress = None
                    self._port = None
                    return
            Holder.__name__ = "cacheforwardproxy_Holder"
            self.pyclass = Holder

    class cacheforwardproxyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cacheforwardproxyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cacheforwardproxy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cacheforwardproxy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cacheselector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cacheselector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cacheselector_Def.schema
            TClist = [ZSI.TC.String(pname="selectorname", aname="_selectorname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._selectorname = None
                    self._flags = None
                    self._rule = None
                    return
            Holder.__name__ = "cacheselector_Holder"
            self.pyclass = Holder

    class cacheselectorList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cacheselectorList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cacheselector_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cacheselector[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cacheparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cacheparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cacheparameter_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="memlimit", aname="_memlimit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxmemlimit", aname="_maxmemlimit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="via", aname="_via", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="verifyusing", aname="_verifyusing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxpostlen", aname="_maxpostlen", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="prefetchcur", aname="_prefetchcur", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="prefetchmaxpending", aname="_prefetchmaxpending", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="enablebypass", aname="_enablebypass", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="undefaction", aname="_undefaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._memlimit = None
                    self._maxmemlimit = None
                    self._via = None
                    self._verifyusing = None
                    self._maxpostlen = None
                    self._prefetchcur = None
                    self._prefetchmaxpending = None
                    self._enablebypass = None
                    self._undefaction = None
                    return
            Holder.__name__ = "cacheparameter_Holder"
            self.pyclass = Holder

    class cacheparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cacheparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cacheparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cacheparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class clioutput_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "clioutput")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.clioutput_Def.schema
            TClist = [ZSI.TC.String(pname="command", aname="_command", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="output", aname="_output", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._command = None
                    self._output = None
                    return
            Holder.__name__ = "clioutput_Holder"
            self.pyclass = Holder

    class clioutputList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "clioutputList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.clioutput_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'clioutput[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cmpaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cmpaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cmpaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cmptype", aname="_cmptype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="deltatype", aname="_deltatype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._cmptype = None
                    self._deltatype = None
                    return
            Holder.__name__ = "cmpaction_Holder"
            self.pyclass = Holder

    class cmpactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cmpactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cmpaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cmpaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cmppolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cmppolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cmppolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqaction", aname="_reqaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="resaction", aname="_resaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="txbytes", aname="_txbytes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="rxbytes", aname="_rxbytes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="clientttlb", aname="_clientttlb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="clienttransactions", aname="_clienttransactions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="serverttlb", aname="_serverttlb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="servertransactions", aname="_servertransactions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._reqaction = None
                    self._resaction = None
                    self._hits = None
                    self._txbytes = None
                    self._rxbytes = None
                    self._clientttlb = None
                    self._clienttransactions = None
                    self._serverttlb = None
                    self._servertransactions = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "cmppolicy_Holder"
            self.pyclass = Holder

    class cmppolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cmppolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cmppolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cmppolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cmpglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cmpglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cmpglobal_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._priority = None
                    self._state = None
                    return
            Holder.__name__ = "cmpglobal_Holder"
            self.pyclass = Holder

    class cmpglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cmpglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cmpglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cmpglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cmpparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cmpparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cmpparameter_Def.schema
            TClist = [ZSI.TC.String(pname="cmplevel", aname="_cmplevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="quantumsize", aname="_quantumsize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servercmp", aname="_servercmp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="heurexpiry", aname="_heurexpiry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="heurexpirythres", aname="_heurexpirythres", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="heurexpiryhistwt", aname="_heurexpiryhistwt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="minressize", aname="_minressize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cmpbypasspct", aname="_cmpbypasspct", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cmplevel = None
                    self._quantumsize = None
                    self._servercmp = None
                    self._heurexpiry = None
                    self._heurexpirythres = None
                    self._heurexpiryhistwt = None
                    self._minressize = None
                    self._cmpbypasspct = None
                    return
            Holder.__name__ = "cmpparameter_Holder"
            self.pyclass = Holder

    class cmpparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cmpparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cmpparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cmpparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class crpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "crpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.crpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vstype", aname="_vstype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._rule = None
                    self._domain = None
                    self._vstype = None
                    return
            Holder.__name__ = "crpolicy_Holder"
            self.pyclass = Holder

    class crpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "crpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.crpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'crpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class crvserver_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "crvserver")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.crvserver_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress2", aname="_ipaddress2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachetype", aname="_cachetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirect", aname="_redirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="onpolicymatch", aname="_onpolicymatch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="precedence", aname="_precedence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirecturl", aname="_redirecturl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authentication", aname="_authentication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="homepage", aname="_homepage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachevserver", aname="_cachevserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="somethod", aname="_somethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sopersistence", aname="_sopersistence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sopersistencetimeout", aname="_sopersistencetimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sothreshold", aname="_sothreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reuse", aname="_reuse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="arp", aname="_arp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destinationvserver", aname="_destinationvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="via", aname="_via", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="downstateflush", aname="_downstateflush", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="crdpolicyname", aname="_crdpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="mttargetserver", aname="_mttargetserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="maptable", aname="_maptable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cswtargetserver", aname="_cswtargetserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cswpolicyname", aname="_cswpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="cswpriority", aname="_cswpriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._ipaddress = None
                    self._ipaddress2 = None
                    self._value = None
                    self._port = None
                    self._range = None
                    self._servicetype = None
                    self._type = None
                    self._state = None
                    self._status = None
                    self._cachetype = None
                    self._redirect = None
                    self._onpolicymatch = None
                    self._precedence = None
                    self._redirecturl = None
                    self._authentication = None
                    self._homepage = None
                    self._dnsvservername = None
                    self._domain = None
                    self._rule = None
                    self._policyname = None
                    self._servicename = None
                    self._weight = None
                    self._cachevserver = None
                    self._backupvserver = None
                    self._priority = None
                    self._clttimeout = None
                    self._somethod = None
                    self._sopersistence = None
                    self._sopersistencetimeout = None
                    self._sothreshold = None
                    self._reuse = None
                    self._arp = None
                    self._destinationvserver = None
                    self._via = None
                    self._downstateflush = None
                    self._crdpolicyname = None
                    self._mttargetserver = None
                    self._maptable = None
                    self._cswtargetserver = None
                    self._cswpolicyname = None
                    self._cswpriority = None
                    return
            Holder.__name__ = "crvserver_Holder"
            self.pyclass = Holder

    class crvserverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "crvserverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.crvserver_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'crvserver[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cspolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cspolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cspolicy_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vstype", aname="_vstype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="pihits", aname="_pihits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bindhits", aname="_bindhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="csdomain", aname="_csdomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cstarget", aname="_cstarget", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="cspriority", aname="_cspriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="cshits", aname="_cshits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="csinvokelabeltype", aname="_csinvokelabeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="csinvokelabelname", aname="_csinvokelabelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="crdomain", aname="_crdomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="crtarget", aname="_crtarget", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="gotocrnextpriorityexpression", aname="_gotocrnextpriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="crpriority", aname="_crpriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="crhits", aname="_crhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="crinvokelabeltype", aname="_crinvokelabeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="crinvokelabelname", aname="_crinvokelabelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cspolicylabel", aname="_cspolicylabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cspltarget", aname="_cspltarget", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="gotocsplnextpriorityexpression", aname="_gotocsplnextpriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="csplpriority", aname="_csplpriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="csplhits", aname="_csplhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="csplinvokelabeltype", aname="_csplinvokelabeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="csplinvokelabelname", aname="_csplinvokelabelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._url = None
                    self._rule = None
                    self._domain = None
                    self._vstype = None
                    self._hits = None
                    self._pihits = None
                    self._bindhits = None
                    self._labelname = None
                    self._labeltype = None
                    self._target = None
                    self._priority = None
                    self._csdomain = None
                    self._cstarget = None
                    self._gotopriorityexpression = None
                    self._cspriority = None
                    self._cshits = None
                    self._csinvokelabeltype = None
                    self._csinvokelabelname = None
                    self._crdomain = None
                    self._crtarget = None
                    self._gotocrnextpriorityexpression = None
                    self._crpriority = None
                    self._crhits = None
                    self._crinvokelabeltype = None
                    self._crinvokelabelname = None
                    self._cspolicylabel = None
                    self._cspltarget = None
                    self._gotocsplnextpriorityexpression = None
                    self._csplpriority = None
                    self._csplhits = None
                    self._csplinvokelabeltype = None
                    self._csplinvokelabelname = None
                    return
            Holder.__name__ = "cspolicy_Holder"
            self.pyclass = Holder

    class cspolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cspolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cspolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cspolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class cspolicylabel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "cspolicylabel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.cspolicylabel_Def.schema
            TClist = [ZSI.TC.String(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cspolicylabeltype", aname="_cspolicylabeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="numpol", aname="_numpol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="targetvserver", aname="_targetvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labelname2", aname="_labelname2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._labelname = None
                    self._cspolicylabeltype = None
                    self._numpol = None
                    self._hits = None
                    self._policyname = None
                    self._priority = None
                    self._targetvserver = None
                    self._gotopriorityexpression = None
                    self._labeltype = None
                    self._labelname2 = None
                    return
            Holder.__name__ = "cspolicylabel_Holder"
            self.pyclass = Holder

    class cspolicylabelList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "cspolicylabelList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.cspolicylabel_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'cspolicylabel[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class csvserver_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "csvserver")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.csvserver_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="insertvserveripport", aname="_insertvserveripport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vipheader", aname="_vipheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress2", aname="_ipaddress2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ippattern", aname="_ippattern", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipmask", aname="_ipmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="stateupdate", aname="_stateupdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachetype", aname="_cachetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirect", aname="_redirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="precedence", aname="_precedence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirecturl", aname="_redirecturl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authentication", aname="_authentication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="casesensitive", aname="_casesensitive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="homepage", aname="_homepage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachevserver", aname="_cachevserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="somethod", aname="_somethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sopersistence", aname="_sopersistence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sopersistencetimeout", aname="_sopersistencetimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sothreshold", aname="_sothreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cacheable", aname="_cacheable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirectportrewrite", aname="_redirectportrewrite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="downstateflush", aname="_downstateflush", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="disableprimaryondown", aname="_disableprimaryondown", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type2", aname="_type2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","booleanList",lazy=False)(pname="invoke", aname="_invoke", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gt2gb", aname="_gt2gb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="statechangetimesec", aname="_statechangetimesec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="statechangetimemsec", aname="_statechangetimemsec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tickssincelaststatechange", aname="_tickssincelaststatechange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rtspnat", aname="_rtspnat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authenticationhost", aname="_authenticationhost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="push", aname="_push", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pushvserver", aname="_pushvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pushlabel", aname="_pushlabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pushmulticlients", aname="_pushmulticlients", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cswtargetserver", aname="_cswtargetserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rwpolicyname", aname="_rwpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="rwpolicypriority", aname="_rwpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rwpolicygotoprioexpression", aname="_rwpolicygotoprioexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rwpolicybindpoint", aname="_rwpolicybindpoint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","booleanList",lazy=False)(pname="rwinvoke", aname="_rwinvoke", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rwpolicyinvokelabeltype", aname="_rwpolicyinvokelabeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rwpolicyinvokelabelname", aname="_rwpolicyinvokelabelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cachepolicyname", aname="_cachepolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="cachepolicypriority", aname="_cachepolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cachepolicygotoprioexpression", aname="_cachepolicygotoprioexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cachepolicybindpoint", aname="_cachepolicybindpoint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","booleanList",lazy=False)(pname="cacheinvoke", aname="_cacheinvoke", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cachepolicyinvokelabeltype", aname="_cachepolicyinvokelabeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cachepolicyinvokelabelname", aname="_cachepolicyinvokelabelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rsppolicyname", aname="_rsppolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="rsppolicypriority", aname="_rsppolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rsppolicygotoprioexpression", aname="_rsppolicygotoprioexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","booleanList",lazy=False)(pname="rspinvoke", aname="_rspinvoke", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rsppolicyinvokelabeltype", aname="_rsppolicyinvokelabeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rsppolicyinvokelabelname", aname="_rsppolicyinvokelabelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._insertvserveripport = None
                    self._vipheader = None
                    self._ipaddress = None
                    self._ipaddress2 = None
                    self._ippattern = None
                    self._ipmask = None
                    self._value = None
                    self._port = None
                    self._range = None
                    self._servicetype = None
                    self._type = None
                    self._state = None
                    self._stateupdate = None
                    self._status = None
                    self._cachetype = None
                    self._redirect = None
                    self._precedence = None
                    self._redirecturl = None
                    self._authentication = None
                    self._casesensitive = None
                    self._homepage = None
                    self._dnsvservername = None
                    self._domain = None
                    self._rule = None
                    self._policyname = None
                    self._hits = None
                    self._servicename = None
                    self._weight = None
                    self._cachevserver = None
                    self._backupvserver = None
                    self._priority = None
                    self._clttimeout = None
                    self._somethod = None
                    self._sopersistence = None
                    self._sopersistencetimeout = None
                    self._sothreshold = None
                    self._cacheable = None
                    self._url = None
                    self._gotopriorityexpression = None
                    self._redirectportrewrite = None
                    self._downstateflush = None
                    self._disableprimaryondown = None
                    self._type2 = None
                    self._invoke = None
                    self._labeltype = None
                    self._labelname = None
                    self._gt2gb = None
                    self._statechangetimesec = None
                    self._statechangetimemsec = None
                    self._tickssincelaststatechange = None
                    self._rtspnat = None
                    self._authenticationhost = None
                    self._push = None
                    self._pushvserver = None
                    self._pushlabel = None
                    self._pushmulticlients = None
                    self._cswtargetserver = None
                    self._rwpolicyname = None
                    self._rwpolicypriority = None
                    self._rwpolicygotoprioexpression = None
                    self._rwpolicybindpoint = None
                    self._rwinvoke = None
                    self._rwpolicyinvokelabeltype = None
                    self._rwpolicyinvokelabelname = None
                    self._cachepolicyname = None
                    self._cachepolicypriority = None
                    self._cachepolicygotoprioexpression = None
                    self._cachepolicybindpoint = None
                    self._cacheinvoke = None
                    self._cachepolicyinvokelabeltype = None
                    self._cachepolicyinvokelabelname = None
                    self._rsppolicyname = None
                    self._rsppolicypriority = None
                    self._rsppolicygotoprioexpression = None
                    self._rspinvoke = None
                    self._rsppolicyinvokelabeltype = None
                    self._rsppolicyinvokelabelname = None
                    return
            Holder.__name__ = "csvserver_Holder"
            self.pyclass = Holder

    class csvserverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "csvserverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.csvserver_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'csvserver[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnsaaaarec_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnsaaaarec")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnsaaaarec_Def.schema
            TClist = [ZSI.TC.String(pname="hostname", aname="_hostname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipv6address", aname="_ipv6address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authtype", aname="_authtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hostname = None
                    self._type = None
                    self._ipv6address = None
                    self._ttl = None
                    self._authtype = None
                    return
            Holder.__name__ = "dnsaaaarec_Holder"
            self.pyclass = Holder

    class dnsaaaarecList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnsaaaarecList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnsaaaarec_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnsaaaarec[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnsaddrec_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnsaddrec")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnsaddrec_Def.schema
            TClist = [ZSI.TC.String(pname="hostname", aname="_hostname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vservername", aname="_vservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authtype", aname="_authtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hostname = None
                    self._type = None
                    self._ipaddress = None
                    self._ttl = None
                    self._vservername = None
                    self._authtype = None
                    return
            Holder.__name__ = "dnsaddrec_Holder"
            self.pyclass = Holder

    class dnsaddrecList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnsaddrecList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnsaddrec_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnsaddrec[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnscnamerec_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnscnamerec")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnscnamerec_Def.schema
            TClist = [ZSI.TC.String(pname="aliasname", aname="_aliasname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="canonicalname", aname="_canonicalname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aliasname = None
                    self._type = None
                    self._canonicalname = None
                    self._ttl = None
                    return
            Holder.__name__ = "dnscnamerec_Holder"
            self.pyclass = Holder

    class dnscnamerecList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnscnamerecList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnscnamerec_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnscnamerec[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnsmxrec_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnsmxrec")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnsmxrec_Def.schema
            TClist = [ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mx", aname="_mx", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="pref", aname="_pref", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._domain = None
                    self._type = None
                    self._mx = None
                    self._pref = None
                    self._ttl = None
                    return
            Holder.__name__ = "dnsmxrec_Holder"
            self.pyclass = Holder

    class dnsmxrecList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnsmxrecList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnsmxrec_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnsmxrec[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnsnsrec_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnsnsrec")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnsnsrec_Def.schema
            TClist = [ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nameserver", aname="_nameserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._domain = None
                    self._type = None
                    self._nameserver = None
                    self._ttl = None
                    return
            Holder.__name__ = "dnsnsrec_Holder"
            self.pyclass = Holder

    class dnsnsrecList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnsnsrecList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnsnsrec_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnsnsrec[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnsptrrec_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnsptrrec")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnsptrrec_Def.schema
            TClist = [ZSI.TC.String(pname="reversedomain", aname="_reversedomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authtype", aname="_authtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._reversedomain = None
                    self._type = None
                    self._domain = None
                    self._ttl = None
                    self._authtype = None
                    return
            Holder.__name__ = "dnsptrrec_Holder"
            self.pyclass = Holder

    class dnsptrrecList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnsptrrecList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnsptrrec_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnsptrrec[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnssrvrec_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnssrvrec")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnssrvrec_Def.schema
            TClist = [ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._domain = None
                    self._target = None
                    self._type = None
                    self._priority = None
                    self._weight = None
                    self._port = None
                    self._ttl = None
                    return
            Holder.__name__ = "dnssrvrec_Holder"
            self.pyclass = Holder

    class dnssrvrecList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnssrvrecList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnssrvrec_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnssrvrec[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnsparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnsparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnsparameter_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="retries", aname="_retries", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="minttl", aname="_minttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxttl", aname="_maxttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="namelookuppriority", aname="_namelookuppriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cacherecords", aname="_cacherecords", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="recursion", aname="_recursion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._retries = None
                    self._minttl = None
                    self._maxttl = None
                    self._namelookuppriority = None
                    self._cacherecords = None
                    self._recursion = None
                    return
            Holder.__name__ = "dnsparameter_Holder"
            self.pyclass = Holder

    class dnsparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnsparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnsparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnsparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnssoarec_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnssoarec")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnssoarec_Def.schema
            TClist = [ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="originserver", aname="_originserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="contact", aname="_contact", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="serial", aname="_serial", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="refresh", aname="_refresh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="retry", aname="_retry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="expire", aname="_expire", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="minimum", aname="_minimum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._domain = None
                    self._type = None
                    self._originserver = None
                    self._contact = None
                    self._serial = None
                    self._refresh = None
                    self._retry = None
                    self._expire = None
                    self._minimum = None
                    self._ttl = None
                    return
            Holder.__name__ = "dnssoarec_Holder"
            self.pyclass = Holder

    class dnssoarecList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnssoarecList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnssoarec_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnssoarec[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnssuffix_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnssuffix")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnssuffix_Def.schema
            TClist = [ZSI.TC.String(pname="dnssuffix", aname="_dnssuffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dnssuffix = None
                    return
            Holder.__name__ = "dnssuffix_Holder"
            self.pyclass = Holder

    class dnssuffixList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnssuffixList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnssuffix_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnssuffix[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnsnameserver_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnsnameserver")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnsnameserver_Def.schema
            TClist = [ZSI.TC.String(pname="ip", aname="_ip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="local", aname="_local", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ip = None
                    self._dnsvservername = None
                    self._servicename = None
                    self._port = None
                    self._state = None
                    self._local = None
                    return
            Holder.__name__ = "dnsnameserver_Holder"
            self.pyclass = Holder

    class dnsnameserverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnsnameserverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnsnameserver_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnsnameserver[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnsview_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnsview")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnsview_Def.schema
            TClist = [ZSI.TC.String(pname="viewname", aname="_viewname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._viewname = None
                    self._servicename = None
                    self._ipaddress = None
                    self._flags = None
                    return
            Holder.__name__ = "dnsview_Holder"
            self.pyclass = Holder

    class dnsviewList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnsviewList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnsview_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnsview[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnspolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnspolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnspolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="viewname", aname="_viewname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="preferredlocation", aname="_preferredlocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="drop", aname="_drop", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._viewname = None
                    self._preferredlocation = None
                    self._hits = None
                    self._drop = None
                    return
            Holder.__name__ = "dnspolicy_Holder"
            self.pyclass = Holder

    class dnspolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnspolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnspolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnspolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dnsglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dnsglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dnsglobal_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="upgraded", aname="_upgraded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._priority = None
                    self._gotopriorityexpression = None
                    self._upgraded = None
                    return
            Holder.__name__ = "dnsglobal_Holder"
            self.pyclass = Holder

    class dnsglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dnsglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dnsglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dnsglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class dospolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "dospolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dospolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="qdepth", aname="_qdepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cltdetectrate", aname="_cltdetectrate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._qdepth = None
                    self._cltdetectrate = None
                    return
            Holder.__name__ = "dospolicy_Holder"
            self.pyclass = Holder

    class dospolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "dospolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.dospolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'dospolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class filterprebodyinjection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "filterprebodyinjection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.filterprebodyinjection_Def.schema
            TClist = [ZSI.TC.String(pname="prebody", aname="_prebody", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="systemiid", aname="_systemiid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._prebody = None
                    self._systemiid = None
                    return
            Holder.__name__ = "filterprebodyinjection_Holder"
            self.pyclass = Holder

    class filterprebodyinjectionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "filterprebodyinjectionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.filterprebodyinjection_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'filterprebodyinjection[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class filterpostbodyinjection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "filterpostbodyinjection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.filterpostbodyinjection_Def.schema
            TClist = [ZSI.TC.String(pname="postbody", aname="_postbody", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="systemiid", aname="_systemiid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._postbody = None
                    self._systemiid = None
                    return
            Holder.__name__ = "filterpostbodyinjection_Holder"
            self.pyclass = Holder

    class filterpostbodyinjectionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "filterpostbodyinjectionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.filterpostbodyinjection_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'filterpostbodyinjection[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class filteraction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "filteraction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.filteraction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qual", aname="_qual", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="respcode", aname="_respcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="page", aname="_page", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._qual = None
                    self._servicename = None
                    self._value = None
                    self._respcode = None
                    self._page = None
                    return
            Holder.__name__ = "filteraction_Holder"
            self.pyclass = Holder

    class filteractionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "filteractionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.filteraction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'filteraction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class filterhtmlinjectionvariable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "filterhtmlinjectionvariable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.filterhtmlinjectionvariable_Def.schema
            TClist = [ZSI.TC.String(pname="variable", aname="_variable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._variable = None
                    self._value = None
                    self._type = None
                    return
            Holder.__name__ = "filterhtmlinjectionvariable_Holder"
            self.pyclass = Holder

    class filterhtmlinjectionvariableList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "filterhtmlinjectionvariableList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.filterhtmlinjectionvariable_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'filterhtmlinjectionvariable[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class filterhtmlinjectionparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "filterhtmlinjectionparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.filterhtmlinjectionparameter_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rate", aname="_rate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="frequency", aname="_frequency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rate = None
                    self._frequency = None
                    return
            Holder.__name__ = "filterhtmlinjectionparameter_Holder"
            self.pyclass = Holder

    class filterhtmlinjectionparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "filterhtmlinjectionparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.filterhtmlinjectionparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'filterhtmlinjectionparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class filterpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "filterpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.filterpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqaction", aname="_reqaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="resaction", aname="_resaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._reqaction = None
                    self._resaction = None
                    self._hits = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "filterpolicy_Holder"
            self.pyclass = Holder

    class filterpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "filterpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.filterpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'filterpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class filterglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "filterglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.filterglobal_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._priority = None
                    self._state = None
                    return
            Holder.__name__ = "filterglobal_Holder"
            self.pyclass = Holder

    class filterglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "filterglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.filterglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'filterglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class gslbsite_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslbsite")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gslbsite_Def.schema
            TClist = [ZSI.TC.String(pname="sitename", aname="_sitename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sitetype", aname="_sitetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="siteipaddress", aname="_siteipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publicip", aname="_publicip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metricexchange", aname="_metricexchange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nwmetricexchange", aname="_nwmetricexchange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionexchange", aname="_sessionexchange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="triggermonitor", aname="_triggermonitor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parentsite", aname="_parentsite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cnameentry", aname="_cnameentry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sitename = None
                    self._sitetype = None
                    self._siteipaddress = None
                    self._publicip = None
                    self._metricexchange = None
                    self._servicename = None
                    self._ipaddress = None
                    self._port = None
                    self._state = None
                    self._status = None
                    self._servicetype = None
                    self._nwmetricexchange = None
                    self._sessionexchange = None
                    self._triggermonitor = None
                    self._parentsite = None
                    self._cnameentry = None
                    return
            Holder.__name__ = "gslbsite_Holder"
            self.pyclass = Holder

    class gslbsiteList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "gslbsiteList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.gslbsite_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'gslbsite[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class gslbservice_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslbservice")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gslbservice_Def.schema
            TClist = [ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gslb", aname="_gslb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servername", aname="_servername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publicip", aname="_publicip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="publicport", aname="_publicport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxclient", aname="_maxclient", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxaaausers", aname="_maxaaausers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sitename", aname="_sitename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="svrstate", aname="_svrstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="svreffgslbstate", aname="_svreffgslbstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="gslbthreshold", aname="_gslbthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="gslbsvcstats", aname="_gslbsvcstats", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="monitorname", aname="_monitorname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="monstate", aname="_monstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cip", aname="_cip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipheader", aname="_cipheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sitepersistence", aname="_sitepersistence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="siteprefix", aname="_siteprefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="svrtimeout", aname="_svrtimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="totalfailedprobes", aname="_totalfailedprobes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="preferredlocation", aname="_preferredlocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxbandwidth", aname="_maxbandwidth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="downstateflush", aname="_downstateflush", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cnameentry", aname="_cnameentry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="viewname", aname="_viewname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="viewip", aname="_viewip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="monthreshold", aname="_monthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="failedprobes", aname="_failedprobes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatcode", aname="_monstatcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam1", aname="_monstatparam1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam2", aname="_monstatparam2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam3", aname="_monstatparam3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="responsetime", aname="_responsetime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="monstate2", aname="_monstate2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._servicename = None
                    self._gslb = None
                    self._ipaddress = None
                    self._servername = None
                    self._servicetype = None
                    self._port = None
                    self._publicip = None
                    self._publicport = None
                    self._maxclient = None
                    self._maxaaausers = None
                    self._sitename = None
                    self._svrstate = None
                    self._svreffgslbstate = None
                    self._gslbthreshold = None
                    self._gslbsvcstats = None
                    self._state = None
                    self._monitorname = None
                    self._monstate = None
                    self._cip = None
                    self._cipheader = None
                    self._sitepersistence = None
                    self._siteprefix = None
                    self._clttimeout = None
                    self._svrtimeout = None
                    self._totalfailedprobes = None
                    self._preferredlocation = None
                    self._maxbandwidth = None
                    self._downstateflush = None
                    self._cnameentry = None
                    self._viewname = None
                    self._viewip = None
                    self._weight = None
                    self._monthreshold = None
                    self._failedprobes = None
                    self._monstatcode = None
                    self._monstatparam1 = None
                    self._monstatparam2 = None
                    self._monstatparam3 = None
                    self._responsetime = None
                    self._monstate2 = None
                    return
            Holder.__name__ = "gslbservice_Holder"
            self.pyclass = Holder

    class gslbserviceList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "gslbserviceList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.gslbservice_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'gslbservice[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class gslbvserver_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslbvserver")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gslbvserver_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistencetype", aname="_persistencetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="persistenceid", aname="_persistenceid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lbmethod", aname="_lbmethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="backuplbmethod", aname="_backuplbmethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tolerance", aname="_tolerance", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistmask", aname="_persistmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="domainname", aname="_domainname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="backupip", aname="_backupip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cookiedomain", aname="_cookiedomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="cookietimeout", aname="_cookietimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="sitedomainttl", aname="_sitedomainttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="lbrrreason", aname="_lbrrreason", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="preferredlocation", aname="_preferredlocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="backupsessiontimeout", aname="_backupsessiontimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="edr", aname="_edr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mir", aname="_mir", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="disableprimaryondown", aname="_disableprimaryondown", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dynamicweight", aname="_dynamicweight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="iscname", aname="_iscname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cumulativeweight", aname="_cumulativeweight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="dynamicconfwt", aname="_dynamicconfwt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="thresholdvalue", aname="_thresholdvalue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sitepersistence", aname="_sitepersistence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="svreffgslbstate", aname="_svreffgslbstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="gslbthreshold", aname="_gslbthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="considereffectivestate", aname="_considereffectivestate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cnameentry", aname="_cnameentry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="totalservices", aname="_totalservices", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activeservices", aname="_activeservices", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="statechangetimesec", aname="_statechangetimesec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="statechangetimemsec", aname="_statechangetimemsec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tickssincelaststatechange", aname="_tickssincelaststatechange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._servicetype = None
                    self._persistencetype = None
                    self._persistenceid = None
                    self._lbmethod = None
                    self._backuplbmethod = None
                    self._tolerance = None
                    self._timeout = None
                    self._state = None
                    self._netmask = None
                    self._persistmask = None
                    self._servicename = None
                    self._weight = None
                    self._domainname = None
                    self._ttl = None
                    self._backupip = None
                    self._cookiedomain = None
                    self._cookietimeout = None
                    self._sitedomainttl = None
                    self._ipaddress = None
                    self._port = None
                    self._status = None
                    self._lbrrreason = None
                    self._preferredlocation = None
                    self._backupvserver = None
                    self._backupsessiontimeout = None
                    self._edr = None
                    self._mir = None
                    self._disableprimaryondown = None
                    self._dynamicweight = None
                    self._iscname = None
                    self._cumulativeweight = None
                    self._dynamicconfwt = None
                    self._thresholdvalue = None
                    self._sitepersistence = None
                    self._svreffgslbstate = None
                    self._gslbthreshold = None
                    self._considereffectivestate = None
                    self._cnameentry = None
                    self._totalservices = None
                    self._activeservices = None
                    self._statechangetimesec = None
                    self._statechangetimemsec = None
                    self._tickssincelaststatechange = None
                    return
            Holder.__name__ = "gslbvserver_Holder"
            self.pyclass = Holder

    class gslbvserverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "gslbvserverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.gslbvserver_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'gslbvserver[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class gslbparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslbparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gslbparameter_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ldnsentrytimeout", aname="_ldnsentrytimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="rtttolerance", aname="_rtttolerance", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ldnsmask", aname="_ldnsmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._flags = None
                    self._ldnsentrytimeout = None
                    self._rtttolerance = None
                    self._ldnsmask = None
                    return
            Holder.__name__ = "gslbparameter_Holder"
            self.pyclass = Holder

    class gslbparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "gslbparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.gslbparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'gslbparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class gslbpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslbpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gslbpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqrule", aname="_reqrule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._reqrule = None
                    self._actioN = None
                    self._hits = None
                    return
            Holder.__name__ = "gslbpolicy_Holder"
            self.pyclass = Holder

    class gslbpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "gslbpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.gslbpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'gslbpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class gslbaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslbaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gslbaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="preferredlocation", aname="_preferredlocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._preferredlocation = None
                    return
            Holder.__name__ = "gslbaction_Holder"
            self.pyclass = Holder

    class gslbactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "gslbactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.gslbaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'gslbaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class gslbldnsentries_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gslbldnsentries")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gslbldnsentries_Def.schema
            TClist = [ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipaddress = None
                    self._ttl = None
                    self._name = None
                    return
            Holder.__name__ = "gslbldnsentries_Holder"
            self.pyclass = Holder

    class gslbldnsentriesList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "gslbldnsentriesList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.gslbldnsentries_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'gslbldnsentries[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class hanode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "hanode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.hanode_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hastatus", aname="_hastatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hasync", aname="_hasync", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="haprop", aname="_haprop", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="enaifaces", aname="_enaifaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="disifaces", aname="_disifaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hamonifaces", aname="_hamonifaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pfifaces", aname="_pfifaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ifaces", aname="_ifaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="network", aname="_network", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="inc", aname="_inc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssl2", aname="_ssl2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hellointerval", aname="_hellointerval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="deadinterval", aname="_deadinterval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="masterstatetime", aname="_masterstatetime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="criticaliinterface", aname="_criticaliinterface", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="fisname", aname="_fisname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="membername", aname="_membername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="routemonnetwork", aname="_routemonnetwork", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="routemonnetmask", aname="_routemonnetmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._name = None
                    self._ipaddress = None
                    self._flags = None
                    self._hastatus = None
                    self._state = None
                    self._hasync = None
                    self._haprop = None
                    self._enaifaces = None
                    self._disifaces = None
                    self._hamonifaces = None
                    self._pfifaces = None
                    self._ifaces = None
                    self._network = None
                    self._netmask = None
                    self._inc = None
                    self._ssl2 = None
                    self._hellointerval = None
                    self._deadinterval = None
                    self._masterstatetime = None
                    self._criticaliinterface = None
                    self._fisname = None
                    self._membername = None
                    self._routemonnetwork = None
                    self._routemonnetmask = None
                    return
            Holder.__name__ = "hanode_Holder"
            self.pyclass = Holder

    class hanodeList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "hanodeList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.hanode_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'hanode[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class lbmonbindings_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lbmonbindings")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lbmonbindings_Def.schema
            TClist = [ZSI.TC.String(pname="monitorname", aname="_monitorname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="monstate", aname="_monstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="svrstate", aname="_svrstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._monitorname = None
                    self._type = None
                    self._state = None
                    self._monstate = None
                    self._ipaddress = None
                    self._port = None
                    self._servicename = None
                    self._servicetype = None
                    self._svrstate = None
                    return
            Holder.__name__ = "lbmonbindings_Holder"
            self.pyclass = Holder

    class lbmonbindingsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "lbmonbindingsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.lbmonbindings_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'lbmonbindings[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class lbpersistentsessions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lbpersistentsessions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lbpersistentsessions_Def.schema
            TClist = [ZSI.TC.String(pname="vserver", aname="_vserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcip", aname="_srcip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcipv6", aname="_srcipv6", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destip", aname="_destip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destipv6", aname="_destipv6", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vservername", aname="_vservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="referencecount", aname="_referencecount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sipcallid", aname="_sipcallid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistenceparam", aname="_persistenceparam", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._vserver = None
                    self._type = None
                    self._srcip = None
                    self._srcipv6 = None
                    self._destip = None
                    self._destipv6 = None
                    self._flags = None
                    self._destport = None
                    self._vservername = None
                    self._timeout = None
                    self._referencecount = None
                    self._sipcallid = None
                    self._persistenceparam = None
                    return
            Holder.__name__ = "lbpersistentsessions_Holder"
            self.pyclass = Holder

    class lbpersistentsessionsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "lbpersistentsessionsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.lbpersistentsessions_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'lbpersistentsessions[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class lbgroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lbgroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lbgroup_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="vservername", aname="_vservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistencetype", aname="_persistencetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistencebackup", aname="_persistencebackup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="backuppersistencetimeout", aname="_backuppersistencetimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistmask", aname="_persistmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cookiedomain", aname="_cookiedomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._vservername = None
                    self._persistencetype = None
                    self._persistencebackup = None
                    self._backuppersistencetimeout = None
                    self._persistmask = None
                    self._cookiedomain = None
                    self._timeout = None
                    return
            Holder.__name__ = "lbgroup_Holder"
            self.pyclass = Holder

    class lbgroupList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "lbgroupList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.lbgroup_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'lbgroup[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class lbmonitor_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lbmonitor")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lbmonitor_Def.schema
            TClist = [ZSI.TC.String(pname="monitorname", aname="_monitorname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="interval", aname="_interval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="units", aname="_units", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="resptimeout", aname="_resptimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="resptimeoutthresh", aname="_resptimeoutthresh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="units2", aname="_units2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="retries", aname="_retries", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="failureretries", aname="_failureretries", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="alertretries", aname="_alertretries", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="successretries", aname="_successretries", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="downtime", aname="_downtime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="units3", aname="_units3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destip", aname="_destip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reverse", aname="_reverse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="transparent", aname="_transparent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="iptunnel", aname="_iptunnel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tos", aname="_tos", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tosid", aname="_tosid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="secure", aname="_secure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="respcode", aname="_respcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="httprequest", aname="_httprequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rtsprequest", aname="_rtsprequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="send", aname="_send", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="recv", aname="_recv", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="query", aname="_query", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="querytype", aname="_querytype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="secondarypassword", aname="_secondarypassword", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logonpointname", aname="_logonpointname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lasversion", aname="_lasversion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radkey", aname="_radkey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radnasid", aname="_radnasid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="radnasip", aname="_radnasip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lrtM", aname="_lrtM", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="lrtmconf", aname="_lrtmconf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="deviation", aname="_deviation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="units4", aname="_units4", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dynamicresponsetimeout", aname="_dynamicresponsetimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dynamicinterval", aname="_dynamicinterval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="scriptname", aname="_scriptname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="scriptargs", aname="_scriptargs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dispatcherip", aname="_dispatcherip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="dispatcherport", aname="_dispatcherport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sipuri", aname="_sipuri", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sipmethod", aname="_sipmethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="maxforwards", aname="_maxforwards", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sipreguri", aname="_sipreguri", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customheaders", aname="_customheaders", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="group", aname="_group", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filename", aname="_filename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="basedn", aname="_basedn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="binddn", aname="_binddn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filter", aname="_filter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="attribute", aname="_attribute", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="database", aname="_database", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sqlquery", aname="_sqlquery", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snmpoid", aname="_snmpoid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snmpcommunity", aname="_snmpcommunity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snmpthreshold", aname="_snmpthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snmpversion", aname="_snmpversion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metric", aname="_metric", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metrictable", aname="_metrictable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="metricthreshold", aname="_metricthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="metricweight", aname="_metricweight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="application", aname="_application", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sitepath", aname="_sitepath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="units5", aname="_units5", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._monitorname = None
                    self._type = None
                    self._interval = None
                    self._units = None
                    self._resptimeout = None
                    self._resptimeoutthresh = None
                    self._units2 = None
                    self._retries = None
                    self._failureretries = None
                    self._alertretries = None
                    self._successretries = None
                    self._downtime = None
                    self._units3 = None
                    self._destip = None
                    self._destport = None
                    self._state = None
                    self._reverse = None
                    self._transparent = None
                    self._iptunnel = None
                    self._tos = None
                    self._tosid = None
                    self._secure = None
                    self._actioN = None
                    self._respcode = None
                    self._httprequest = None
                    self._rtsprequest = None
                    self._send = None
                    self._recv = None
                    self._query = None
                    self._querytype = None
                    self._username = None
                    self._password = None
                    self._secondarypassword = None
                    self._logonpointname = None
                    self._lasversion = None
                    self._radkey = None
                    self._radnasid = None
                    self._radnasip = None
                    self._lrtM = None
                    self._lrtmconf = None
                    self._deviation = None
                    self._units4 = None
                    self._dynamicresponsetimeout = None
                    self._dynamicinterval = None
                    self._scriptname = None
                    self._scriptargs = None
                    self._dispatcherip = None
                    self._dispatcherport = None
                    self._sipuri = None
                    self._sipmethod = None
                    self._maxforwards = None
                    self._sipreguri = None
                    self._customheaders = None
                    self._ipaddress = None
                    self._group = None
                    self._filename = None
                    self._basedn = None
                    self._binddn = None
                    self._filter = None
                    self._attribute = None
                    self._database = None
                    self._sqlquery = None
                    self._snmpoid = None
                    self._snmpcommunity = None
                    self._snmpthreshold = None
                    self._snmpversion = None
                    self._metric = None
                    self._metrictable = None
                    self._metricthreshold = None
                    self._metricweight = None
                    self._flags = None
                    self._application = None
                    self._sitepath = None
                    self._units5 = None
                    return
            Holder.__name__ = "lbmonitor_Holder"
            self.pyclass = Holder

    class lbmonitorList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "lbmonitorList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.lbmonitor_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'lbmonitor[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class lbroute_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lbroute")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lbroute_Def.schema
            TClist = [ZSI.TC.String(pname="network", aname="_network", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gatewayname", aname="_gatewayname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._network = None
                    self._netmask = None
                    self._gatewayname = None
                    self._flags = None
                    return
            Holder.__name__ = "lbroute_Holder"
            self.pyclass = Holder

    class lbrouteList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "lbrouteList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.lbroute_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'lbroute[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class lbvserver_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lbvserver")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lbvserver_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="insertvserveripport", aname="_insertvserveripport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vipheader", aname="_vipheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress2", aname="_ipaddress2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ippattern", aname="_ippattern", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipmask", aname="_ipmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipmapping", aname="_ipmapping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="effectivestate", aname="_effectivestate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="lbrrreason", aname="_lbrrreason", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cachetype", aname="_cachetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirect", aname="_redirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="precedence", aname="_precedence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirecturl", aname="_redirecturl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authentication", aname="_authentication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="homepage", aname="_homepage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="dynamicweight", aname="_dynamicweight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachevserver", aname="_cachevserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="somethod", aname="_somethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sopersistence", aname="_sopersistence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sopersistencetimeout", aname="_sopersistencetimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sothreshold", aname="_sothreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lbmethod", aname="_lbmethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hashlength", aname="_hashlength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="dataoffset", aname="_dataoffset", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="health", aname="_health", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="datalength", aname="_datalength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="resrule", aname="_resrule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ruletype", aname="_ruletype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="groupname", aname="_groupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="m", aname="_m", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tosid", aname="_tosid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistencetype", aname="_persistencetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cookiedomain", aname="_cookiedomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistmask", aname="_persistmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistencebackup", aname="_persistencebackup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="backuppersistencetimeout", aname="_backuppersistencetimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cacheable", aname="_cacheable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pq", aname="_pq", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sc", aname="_sc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rtspnat", aname="_rtspnat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionless", aname="_sessionless", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="map", aname="_map", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="connfailover", aname="_connfailover", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirectportrewrite", aname="_redirectportrewrite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="downstateflush", aname="_downstateflush", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="disableprimaryondown", aname="_disableprimaryondown", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gt2gb", aname="_gt2gb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="thresholdvalue", aname="_thresholdvalue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type2", aname="_type2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="invoke", aname="_invoke", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cookieipport", aname="_cookieipport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="vserverid", aname="_vserverid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="version", aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="totalservices", aname="_totalservices", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activeservices", aname="_activeservices", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="statechangetimesec", aname="_statechangetimesec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="statechangetimemsec", aname="_statechangetimemsec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tickssincelaststatechange", aname="_tickssincelaststatechange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authenticationhost", aname="_authenticationhost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="push", aname="_push", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pushvserver", aname="_pushvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pushlabel", aname="_pushlabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pushmulticlients", aname="_pushmulticlients", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="svcipaddress", aname="_svcipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="svcport", aname="_svcport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="svctype", aname="_svctype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="svcstate", aname="_svcstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="servicegroupname", aname="_servicegroupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="scpolicyname", aname="_scpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="scpolicypriority", aname="_scpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="dospolicyname", aname="_dospolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="dospolicypriority", aname="_dospolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rwpolicyname", aname="_rwpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="rwpolicypriority", aname="_rwpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rwpolicygotoprioexpression", aname="_rwpolicygotoprioexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rwpolicybindpoint", aname="_rwpolicybindpoint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","booleanList",lazy=False)(pname="rwinvoke", aname="_rwinvoke", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rwpolicyinvokelabeltype", aname="_rwpolicyinvokelabeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rwpolicyinvokelabelname", aname="_rwpolicyinvokelabelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cachepolicyname", aname="_cachepolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="cachepolicypriority", aname="_cachepolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cachepolicygotoprioexpression", aname="_cachepolicygotoprioexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cachepolicybindpoint", aname="_cachepolicybindpoint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","booleanList",lazy=False)(pname="cacheinvoke", aname="_cacheinvoke", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cachepolicyinvokelabeltype", aname="_cachepolicyinvokelabeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cachepolicyinvokelabelname", aname="_cachepolicyinvokelabelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rsppolicyname", aname="_rsppolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="rsppolicypriority", aname="_rsppolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rsppolicygotoprioexpression", aname="_rsppolicygotoprioexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","booleanList",lazy=False)(pname="rspinvoke", aname="_rspinvoke", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rsppolicyinvokelabeltype", aname="_rsppolicyinvokelabeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rsppolicyinvokelabelname", aname="_rsppolicyinvokelabelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="csvserver", aname="_csvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cswpolicyname", aname="_cswpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._insertvserveripport = None
                    self._vipheader = None
                    self._value = None
                    self._ipaddress = None
                    self._ipaddress2 = None
                    self._ippattern = None
                    self._ipmask = None
                    self._ipmapping = None
                    self._port = None
                    self._range = None
                    self._servicetype = None
                    self._type = None
                    self._state = None
                    self._effectivestate = None
                    self._status = None
                    self._lbrrreason = None
                    self._cachetype = None
                    self._redirect = None
                    self._precedence = None
                    self._redirecturl = None
                    self._authentication = None
                    self._homepage = None
                    self._dnsvservername = None
                    self._domain = None
                    self._policyname = None
                    self._servicename = None
                    self._weight = None
                    self._dynamicweight = None
                    self._cachevserver = None
                    self._backupvserver = None
                    self._priority = None
                    self._clttimeout = None
                    self._somethod = None
                    self._sopersistence = None
                    self._sopersistencetimeout = None
                    self._sothreshold = None
                    self._lbmethod = None
                    self._hashlength = None
                    self._dataoffset = None
                    self._health = None
                    self._datalength = None
                    self._netmask = None
                    self._rule = None
                    self._resrule = None
                    self._gotopriorityexpression = None
                    self._ruletype = None
                    self._groupname = None
                    self._m = None
                    self._tosid = None
                    self._persistencetype = None
                    self._timeout = None
                    self._cookiedomain = None
                    self._persistmask = None
                    self._persistencebackup = None
                    self._backuppersistencetimeout = None
                    self._cacheable = None
                    self._pq = None
                    self._sc = None
                    self._rtspnat = None
                    self._sessionless = None
                    self._map = None
                    self._connfailover = None
                    self._redirectportrewrite = None
                    self._downstateflush = None
                    self._disableprimaryondown = None
                    self._gt2gb = None
                    self._thresholdvalue = None
                    self._type2 = None
                    self._invoke = None
                    self._labeltype = None
                    self._labelname = None
                    self._cookieipport = None
                    self._vserverid = None
                    self._version = None
                    self._totalservices = None
                    self._activeservices = None
                    self._statechangetimesec = None
                    self._statechangetimemsec = None
                    self._tickssincelaststatechange = None
                    self._hits = None
                    self._authenticationhost = None
                    self._push = None
                    self._pushvserver = None
                    self._pushlabel = None
                    self._pushmulticlients = None
                    self._svcipaddress = None
                    self._svcport = None
                    self._svctype = None
                    self._svcstate = None
                    self._servicegroupname = None
                    self._scpolicyname = None
                    self._scpolicypriority = None
                    self._dospolicyname = None
                    self._dospolicypriority = None
                    self._rwpolicyname = None
                    self._rwpolicypriority = None
                    self._rwpolicygotoprioexpression = None
                    self._rwpolicybindpoint = None
                    self._rwinvoke = None
                    self._rwpolicyinvokelabeltype = None
                    self._rwpolicyinvokelabelname = None
                    self._cachepolicyname = None
                    self._cachepolicypriority = None
                    self._cachepolicygotoprioexpression = None
                    self._cachepolicybindpoint = None
                    self._cacheinvoke = None
                    self._cachepolicyinvokelabeltype = None
                    self._cachepolicyinvokelabelname = None
                    self._rsppolicyname = None
                    self._rsppolicypriority = None
                    self._rsppolicygotoprioexpression = None
                    self._rspinvoke = None
                    self._rsppolicyinvokelabeltype = None
                    self._rsppolicyinvokelabelname = None
                    self._csvserver = None
                    self._cswpolicyname = None
                    self._priority = None
                    return
            Holder.__name__ = "lbvserver_Holder"
            self.pyclass = Holder

    class lbvserverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "lbvserverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.lbvserver_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'lbvserver[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class lbsipparameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lbsipparameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lbsipparameters_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rnatsrcport", aname="_rnatsrcport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="rnatdstport", aname="_rnatdstport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="retrydur", aname="_retrydur", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="addrportvip", aname="_addrportvip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rnatsrcport = None
                    self._rnatdstport = None
                    self._retrydur = None
                    self._addrportvip = None
                    return
            Holder.__name__ = "lbsipparameters_Holder"
            self.pyclass = Holder

    class lbsipparametersList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "lbsipparametersList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.lbsipparameters_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'lbsipparameters[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class lbmetrictable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lbmetrictable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lbmetrictable_Def.schema
            TClist = [ZSI.TC.String(pname="metrictable", aname="_metrictable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metric", aname="_metric", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snmpoid", aname="_snmpoid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._metrictable = None
                    self._metric = None
                    self._snmpoid = None
                    self._flags = None
                    self._type = None
                    return
            Holder.__name__ = "lbmetrictable_Holder"
            self.pyclass = Holder

    class lbmetrictableList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "lbmetrictableList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.lbmetrictable_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'lbmetrictable[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class lbwlm_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lbwlm")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lbwlm_Def.schema
            TClist = [ZSI.TC.String(pname="wlmname", aname="_wlmname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="secure", aname="_secure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="katimeout", aname="_katimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lbuid", aname="_lbuid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="vservername", aname="_vservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._wlmname = None
                    self._ipaddress = None
                    self._port = None
                    self._secure = None
                    self._katimeout = None
                    self._lbuid = None
                    self._state = None
                    self._vservername = None
                    return
            Holder.__name__ = "lbwlm_Holder"
            self.pyclass = Holder

    class lbwlmList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "lbwlmList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.lbwlm_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'lbwlm[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class arp_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "arp")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.arp_Def.schema
            TClist = [ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mac", aname="_mac", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ifnum", aname="_ifnum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipaddress = None
                    self._mac = None
                    self._ifnum = None
                    self._timeout = None
                    self._state = None
                    self._flags = None
                    self._type = None
                    self._vlan = None
                    return
            Holder.__name__ = "arp_Holder"
            self.pyclass = Holder

    class arpList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "arpList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.arp_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'arp[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class ci_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ci")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ci_Def.schema
            TClist = [ZSI.TC.String(pname="ifaces", aname="_ifaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ifaces = None
                    return
            Holder.__name__ = "ci_Holder"
            self.pyclass = Holder

    class ciList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "ciList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.ci_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'ci[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class bridgetable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "bridgetable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.bridgetable_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="bridgeage", aname="_bridgeage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mac", aname="_mac", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ifnum", aname="_ifnum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bridgeage = None
                    self._mac = None
                    self._ifnum = None
                    self._vlan = None
                    return
            Holder.__name__ = "bridgetable_Holder"
            self.pyclass = Holder

    class bridgetableList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "bridgetableList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.bridgetable_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'bridgetable[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class channel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "channel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.channel_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="devicename", aname="_devicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="unit", aname="_unit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="mtu", aname="_mtu", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mac", aname="_mac", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="uptime", aname="_uptime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqmedia", aname="_reqmedia", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqspeed", aname="_reqspeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqduplex", aname="_reqduplex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqflowcontrol", aname="_reqflowcontrol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="media", aname="_media", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="speed", aname="_speed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="duplex", aname="_duplex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flowcontrol", aname="_flowcontrol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="conndistr", aname="_conndistr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="macdistr", aname="_macdistr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mode", aname="_mode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hamonitor", aname="_hamonitor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="autoneg", aname="_autoneg", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="autonegresult", aname="_autonegresult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tagged", aname="_tagged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="trunk", aname="_trunk", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="taggedany", aname="_taggedany", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="taggedautolearn", aname="_taggedautolearn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hangdetect", aname="_hangdetect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hangreset", aname="_hangreset", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="rxpackets", aname="_rxpackets", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="rxbytes", aname="_rxbytes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="rxerrors", aname="_rxerrors", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="rxdrops", aname="_rxdrops", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="txpackets", aname="_txpackets", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="txbytes", aname="_txbytes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="txerrors", aname="_txerrors", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="txdrops", aname="_txdrops", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="indisc", aname="_indisc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="outdisc", aname="_outdisc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="fctls", aname="_fctls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hangs", aname="_hangs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="stsstalls", aname="_stsstalls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="txstalls", aname="_txstalls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="rxstalls", aname="_rxstalls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bdgmuted", aname="_bdgmuted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vmac", aname="_vmac", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vmac6", aname="_vmac6", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ifalias", aname="_ifalias", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="reqthroughput", aname="_reqthroughput", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="throughput", aname="_throughput", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bandwidthhigh", aname="_bandwidthhigh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bandwidthnormal", aname="_bandwidthnormal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._devicename = None
                    self._unit = None
                    self._description = None
                    self._flags = None
                    self._mtu = None
                    self._vlan = None
                    self._mac = None
                    self._uptime = None
                    self._reqmedia = None
                    self._reqspeed = None
                    self._reqduplex = None
                    self._reqflowcontrol = None
                    self._media = None
                    self._speed = None
                    self._duplex = None
                    self._flowcontrol = None
                    self._conndistr = None
                    self._macdistr = None
                    self._mode = None
                    self._hamonitor = None
                    self._state = None
                    self._autoneg = None
                    self._autonegresult = None
                    self._tagged = None
                    self._trunk = None
                    self._taggedany = None
                    self._taggedautolearn = None
                    self._hangdetect = None
                    self._hangreset = None
                    self._rxpackets = None
                    self._rxbytes = None
                    self._rxerrors = None
                    self._rxdrops = None
                    self._txpackets = None
                    self._txbytes = None
                    self._txerrors = None
                    self._txdrops = None
                    self._indisc = None
                    self._outdisc = None
                    self._fctls = None
                    self._hangs = None
                    self._stsstalls = None
                    self._txstalls = None
                    self._rxstalls = None
                    self._bdgmuted = None
                    self._vmac = None
                    self._vmac6 = None
                    self._ifalias = None
                    self._reqthroughput = None
                    self._throughput = None
                    self._bandwidthhigh = None
                    self._bandwidthnormal = None
                    return
            Holder.__name__ = "channel_Holder"
            self.pyclass = Holder

    class channelList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "channelList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.channel_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'channel[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class fis_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "fis")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.fis_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ifaces", aname="_ifaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._ifaces = None
                    return
            Holder.__name__ = "fis_Holder"
            self.pyclass = Holder

    class fisList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "fisList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.fis_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'fis[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class interfacE_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "interfacE")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.interfacE_Def.schema
            TClist = [ZSI.TC.String(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="devicename", aname="_devicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="unit", aname="_unit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="mtu", aname="_mtu", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mac", aname="_mac", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="uptime", aname="_uptime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="downtime", aname="_downtime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqmedia", aname="_reqmedia", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqspeed", aname="_reqspeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqduplex", aname="_reqduplex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqflowcontrol", aname="_reqflowcontrol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="media", aname="_media", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="speed", aname="_speed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="duplex", aname="_duplex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flowcontrol", aname="_flowcontrol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="conndistr", aname="_conndistr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="macdistr", aname="_macdistr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mode", aname="_mode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hamonitor", aname="_hamonitor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="autoneg", aname="_autoneg", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="autonegresult", aname="_autonegresult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tagged", aname="_tagged", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="trunk", aname="_trunk", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="taggedany", aname="_taggedany", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="taggedautolearn", aname="_taggedautolearn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hangdetect", aname="_hangdetect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hangreset", aname="_hangreset", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="rxpackets", aname="_rxpackets", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="rxbytes", aname="_rxbytes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="rxerrors", aname="_rxerrors", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="rxdrops", aname="_rxdrops", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="txpackets", aname="_txpackets", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="txbytes", aname="_txbytes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="txerrors", aname="_txerrors", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="txdrops", aname="_txdrops", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="indisc", aname="_indisc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="outdisc", aname="_outdisc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="fctls", aname="_fctls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hangs", aname="_hangs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="stsstalls", aname="_stsstalls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="txstalls", aname="_txstalls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="rxstalls", aname="_rxstalls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="bdgmacmoved", aname="_bdgmacmoved", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bdgmuted", aname="_bdgmuted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vmac", aname="_vmac", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vmac6", aname="_vmac6", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lacpmode", aname="_lacpmode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="lacpkey", aname="_lacpkey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="lacppriority", aname="_lacppriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lacptimeout", aname="_lacptimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ifalias", aname="_ifalias", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="reqthroughput", aname="_reqthroughput", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="throughput", aname="_throughput", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bandwidthhigh", aname="_bandwidthhigh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bandwidthnormal", aname="_bandwidthnormal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._devicename = None
                    self._unit = None
                    self._description = None
                    self._flags = None
                    self._mtu = None
                    self._vlan = None
                    self._mac = None
                    self._uptime = None
                    self._downtime = None
                    self._reqmedia = None
                    self._reqspeed = None
                    self._reqduplex = None
                    self._reqflowcontrol = None
                    self._media = None
                    self._speed = None
                    self._duplex = None
                    self._flowcontrol = None
                    self._conndistr = None
                    self._macdistr = None
                    self._mode = None
                    self._hamonitor = None
                    self._state = None
                    self._autoneg = None
                    self._autonegresult = None
                    self._tagged = None
                    self._trunk = None
                    self._taggedany = None
                    self._taggedautolearn = None
                    self._hangdetect = None
                    self._hangreset = None
                    self._rxpackets = None
                    self._rxbytes = None
                    self._rxerrors = None
                    self._rxdrops = None
                    self._txpackets = None
                    self._txbytes = None
                    self._txerrors = None
                    self._txdrops = None
                    self._indisc = None
                    self._outdisc = None
                    self._fctls = None
                    self._hangs = None
                    self._stsstalls = None
                    self._txstalls = None
                    self._rxstalls = None
                    self._bdgmacmoved = None
                    self._bdgmuted = None
                    self._vmac = None
                    self._vmac6 = None
                    self._lacpmode = None
                    self._lacpkey = None
                    self._lacppriority = None
                    self._lacptimeout = None
                    self._ifalias = None
                    self._reqthroughput = None
                    self._throughput = None
                    self._bandwidthhigh = None
                    self._bandwidthnormal = None
                    return
            Holder.__name__ = "interfacE_Holder"
            self.pyclass = Holder

    class interfacEList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "interfacEList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.interfacE_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'interfacE[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class lacp_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "lacp")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lacp_Def.schema
            TClist = [ZSI.TC.String(pname="devicename", aname="_devicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="syspriority", aname="_syspriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mac", aname="_mac", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="lacpkey", aname="_lacpkey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._devicename = None
                    self._syspriority = None
                    self._mac = None
                    self._flags = None
                    self._lacpkey = None
                    return
            Holder.__name__ = "lacp_Holder"
            self.pyclass = Holder

    class lacpList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "lacpList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.lacp_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'lacp[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class rnatparam_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "rnatparam")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.rnatparam_Def.schema
            TClist = [ZSI.TC.String(pname="tcpproxy", aname="_tcpproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tcpproxy = None
                    return
            Holder.__name__ = "rnatparam_Holder"
            self.pyclass = Holder

    class rnatparamList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "rnatparamList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.rnatparam_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'rnatparam[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class route_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "route")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.route_Def.schema
            TClist = [ZSI.TC.String(pname="network", aname="_network", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gateway", aname="_gateway", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="routetype", aname="_routetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="detail", aname="_detail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gatewayname", aname="_gatewayname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="advertise", aname="_advertise", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="dynamic", aname="_dynamic", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="statiC", aname="_statiC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="permanent", aname="_permanent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="direct", aname="_direct", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="dynamic2", aname="_dynamic2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="nat", aname="_nat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="lbroute", aname="_lbroute", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="adv", aname="_adv", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="tunnel", aname="_tunnel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cost", aname="_cost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="distance", aname="_distance", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cost2", aname="_cost2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="data", aname="_data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ospf", aname="_ospf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="rip", aname="_rip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="bgp", aname="_bgp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="msr", aname="_msr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="monitor", aname="_monitor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="totalprobes", aname="_totalprobes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="totalfailedprobes", aname="_totalfailedprobes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="failedprobes", aname="_failedprobes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatcode", aname="_monstatcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam1", aname="_monstatparam1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam2", aname="_monstatparam2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="monstatparam3", aname="_monstatparam3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._network = None
                    self._netmask = None
                    self._gateway = None
                    self._routetype = None
                    self._detail = None
                    self._gatewayname = None
                    self._advertise = None
                    self._type = None
                    self._dynamic = None
                    self._statiC = None
                    self._permanent = None
                    self._direct = None
                    self._dynamic2 = None
                    self._nat = None
                    self._lbroute = None
                    self._adv = None
                    self._tunnel = None
                    self._cost = None
                    self._distance = None
                    self._cost2 = None
                    self._weight = None
                    self._data = None
                    self._flags = None
                    self._ospf = None
                    self._rip = None
                    self._bgp = None
                    self._msr = None
                    self._monitor = None
                    self._state = None
                    self._totalprobes = None
                    self._totalfailedprobes = None
                    self._failedprobes = None
                    self._monstatcode = None
                    self._monstatparam1 = None
                    self._monstatparam2 = None
                    self._monstatparam3 = None
                    return
            Holder.__name__ = "route_Holder"
            self.pyclass = Holder

    class routeList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "routeList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.route_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'route[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class rnat_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "rnat")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.rnat_Def.schema
            TClist = [ZSI.TC.String(pname="network", aname="_network", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="natip", aname="_natip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aclname", aname="_aclname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="redirectport", aname="_redirectport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._network = None
                    self._netmask = None
                    self._natip = None
                    self._aclname = None
                    self._redirectport = None
                    return
            Holder.__name__ = "rnat_Holder"
            self.pyclass = Holder

    class rnatList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "rnatList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.rnat_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'rnat[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vlan_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vlan")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vlan_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="rnat", aname="_rnat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="portbitmap", aname="_portbitmap", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tagbitmap", aname="_tagbitmap", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ifaces", aname="_ifaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tagifaces", aname="_tagifaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipv6dynamicrouting", aname="_ipv6dynamicrouting", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._ipaddress = None
                    self._netmask = None
                    self._rnat = None
                    self._portbitmap = None
                    self._tagbitmap = None
                    self._ifaces = None
                    self._tagifaces = None
                    self._ipv6dynamicrouting = None
                    return
            Holder.__name__ = "vlan_Holder"
            self.pyclass = Holder

    class vlanList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vlanList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vlan_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vlan[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vrid_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vrid")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vrid_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ifaces", aname="_ifaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._ifaces = None
                    self._type = None
                    self._vlan = None
                    return
            Holder.__name__ = "vrid_Holder"
            self.pyclass = Holder

    class vridList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vridList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vrid_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vrid[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vrid6_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vrid6")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vrid6_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ifaces", aname="_ifaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._ifaces = None
                    self._type = None
                    self._vlan = None
                    return
            Holder.__name__ = "vrid6_Holder"
            self.pyclass = Holder

    class vrid6List_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vrid6List")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vrid6_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vrid6[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class route6_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "route6")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.route6_Def.schema
            TClist = [ZSI.TC.String(pname="network", aname="_network", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gateway", aname="_gateway", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="routetype", aname="_routetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="detail", aname="_detail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gatewayname", aname="_gatewayname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="advertise", aname="_advertise", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="dynamic", aname="_dynamic", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="distance", aname="_distance", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cost", aname="_cost", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="data", aname="_data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._network = None
                    self._gateway = None
                    self._vlan = None
                    self._routetype = None
                    self._detail = None
                    self._gatewayname = None
                    self._advertise = None
                    self._type = None
                    self._dynamic = None
                    self._weight = None
                    self._distance = None
                    self._cost = None
                    self._data = None
                    self._flags = None
                    return
            Holder.__name__ = "route6_Holder"
            self.pyclass = Holder

    class route6List_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "route6List")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.route6_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'route6[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nd6_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nd6")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nd6_Def.schema
            TClist = [ZSI.TC.String(pname="neighbor", aname="_neighbor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mac", aname="_mac", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ifnum", aname="_ifnum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="vlan", aname="_vlan", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._neighbor = None
                    self._mac = None
                    self._state = None
                    self._timeout = None
                    self._ifnum = None
                    self._vlan = None
                    self._flags = None
                    return
            Holder.__name__ = "nd6_Holder"
            self.pyclass = Holder

    class nd6List_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nd6List")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nd6_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nd6[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class ipv6_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ipv6")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ipv6_Def.schema
            TClist = [ZSI.TC.String(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="basereachtime", aname="_basereachtime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="reachtime", aname="_reachtime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="retransmissiontime", aname="_retransmissiontime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._flags = None
                    self._basereachtime = None
                    self._reachtime = None
                    self._retransmissiontime = None
                    return
            Holder.__name__ = "ipv6_Holder"
            self.pyclass = Holder

    class ipv6List_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "ipv6List")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.ipv6_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'ipv6[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class inat_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "inat")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.inat_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publicip", aname="_publicip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="privateip", aname="_privateip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="proxyip", aname="_proxyip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tcpproxy", aname="_tcpproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ftp", aname="_ftp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="usip", aname="_usip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="usnip", aname="_usnip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._publicip = None
                    self._privateip = None
                    self._proxyip = None
                    self._tcpproxy = None
                    self._ftp = None
                    self._usip = None
                    self._usnip = None
                    self._flags = None
                    return
            Holder.__name__ = "inat_Holder"
            self.pyclass = Holder

    class inatList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "inatList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.inat_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'inat[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class iptunnelparam_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "iptunnelparam")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.iptunnelparam_Def.schema
            TClist = [ZSI.TC.String(pname="srcip", aname="_srcip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dropfrag", aname="_dropfrag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="dropfragcputhreshold", aname="_dropfragcputhreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._srcip = None
                    self._dropfrag = None
                    self._dropfragcputhreshold = None
                    return
            Holder.__name__ = "iptunnelparam_Holder"
            self.pyclass = Holder

    class iptunnelparamList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "iptunnelparamList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.iptunnelparam_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'iptunnelparam[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class iptunnel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "iptunnel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.iptunnel_Def.schema
            TClist = [ZSI.TC.String(pname="remote", aname="_remote", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="remotesubnetmask", aname="_remotesubnetmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name2", aname="_name2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="local", aname="_local", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="protocol", aname="_protocol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="encapip", aname="_encapip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._remote = None
                    self._remotesubnetmask = None
                    self._name = None
                    self._name2 = None
                    self._local = None
                    self._protocol = None
                    self._type = None
                    self._encapip = None
                    return
            Holder.__name__ = "iptunnel_Holder"
            self.pyclass = Holder

    class iptunnelList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "iptunnelList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.iptunnel_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'iptunnel[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsns_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsns")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsns_Def.schema
            TClist = [ZSI.TC.String(pname="textblob", aname="_textblob", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._textblob = None
                    return
            Holder.__name__ = "nsns_Holder"
            self.pyclass = Holder

    class nsnsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsnsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsns_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsns[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nslicense_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nslicense")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nslicense_Def.schema
            TClist = [ZSI.TC.Boolean(pname="wl", aname="_wl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="sp", aname="_sp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="lb", aname="_lb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cs", aname="_cs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cr", aname="_cr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="sc", aname="_sc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cmp", aname="_cmp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="delta", aname="_delta", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="pq", aname="_pq", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ssl", aname="_ssl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="gslb", aname="_gslb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="gslbp", aname="_gslbp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="hdosp", aname="_hdosp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="routing", aname="_routing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cf", aname="_cf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ic", aname="_ic", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="sslvpn", aname="_sslvpn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="aaa", aname="_aaa", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ospf", aname="_ospf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="rip", aname="_rip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="bgp", aname="_bgp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="rewrite", aname="_rewrite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ipv6pt", aname="_ipv6pt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="appfw", aname="_appfw", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="responder", aname="_responder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="agee", aname="_agee", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="nsxn", aname="_nsxn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="htmlinjection", aname="_htmlinjection", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="modelid", aname="_modelid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="push", aname="_push", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._wl = None
                    self._sp = None
                    self._lb = None
                    self._cs = None
                    self._cr = None
                    self._sc = None
                    self._cmp = None
                    self._delta = None
                    self._pq = None
                    self._ssl = None
                    self._gslb = None
                    self._gslbp = None
                    self._hdosp = None
                    self._routing = None
                    self._cf = None
                    self._ic = None
                    self._sslvpn = None
                    self._aaa = None
                    self._ospf = None
                    self._rip = None
                    self._bgp = None
                    self._rewrite = None
                    self._ipv6pt = None
                    self._appfw = None
                    self._responder = None
                    self._agee = None
                    self._nsxn = None
                    self._htmlinjection = None
                    self._modelid = None
                    self._push = None
                    return
            Holder.__name__ = "nslicense_Holder"
            self.pyclass = Holder

    class nslicenseList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nslicenseList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nslicense_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nslicense[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsversion_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsversion")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsversion_Def.schema
            TClist = [ZSI.TC.String(pname="version", aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="mode", aname="_mode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._version = None
                    self._mode = None
                    return
            Holder.__name__ = "nsversion_Holder"
            self.pyclass = Holder

    class nsversionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsversionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsversion_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsversion[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsconnectiontable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsconnectiontable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsconnectiontable_Def.schema
            TClist = [ZSI.TC.String(pname="filterexpression", aname="_filterexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="link", aname="_link", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="detail", aname="_detail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sourceip", aname="_sourceip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sourceport", aname="_sourceport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destip", aname="_destip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="svctype", aname="_svctype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="idletime", aname="_idletime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="linksourceip", aname="_linksourceip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="linksourceport", aname="_linksourceport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="linkdestip", aname="_linkdestip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="linkdestport", aname="_linkdestport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="linkservicetype", aname="_linkservicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="linkidletime", aname="_linkidletime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="linkstate", aname="_linkstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="entityname", aname="_entityname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="linkentityname", aname="_linkentityname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="connectionnumber", aname="_connectionnumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="linkconnectionnumber", aname="_linkconnectionnumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="connid", aname="_connid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="linkconnid", aname="_linkconnid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="mss", aname="_mss", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="retxretrycnt", aname="_retxretrycnt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="rcvwnd", aname="_rcvwnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="advwnd", aname="_advwnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="sndcwnd", aname="_sndcwnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="iss", aname="_iss", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="irs", aname="_irs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="rcvnxt", aname="_rcvnxt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="maxack", aname="_maxack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="sndnxt", aname="_sndnxt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="sndunack", aname="_sndunack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="httpendseq", aname="_httpendseq", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="httpstate", aname="_httpstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="trcount", aname="_trcount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="httpreqver", aname="_httpreqver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="httprequest", aname="_httprequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="httprspcode", aname="_httprspcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="rttsmoothed", aname="_rttsmoothed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="rttvariance", aname="_rttvariance", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="outoforderpkts", aname="_outoforderpkts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filterexpression = None
                    self._link = None
                    self._name = None
                    self._detail = None
                    self._sourceip = None
                    self._sourceport = None
                    self._destip = None
                    self._destport = None
                    self._svctype = None
                    self._idletime = None
                    self._state = None
                    self._linksourceip = None
                    self._linksourceport = None
                    self._linkdestip = None
                    self._linkdestport = None
                    self._linkservicetype = None
                    self._linkidletime = None
                    self._linkstate = None
                    self._entityname = None
                    self._linkentityname = None
                    self._connectionnumber = None
                    self._linkconnectionnumber = None
                    self._connid = None
                    self._linkconnid = None
                    self._mss = None
                    self._retxretrycnt = None
                    self._rcvwnd = None
                    self._advwnd = None
                    self._sndcwnd = None
                    self._iss = None
                    self._irs = None
                    self._rcvnxt = None
                    self._maxack = None
                    self._sndnxt = None
                    self._sndunack = None
                    self._httpendseq = None
                    self._httpstate = None
                    self._trcount = None
                    self._priority = None
                    self._httpreqver = None
                    self._httprequest = None
                    self._httprspcode = None
                    self._rttsmoothed = None
                    self._rttvariance = None
                    self._outoforderpkts = None
                    return
            Holder.__name__ = "nsconnectiontable_Holder"
            self.pyclass = Holder

    class nsconnectiontableList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsconnectiontableList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsconnectiontable_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsconnectiontable[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nslimitsessions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nslimitsessions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nslimitsessions_Def.schema
            TClist = [ZSI.TC.String(pname="limitidentifier", aname="_limitidentifier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="detail", aname="_detail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="drop", aname="_drop", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="number", aname="_number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="unit", aname="_unit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="referencecount", aname="_referencecount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxbandwidth", aname="_maxbandwidth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="limitselectoripv61", aname="_limitselectoripv61", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="limitselectoripv62", aname="_limitselectoripv62", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flag", aname="_flag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._limitidentifier = None
                    self._detail = None
                    self._timeout = None
                    self._hits = None
                    self._drop = None
                    self._number = None
                    self._name = None
                    self._unit = None
                    self._flags = None
                    self._referencecount = None
                    self._maxbandwidth = None
                    self._limitselectoripv61 = None
                    self._limitselectoripv62 = None
                    self._flag = None
                    return
            Holder.__name__ = "nslimitsessions_Holder"
            self.pyclass = Holder

    class nslimitsessionsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nslimitsessionsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nslimitsessions_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nslimitsessions[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nspersistencesession_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nspersistencesession")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nspersistencesession_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcip", aname="_srcip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcipv6", aname="_srcipv6", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destip", aname="_destip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destipv6", aname="_destipv6", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vservername", aname="_vservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="referencecount", aname="_referencecount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sipcallid", aname="_sipcallid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="persistenceparam", aname="_persistenceparam", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    self._srcip = None
                    self._srcipv6 = None
                    self._destip = None
                    self._destipv6 = None
                    self._flags = None
                    self._destport = None
                    self._vservername = None
                    self._timeout = None
                    self._referencecount = None
                    self._sipcallid = None
                    self._persistenceparam = None
                    return
            Holder.__name__ = "nspersistencesession_Holder"
            self.pyclass = Holder

    class nspersistencesessionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nspersistencesessionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nspersistencesession_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nspersistencesession[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsconfig_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsconfig")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsconfig_Def.schema
            TClist = [ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="nsvlan", aname="_nsvlan", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="ifnum", aname="_ifnum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="httpport", aname="_httpport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxconn", aname="_maxconn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxreq", aname="_maxreq", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cip", aname="_cip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipheader", aname="_cipheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cookieversion", aname="_cookieversion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="securecookie", aname="_securecookie", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="failover", aname="_failover", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="primaryip", aname="_primaryip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="pmtumin", aname="_pmtumin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="pmtutimeout", aname="_pmtutimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ftpportrange", aname="_ftpportrange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="timezone", aname="_timezone", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipaddress = None
                    self._netmask = None
                    self._range = None
                    self._nsvlan = None
                    self._ifnum = None
                    self._httpport = None
                    self._maxconn = None
                    self._maxreq = None
                    self._cip = None
                    self._cipheader = None
                    self._cookieversion = None
                    self._securecookie = None
                    self._failover = None
                    self._primaryip = None
                    self._pmtumin = None
                    self._pmtutimeout = None
                    self._ftpportrange = None
                    self._flags = None
                    self._timezone = None
                    return
            Holder.__name__ = "nsconfig_Holder"
            self.pyclass = Holder

    class nsconfigList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsconfigList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsconfig_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsconfig[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nshostname_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nshostname")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nshostname_Def.schema
            TClist = [ZSI.TC.String(pname="hostname", aname="_hostname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hostname = None
                    return
            Holder.__name__ = "nshostname_Holder"
            self.pyclass = Holder

    class nshostnameList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nshostnameList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nshostname_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nshostname[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nslimitidentifier_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nslimitidentifier")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nslimitidentifier_Def.schema
            TClist = [ZSI.TC.String(pname="limitidentifier", aname="_limitidentifier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="threshold", aname="_threshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeslice", aname="_timeslice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mode", aname="_mode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="limittype", aname="_limittype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="selectorname", aname="_selectorname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="drop", aname="_drop", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="time", aname="_time", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="total", aname="_total", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxbandwidth", aname="_maxbandwidth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="trapsintimeslice", aname="_trapsintimeslice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="trapscomputedintimeslice", aname="_trapscomputedintimeslice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="computedtraptimeslice", aname="_computedtraptimeslice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="referencecount", aname="_referencecount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._limitidentifier = None
                    self._threshold = None
                    self._timeslice = None
                    self._mode = None
                    self._limittype = None
                    self._selectorname = None
                    self._hits = None
                    self._drop = None
                    self._rule = None
                    self._time = None
                    self._total = None
                    self._maxbandwidth = None
                    self._trapsintimeslice = None
                    self._trapscomputedintimeslice = None
                    self._computedtraptimeslice = None
                    self._referencecount = None
                    return
            Holder.__name__ = "nslimitidentifier_Holder"
            self.pyclass = Holder

    class nslimitidentifierList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nslimitidentifierList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nslimitidentifier_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nslimitidentifier[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nslimitselector_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nslimitselector")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nslimitselector_Def.schema
            TClist = [ZSI.TC.String(pname="selectorname", aname="_selectorname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._selectorname = None
                    self._flags = None
                    self._rule = None
                    return
            Holder.__name__ = "nslimitselector_Holder"
            self.pyclass = Holder

    class nslimitselectorList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nslimitselectorList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nslimitselector_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nslimitselector[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsacl_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsacl")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsacl_Def.schema
            TClist = [ZSI.TC.String(pname="aclname", aname="_aclname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aclaction", aname="_aclaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcmac", aname="_srcmac", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="protocol", aname="_protocol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="protocolnumber", aname="_protocolnumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcportval", aname="_srcportval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destportval", aname="_destportval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcipval", aname="_srcipval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destipval", aname="_destipval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="icmptype", aname="_icmptype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="icmpcode", aname="_icmpcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="interfacE", aname="_interfacE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="established", aname="_established", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="operatoR", aname="_operatoR", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="operatoR2", aname="_operatoR2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="operatoR3", aname="_operatoR3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="operatoR4", aname="_operatoR4", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="kernelstate", aname="_kernelstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logstate", aname="_logstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ratelimit", aname="_ratelimit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aclname = None
                    self._aclaction = None
                    self._srcmac = None
                    self._protocol = None
                    self._protocolnumber = None
                    self._srcportval = None
                    self._destportval = None
                    self._srcipval = None
                    self._destipval = None
                    self._vlan = None
                    self._state = None
                    self._ttl = None
                    self._icmptype = None
                    self._icmpcode = None
                    self._interfacE = None
                    self._hits = None
                    self._established = None
                    self._priority = None
                    self._operatoR = None
                    self._operatoR2 = None
                    self._operatoR3 = None
                    self._operatoR4 = None
                    self._kernelstate = None
                    self._logstate = None
                    self._ratelimit = None
                    return
            Holder.__name__ = "nsacl_Holder"
            self.pyclass = Holder

    class nsaclList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsaclList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsacl_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsacl[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsacl6_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsacl6")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsacl6_Def.schema
            TClist = [ZSI.TC.String(pname="acl6name", aname="_acl6name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="acl6action", aname="_acl6action", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcmac", aname="_srcmac", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="protocol", aname="_protocol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="protocolnumber", aname="_protocolnumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcportval", aname="_srcportval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destportval", aname="_destportval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcipv6val", aname="_srcipv6val", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destipv6val", aname="_destipv6val", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vlan", aname="_vlan", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="kernelstate", aname="_kernelstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="icmptype", aname="_icmptype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="icmpcode", aname="_icmpcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="interfacE", aname="_interfacE", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="established", aname="_established", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="operatoR", aname="_operatoR", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="operatoR2", aname="_operatoR2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="operatoR3", aname="_operatoR3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="operatoR4", aname="_operatoR4", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._acl6name = None
                    self._acl6action = None
                    self._srcmac = None
                    self._protocol = None
                    self._protocolnumber = None
                    self._srcportval = None
                    self._destportval = None
                    self._srcipv6val = None
                    self._destipv6val = None
                    self._vlan = None
                    self._state = None
                    self._kernelstate = None
                    self._ttl = None
                    self._icmptype = None
                    self._icmpcode = None
                    self._interfacE = None
                    self._hits = None
                    self._established = None
                    self._priority = None
                    self._operatoR = None
                    self._operatoR2 = None
                    self._operatoR3 = None
                    self._operatoR4 = None
                    return
            Holder.__name__ = "nsacl6_Holder"
            self.pyclass = Holder

    class nsacl6List_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsacl6List")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsacl6_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsacl6[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsfeature_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsfeature")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsfeature_Def.schema
            TClist = [ZSI.TC.Boolean(pname="wl", aname="_wl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="sp", aname="_sp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="lb", aname="_lb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cs", aname="_cs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cr", aname="_cr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="sc", aname="_sc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cmp", aname="_cmp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="pq", aname="_pq", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ssl", aname="_ssl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="gslb", aname="_gslb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="hdosp", aname="_hdosp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="routing", aname="_routing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cf", aname="_cf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ic", aname="_ic", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="sslvpn", aname="_sslvpn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="aaa", aname="_aaa", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ospf", aname="_ospf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="rip", aname="_rip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="bgp", aname="_bgp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="rewrite", aname="_rewrite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ipv6pt", aname="_ipv6pt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="appfw", aname="_appfw", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="responder", aname="_responder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="htmlinjection", aname="_htmlinjection", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="push", aname="_push", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._wl = None
                    self._sp = None
                    self._lb = None
                    self._cs = None
                    self._cr = None
                    self._sc = None
                    self._cmp = None
                    self._pq = None
                    self._ssl = None
                    self._gslb = None
                    self._hdosp = None
                    self._routing = None
                    self._cf = None
                    self._ic = None
                    self._sslvpn = None
                    self._aaa = None
                    self._ospf = None
                    self._rip = None
                    self._bgp = None
                    self._rewrite = None
                    self._ipv6pt = None
                    self._appfw = None
                    self._responder = None
                    self._htmlinjection = None
                    self._push = None
                    return
            Holder.__name__ = "nsfeature_Holder"
            self.pyclass = Holder

    class nsfeatureList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsfeatureList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsfeature_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsfeature[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsip6_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsip6")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsip6_Def.schema
            TClist = [ZSI.TC.String(pname="ipv6address", aname="_ipv6address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="scope", aname="_scope", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nd", aname="_nd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="icmp", aname="_icmp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vserver", aname="_vserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="telnet", aname="_telnet", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssh", aname="_ssh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gui", aname="_gui", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snmp", aname="_snmp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ftp", aname="_ftp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mgmtaccess", aname="_mgmtaccess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="map", aname="_map", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dynamicrouting", aname="_dynamicrouting", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostroute", aname="_hostroute", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ip6hostrtgw", aname="_ip6hostrtgw", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="metric", aname="_metric", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vserverrhilevel", aname="_vserverrhilevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ospf6lsatype", aname="_ospf6lsatype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ospfarea", aname="_ospfarea", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipv6address = None
                    self._scope = None
                    self._type = None
                    self._nd = None
                    self._icmp = None
                    self._vserver = None
                    self._telnet = None
                    self._ssh = None
                    self._gui = None
                    self._snmp = None
                    self._ftp = None
                    self._mgmtaccess = None
                    self._state = None
                    self._map = None
                    self._dynamicrouting = None
                    self._hostroute = None
                    self._ip6hostrtgw = None
                    self._metric = None
                    self._vserverrhilevel = None
                    self._ospf6lsatype = None
                    self._ospfarea = None
                    return
            Holder.__name__ = "nsip6_Holder"
            self.pyclass = Holder

    class nsip6List_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsip6List")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsip6_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsip6[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsip_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsip")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsip_Def.schema
            TClist = [ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="arp", aname="_arp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="icmp", aname="_icmp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vserver", aname="_vserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="telnet", aname="_telnet", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssh", aname="_ssh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gui", aname="_gui", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snmp", aname="_snmp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ftp", aname="_ftp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mgmtaccess", aname="_mgmtaccess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dynamicrouting", aname="_dynamicrouting", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bgp", aname="_bgp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ospf", aname="_ospf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rip", aname="_rip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostroute", aname="_hostroute", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostrtgw", aname="_hostrtgw", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="metric", aname="_metric", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="ospfarea", aname="_ospfarea", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vserverrhilevel", aname="_vserverrhilevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="viprtadv2bsd", aname="_viprtadv2bsd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vipvsercount", aname="_vipvsercount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="vipvserdowncount", aname="_vipvserdowncount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ospflsatype", aname="_ospflsatype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="freeports", aname="_freeports", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipaddress = None
                    self._type = None
                    self._netmask = None
                    self._flags = None
                    self._arp = None
                    self._icmp = None
                    self._vserver = None
                    self._telnet = None
                    self._ssh = None
                    self._gui = None
                    self._snmp = None
                    self._ftp = None
                    self._mgmtaccess = None
                    self._dynamicrouting = None
                    self._bgp = None
                    self._ospf = None
                    self._rip = None
                    self._hostroute = None
                    self._hostrtgw = None
                    self._metric = None
                    self._ospfarea = None
                    self._vserverrhilevel = None
                    self._viprtadv2bsd = None
                    self._vipvsercount = None
                    self._vipvserdowncount = None
                    self._ospflsatype = None
                    self._state = None
                    self._freeports = None
                    return
            Holder.__name__ = "nsip_Holder"
            self.pyclass = Holder

    class nsipList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsipList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsip_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsip[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsmode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsmode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsmode_Def.schema
            TClist = [ZSI.TC.Boolean(pname="fr", aname="_fr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="l2", aname="_l2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="usip", aname="_usip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cka", aname="_cka", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="tcpb", aname="_tcpb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="mbf", aname="_mbf", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="edge", aname="_edge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="usnip", aname="_usnip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="l3", aname="_l3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="pmtud", aname="_pmtud", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="sradv", aname="_sradv", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="dradv", aname="_dradv", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="iradv", aname="_iradv", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="sradv6", aname="_sradv6", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="dradv6", aname="_dradv6", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="bridgebpdus", aname="_bridgebpdus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fr = None
                    self._l2 = None
                    self._usip = None
                    self._cka = None
                    self._tcpb = None
                    self._mbf = None
                    self._edge = None
                    self._usnip = None
                    self._l3 = None
                    self._pmtud = None
                    self._sradv = None
                    self._dradv = None
                    self._iradv = None
                    self._sradv6 = None
                    self._dradv6 = None
                    self._bridgebpdus = None
                    return
            Holder.__name__ = "nsmode_Holder"
            self.pyclass = Holder

    class nsmodeList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsmodeList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsmode_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsmode[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsdhcpparams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsdhcpparams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsdhcpparams_Def.schema
            TClist = [ZSI.TC.String(pname="dhcpclient", aname="_dhcpclient", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostrtgw", aname="_hostrtgw", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="running", aname="_running", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="saveroute", aname="_saveroute", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dhcpclient = None
                    self._ipaddress = None
                    self._netmask = None
                    self._hostrtgw = None
                    self._running = None
                    self._saveroute = None
                    return
            Holder.__name__ = "nsdhcpparams_Holder"
            self.pyclass = Holder

    class nsdhcpparamsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsdhcpparamsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsdhcpparams_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsdhcpparams[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsspparams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsspparams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsspparams_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="basethreshold", aname="_basethreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="throttle", aname="_throttle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","intList",lazy=False)(pname="table", aname="_table", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._basethreshold = None
                    self._throttle = None
                    self._table = None
                    return
            Holder.__name__ = "nsspparams_Holder"
            self.pyclass = Holder

    class nsspparamsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsspparamsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsspparams_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsspparams[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nstcpbufparam_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nstcpbufparam")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nstcpbufparam_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="size", aname="_size", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memlimit", aname="_memlimit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._size = None
                    self._memlimit = None
                    return
            Holder.__name__ = "nstcpbufparam_Holder"
            self.pyclass = Holder

    class nstcpbufparamList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nstcpbufparamList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nstcpbufparam_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nstcpbufparam[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nstcpparam_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nstcpparam")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nstcpparam_Def.schema
            TClist = [ZSI.TC.String(pname="ws", aname="_ws", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="wsval", aname="_wsval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sack", aname="_sack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxburst", aname="_maxburst", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="initialcwnd", aname="_initialcwnd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="recvbuffsize", aname="_recvbuffsize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="delayedack", aname="_delayedack", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="downstaterst", aname="_downstaterst", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nagle", aname="_nagle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="limitedpersist", aname="_limitedpersist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="oooqsize", aname="_oooqsize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ws = None
                    self._wsval = None
                    self._sack = None
                    self._maxburst = None
                    self._initialcwnd = None
                    self._recvbuffsize = None
                    self._delayedack = None
                    self._downstaterst = None
                    self._nagle = None
                    self._limitedpersist = None
                    self._oooqsize = None
                    return
            Holder.__name__ = "nstcpparam_Holder"
            self.pyclass = Holder

    class nstcpparamList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nstcpparamList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nstcpparam_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nstcpparam[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nshttpparam_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nshttpparam")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nshttpparam_Def.schema
            TClist = [ZSI.TC.String(pname="dropinvalreqs", aname="_dropinvalreqs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="markhttp09inval", aname="_markhttp09inval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="markconnreqinval", aname="_markconnreqinval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="insnssrvrhdr", aname="_insnssrvrhdr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nssrvrhdr", aname="_nssrvrhdr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logerrresp", aname="_logerrresp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dropinvalreqs = None
                    self._markhttp09inval = None
                    self._markconnreqinval = None
                    self._insnssrvrhdr = None
                    self._nssrvrhdr = None
                    self._logerrresp = None
                    return
            Holder.__name__ = "nshttpparam_Holder"
            self.pyclass = Holder

    class nshttpparamList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nshttpparamList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nshttpparam_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nshttpparam[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsweblogparam_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsweblogparam")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsweblogparam_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="buffersizemb", aname="_buffersizemb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._buffersizemb = None
                    return
            Holder.__name__ = "nsweblogparam_Holder"
            self.pyclass = Holder

    class nsweblogparamList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsweblogparamList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsweblogparam_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsweblogparam[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsratecontrol_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsratecontrol")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsratecontrol_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="tcpthreshold", aname="_tcpthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="udpthreshold", aname="_udpthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="icmpthreshold", aname="_icmpthreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tcpthreshold = None
                    self._udpthreshold = None
                    self._icmpthreshold = None
                    return
            Holder.__name__ = "nsratecontrol_Holder"
            self.pyclass = Holder

    class nsratecontrolList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsratecontrolList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsratecontrol_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsratecontrol[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsrpcnode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsrpcnode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsrpcnode_Def.schema
            TClist = [ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="retry", aname="_retry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcip", aname="_srcip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="secure", aname="_secure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipaddress = None
                    self._password = None
                    self._retry = None
                    self._srcip = None
                    self._secure = None
                    return
            Holder.__name__ = "nsrpcnode_Holder"
            self.pyclass = Holder

    class nsrpcnodeList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsrpcnodeList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsrpcnode_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsrpcnode[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsidletimeout_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsidletimeout")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsidletimeout_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="tcpsvr", aname="_tcpsvr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tcpclt", aname="_tcpclt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="nontcpsvrclt", aname="_nontcpsvrclt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._tcpsvr = None
                    self._tcpclt = None
                    self._nontcpsvrclt = None
                    return
            Holder.__name__ = "nsidletimeout_Holder"
            self.pyclass = Holder

    class nsidletimeoutList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nsidletimeoutList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsidletimeout_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsidletimeout[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nstimeout_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nstimeout")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nstimeout_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="zombie", aname="_zombie", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="client", aname="_client", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="server", aname="_server", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="httpclient", aname="_httpclient", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="httpserver", aname="_httpserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tcpclient", aname="_tcpclient", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tcpserver", aname="_tcpserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="anyclient", aname="_anyclient", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="anyserver", aname="_anyserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="halfclose", aname="_halfclose", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="nontcpzombie", aname="_nontcpzombie", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._zombie = None
                    self._client = None
                    self._server = None
                    self._httpclient = None
                    self._httpserver = None
                    self._tcpclient = None
                    self._tcpserver = None
                    self._anyclient = None
                    self._anyserver = None
                    self._halfclose = None
                    self._nontcpzombie = None
                    return
            Holder.__name__ = "nstimeout_Holder"
            self.pyclass = Holder

    class nstimeoutList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nstimeoutList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nstimeout_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nstimeout[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nssimpleacl_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nssimpleacl")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nssimpleacl_Def.schema
            TClist = [ZSI.TC.String(pname="aclname", aname="_aclname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aclaction", aname="_aclaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcip", aname="_srcip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="protocol", aname="_protocol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ttl", aname="_ttl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aclname = None
                    self._aclaction = None
                    self._srcip = None
                    self._destport = None
                    self._protocol = None
                    self._ttl = None
                    self._hits = None
                    return
            Holder.__name__ = "nssimpleacl_Holder"
            self.pyclass = Holder

    class nssimpleaclList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nssimpleaclList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nssimpleacl_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nssimpleacl[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nshardware_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nshardware")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nshardware_Def.schema
            TClist = [ZSI.TC.String(pname="hwdescription", aname="_hwdescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sysid", aname="_sysid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="manufactureday", aname="_manufactureday", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="manufacturemonth", aname="_manufacturemonth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="manufactureyear", aname="_manufactureyear", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="cpufrequncy", aname="_cpufrequncy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="hostid", aname="_hostid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serialno", aname="_serialno", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="encodedserialno", aname="_encodedserialno", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hwdescription = None
                    self._sysid = None
                    self._manufactureday = None
                    self._manufacturemonth = None
                    self._manufactureyear = None
                    self._cpufrequncy = None
                    self._hostid = None
                    self._serialno = None
                    self._encodedserialno = None
                    return
            Holder.__name__ = "nshardware_Holder"
            self.pyclass = Holder

    class nshardwareList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nshardwareList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nshardware_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nshardware[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class nsevents_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "nsevents")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.nsevents_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="eventno", aname="_eventno", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="time", aname="_time", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="eventcode", aname="_eventcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="devid", aname="_devid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="devname", aname="_devname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="text", aname="_text", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="data0", aname="_data0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="data1", aname="_data1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="data2", aname="_data2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="data3", aname="_data3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._eventno = None
                    self._time = None
                    self._eventcode = None
                    self._devid = None
                    self._devname = None
                    self._text = None
                    self._data0 = None
                    self._data1 = None
                    self._data2 = None
                    self._data3 = None
                    return
            Holder.__name__ = "nsevents_Holder"
            self.pyclass = Holder

    class nseventsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "nseventsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.nsevents_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'nsevents[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class ntpsync_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ntpsync")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ntpsync_Def.schema
            TClist = [ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._state = None
                    return
            Holder.__name__ = "ntpsync_Holder"
            self.pyclass = Holder

    class ntpsyncList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "ntpsyncList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.ntpsync_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'ntpsync[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class ntpserver_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "ntpserver")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ntpserver_Def.schema
            TClist = [ZSI.TC.String(pname="serverip", aname="_serverip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servername", aname="_servername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="minpoll", aname="_minpoll", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxpoll", aname="_maxpoll", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serverip = None
                    self._servername = None
                    self._minpoll = None
                    self._maxpoll = None
                    return
            Holder.__name__ = "ntpserver_Holder"
            self.pyclass = Holder

    class ntpserverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "ntpserverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.ntpserver_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'ntpserver[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class policyexpression_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "policyexpression")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.policyexpression_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="pihits", aname="_pihits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type2", aname="_type2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientsecuritymessage", aname="_clientsecuritymessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    self._value = None
                    self._hits = None
                    self._pihits = None
                    self._type2 = None
                    self._clientsecuritymessage = None
                    self._description = None
                    return
            Holder.__name__ = "policyexpression_Holder"
            self.pyclass = Holder

    class policyexpressionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "policyexpressionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.policyexpression_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'policyexpression[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class policymap_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "policymap")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.policymap_Def.schema
            TClist = [ZSI.TC.String(pname="mappolicyname", aname="_mappolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sd", aname="_sd", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="su", aname="_su", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="td", aname="_td", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tu", aname="_tu", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="targetname", aname="_targetname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._mappolicyname = None
                    self._sd = None
                    self._su = None
                    self._td = None
                    self._tu = None
                    self._targetname = None
                    return
            Holder.__name__ = "policymap_Holder"
            self.pyclass = Holder

    class policymapList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "policymapList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.policymap_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'policymap[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class policypatclass_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "policypatclass")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.policypatclass_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="strinG", aname="_strinG", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="index", aname="_index", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._strinG = None
                    self._index = None
                    self._description = None
                    return
            Holder.__name__ = "policypatclass_Holder"
            self.pyclass = Holder

    class policypatclassList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "policypatclassList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.policypatclass_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'policypatclass[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class policypatset_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "policypatset")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.policypatset_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="strinG", aname="_strinG", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="index", aname="_index", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._strinG = None
                    self._index = None
                    self._description = None
                    return
            Holder.__name__ = "policypatset_Holder"
            self.pyclass = Holder

    class policypatsetList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "policypatsetList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.policypatset_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'policypatset[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class policyhttpcallout_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "policyhttpcallout")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.policyhttpcallout_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vserver", aname="_vserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returntype", aname="_returntype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="httpmethod", aname="_httpmethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostexpr", aname="_hostexpr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="urlstemexpr", aname="_urlstemexpr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="headers", aname="_headers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="parameters", aname="_parameters", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fullreqexpr", aname="_fullreqexpr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="resultexpr", aname="_resultexpr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="undefhits", aname="_undefhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="svrstate", aname="_svrstate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="undefreason", aname="_undefreason", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="recursivecallout", aname="_recursivecallout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._ipaddress = None
                    self._port = None
                    self._vserver = None
                    self._returntype = None
                    self._httpmethod = None
                    self._hostexpr = None
                    self._urlstemexpr = None
                    self._headers = None
                    self._parameters = None
                    self._fullreqexpr = None
                    self._resultexpr = None
                    self._hits = None
                    self._undefhits = None
                    self._svrstate = None
                    self._undefreason = None
                    self._recursivecallout = None
                    return
            Holder.__name__ = "policyhttpcallout_Holder"
            self.pyclass = Holder

    class policyhttpcalloutList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "policyhttpcalloutList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.policyhttpcallout_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'policyhttpcallout[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class pqbinding_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "pqbinding")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.pqbinding_Def.schema
            TClist = [ZSI.TC.String(pname="vservername", aname="_vservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="qdepth", aname="_qdepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="polqdepth", aname="_polqdepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._vservername = None
                    self._policyname = None
                    self._rule = None
                    self._priority = None
                    self._weight = None
                    self._qdepth = None
                    self._polqdepth = None
                    self._hits = None
                    return
            Holder.__name__ = "pqbinding_Holder"
            self.pyclass = Holder

    class pqbindingList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "pqbindingList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.pqbinding_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'pqbinding[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class pqpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "pqpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.pqpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="qdepth", aname="_qdepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="polqdepth", aname="_polqdepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._rule = None
                    self._priority = None
                    self._weight = None
                    self._qdepth = None
                    self._polqdepth = None
                    self._hits = None
                    return
            Holder.__name__ = "pqpolicy_Holder"
            self.pyclass = Holder

    class pqpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "pqpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.pqpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'pqpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class responderpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "responderpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.responderpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="undefaction", aname="_undefaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="undefhits", aname="_undefhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._actioN = None
                    self._undefaction = None
                    self._hits = None
                    self._undefhits = None
                    self._activepolicy = None
                    self._boundto = None
                    self._priority = None
                    return
            Holder.__name__ = "responderpolicy_Holder"
            self.pyclass = Holder

    class responderpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "responderpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.responderpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'responderpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class responderaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "responderaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.responderaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bypasssafetycheck", aname="_bypasssafetycheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="referencecount", aname="_referencecount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="undefhits", aname="_undefhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    self._target = None
                    self._bypasssafetycheck = None
                    self._hits = None
                    self._referencecount = None
                    self._undefhits = None
                    return
            Holder.__name__ = "responderaction_Holder"
            self.pyclass = Holder

    class responderactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "responderactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.responderaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'responderaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class responderglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "responderglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.responderglobal_Def.schema
            TClist = [ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flowtype", aname="_flowtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="numpol", aname="_numpol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._policyname = None
                    self._priority = None
                    self._gotopriorityexpression = None
                    self._labeltype = None
                    self._labelname = None
                    self._flowtype = None
                    self._numpol = None
                    return
            Holder.__name__ = "responderglobal_Holder"
            self.pyclass = Holder

    class responderglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "responderglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.responderglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'responderglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class responderparam_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "responderparam")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.responderparam_Def.schema
            TClist = [ZSI.TC.String(pname="undefaction", aname="_undefaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._undefaction = None
                    return
            Holder.__name__ = "responderparam_Holder"
            self.pyclass = Holder

    class responderparamList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "responderparamList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.responderparam_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'responderparam[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class responderpolicylabel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "responderpolicylabel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.responderpolicylabel_Def.schema
            TClist = [ZSI.TC.String(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="numpol", aname="_numpol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labelname2", aname="_labelname2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._labelname = None
                    self._numpol = None
                    self._hits = None
                    self._policyname = None
                    self._priority = None
                    self._gotopriorityexpression = None
                    self._labeltype = None
                    self._labelname2 = None
                    return
            Holder.__name__ = "responderpolicylabel_Holder"
            self.pyclass = Holder

    class responderpolicylabelList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "responderpolicylabelList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.responderpolicylabel_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'responderpolicylabel[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class rewritepolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "rewritepolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.rewritepolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="undefaction", aname="_undefaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="undefhits", aname="_undefhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._actioN = None
                    self._undefaction = None
                    self._hits = None
                    self._undefhits = None
                    self._activepolicy = None
                    self._boundto = None
                    self._priority = None
                    self._gotopriorityexpression = None
                    self._labeltype = None
                    self._labelname = None
                    self._description = None
                    return
            Holder.__name__ = "rewritepolicy_Holder"
            self.pyclass = Holder

    class rewritepolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "rewritepolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.rewritepolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'rewritepolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class rewriteaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "rewriteaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.rewriteaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="stringbuilderexpr", aname="_stringbuilderexpr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pattern", aname="_pattern", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bypasssafetycheck", aname="_bypasssafetycheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="undefhits", aname="_undefhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="referencecount", aname="_referencecount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    self._target = None
                    self._stringbuilderexpr = None
                    self._pattern = None
                    self._bypasssafetycheck = None
                    self._hits = None
                    self._undefhits = None
                    self._referencecount = None
                    self._description = None
                    return
            Holder.__name__ = "rewriteaction_Holder"
            self.pyclass = Holder

    class rewriteactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "rewriteactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.rewriteaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'rewriteaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class rewriteglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "rewriteglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.rewriteglobal_Def.schema
            TClist = [ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="numpol", aname="_numpol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flowtype", aname="_flowtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._policyname = None
                    self._priority = None
                    self._gotopriorityexpression = None
                    self._labeltype = None
                    self._labelname = None
                    self._numpol = None
                    self._flowtype = None
                    return
            Holder.__name__ = "rewriteglobal_Holder"
            self.pyclass = Holder

    class rewriteglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "rewriteglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.rewriteglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'rewriteglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class rewriteparam_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "rewriteparam")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.rewriteparam_Def.schema
            TClist = [ZSI.TC.String(pname="undefaction", aname="_undefaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._undefaction = None
                    return
            Holder.__name__ = "rewriteparam_Holder"
            self.pyclass = Holder

    class rewriteparamList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "rewriteparamList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.rewriteparam_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'rewriteparam[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class rewritepolicylabel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "rewritepolicylabel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.rewritepolicylabel_Def.schema
            TClist = [ZSI.TC.String(pname="labelname", aname="_labelname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="transform", aname="_transform", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="numpol", aname="_numpol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labeltype", aname="_labeltype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="labelname2", aname="_labelname2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flowtype", aname="_flowtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._labelname = None
                    self._transform = None
                    self._numpol = None
                    self._hits = None
                    self._policyname = None
                    self._priority = None
                    self._gotopriorityexpression = None
                    self._labeltype = None
                    self._labelname2 = None
                    self._flowtype = None
                    self._description = None
                    return
            Holder.__name__ = "rewritepolicylabel_Holder"
            self.pyclass = Holder

    class rewritepolicylabelList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "rewritepolicylabelList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.rewritepolicylabel_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'rewritepolicylabel[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class routerospf_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "routerospf")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.routerospf_Def.schema
            TClist = [ZSI.TC.String(pname="ospfoptions", aname="_ospfoptions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="network", aname="_network", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ospfoptions = None
                    self._network = None
                    self._netmask = None
                    return
            Holder.__name__ = "routerospf_Holder"
            self.pyclass = Holder

    class routerospfList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "routerospfList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.routerospf_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'routerospf[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class routerrip_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "routerrip")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.routerrip_Def.schema
            TClist = [ZSI.TC.String(pname="ripoptions", aname="_ripoptions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="network", aname="_network", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ripoptions = None
                    self._network = None
                    self._netmask = None
                    return
            Holder.__name__ = "routerrip_Holder"
            self.pyclass = Holder

    class routerripList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "routerripList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.routerrip_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'routerrip[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class snmpoid_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmpoid")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.snmpoid_Def.schema
            TClist = [ZSI.TC.String(pname="entitytype", aname="_entitytype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snmpoid", aname="_snmpoid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entitytype = None
                    self._name = None
                    self._snmpoid = None
                    return
            Holder.__name__ = "snmpoid_Holder"
            self.pyclass = Holder

    class snmpoidList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "snmpoidList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.snmpoid_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'snmpoid[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class snmpalarm_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmpalarm")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.snmpalarm_Def.schema
            TClist = [ZSI.TC.String(pname="trapname", aname="_trapname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="thresholdvalue", aname="_thresholdvalue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="normalvalue", aname="_normalvalue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="time", aname="_time", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="severity", aname="_severity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logging", aname="_logging", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._trapname = None
                    self._thresholdvalue = None
                    self._normalvalue = None
                    self._time = None
                    self._state = None
                    self._severity = None
                    self._logging = None
                    return
            Holder.__name__ = "snmpalarm_Holder"
            self.pyclass = Holder

    class snmpalarmList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "snmpalarmList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.snmpalarm_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'snmpalarm[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class snmpcommunity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmpcommunity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.snmpcommunity_Def.schema
            TClist = [ZSI.TC.String(pname="communityname", aname="_communityname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="permissions", aname="_permissions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._communityname = None
                    self._permissions = None
                    return
            Holder.__name__ = "snmpcommunity_Holder"
            self.pyclass = Holder

    class snmpcommunityList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "snmpcommunityList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.snmpcommunity_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'snmpcommunity[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class snmpmanager_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmpmanager")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.snmpmanager_Def.schema
            TClist = [ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipaddress = None
                    self._netmask = None
                    return
            Holder.__name__ = "snmpmanager_Holder"
            self.pyclass = Holder

    class snmpmanagerList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "snmpmanagerList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.snmpmanager_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'snmpmanager[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class snmpmib_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmpmib")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.snmpmib_Def.schema
            TClist = [ZSI.TC.String(pname="contact", aname="_contact", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sysdesc", aname="_sysdesc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sysuptime", aname="_sysuptime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sysservices", aname="_sysservices", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sysoid", aname="_sysoid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="customid", aname="_customid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contact = None
                    self._name = None
                    self._location = None
                    self._sysdesc = None
                    self._sysuptime = None
                    self._sysservices = None
                    self._sysoid = None
                    self._customid = None
                    return
            Holder.__name__ = "snmpmib_Holder"
            self.pyclass = Holder

    class snmpmibList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "snmpmibList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.snmpmib_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'snmpmib[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class snmptrap_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmptrap")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.snmptrap_Def.schema
            TClist = [ZSI.TC.String(pname="trapclass", aname="_trapclass", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="trapdestination", aname="_trapdestination", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="version", aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="communityname", aname="_communityname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcip", aname="_srcip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="severity", aname="_severity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._trapclass = None
                    self._trapdestination = None
                    self._destport = None
                    self._version = None
                    self._communityname = None
                    self._srcip = None
                    self._severity = None
                    return
            Holder.__name__ = "snmptrap_Holder"
            self.pyclass = Holder

    class snmptrapList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "snmptrapList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.snmptrap_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'snmptrap[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class snmpgroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmpgroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.snmpgroup_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="securitylevel", aname="_securitylevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="readviewname", aname="_readviewname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="storagetype", aname="_storagetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._securitylevel = None
                    self._readviewname = None
                    self._storagetype = None
                    self._status = None
                    return
            Holder.__name__ = "snmpgroup_Holder"
            self.pyclass = Holder

    class snmpgroupList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "snmpgroupList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.snmpgroup_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'snmpgroup[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class snmpview_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmpview")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.snmpview_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subtree", aname="_subtree", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="storagetype", aname="_storagetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._subtree = None
                    self._type = None
                    self._storagetype = None
                    self._status = None
                    return
            Holder.__name__ = "snmpview_Holder"
            self.pyclass = Holder

    class snmpviewList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "snmpviewList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.snmpview_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'snmpview[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class snmpuser_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmpuser")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.snmpuser_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="group", aname="_group", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authtype", aname="_authtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="privtype", aname="_privtype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="engineid", aname="_engineid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="storagetype", aname="_storagetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._group = None
                    self._authtype = None
                    self._privtype = None
                    self._engineid = None
                    self._storagetype = None
                    self._status = None
                    return
            Holder.__name__ = "snmpuser_Holder"
            self.pyclass = Holder

    class snmpuserList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "snmpuserList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.snmpuser_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'snmpuser[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class snmpengineid_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "snmpengineid")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.snmpengineid_Def.schema
            TClist = [ZSI.TC.String(pname="engineid", aname="_engineid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._engineid = None
                    return
            Holder.__name__ = "snmpengineid_Holder"
            self.pyclass = Holder

    class snmpengineidList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "snmpengineidList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.snmpengineid_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'snmpengineid[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class scparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "scparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.scparameter_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="sessionlife", aname="_sessionlife", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vsr", aname="_vsr", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sessionlife = None
                    self._vsr = None
                    return
            Holder.__name__ = "scparameter_Holder"
            self.pyclass = Holder

    class scparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "scparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.scparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'scparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class scpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "scpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.scpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="delay", aname="_delay", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxconn", aname="_maxconn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="altcontentsvcname", aname="_altcontentsvcname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="altcontentpath", aname="_altcontentpath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._url = None
                    self._rule = None
                    self._delay = None
                    self._maxconn = None
                    self._actioN = None
                    self._altcontentsvcname = None
                    self._altcontentpath = None
                    return
            Holder.__name__ = "scpolicy_Holder"
            self.pyclass = Holder

    class scpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "scpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.scpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'scpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslcertlink_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslcertlink")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslcertlink_Def.schema
            TClist = [ZSI.TC.String(pname="certkeyname", aname="_certkeyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="linkcertkeyname", aname="_linkcertkeyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._certkeyname = None
                    self._linkcertkeyname = None
                    return
            Holder.__name__ = "sslcertlink_Holder"
            self.pyclass = Holder

    class sslcertlinkList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslcertlinkList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslcertlink_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslcertlink[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslcipher_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslcipher")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslcipher_Def.schema
            TClist = [ZSI.TC.String(pname="cipheraliasname", aname="_cipheraliasname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ciphergroupname", aname="_ciphergroupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ciphername", aname="_ciphername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cipheraliasname = None
                    self._ciphergroupname = None
                    self._description = None
                    self._ciphername = None
                    return
            Holder.__name__ = "sslcipher_Holder"
            self.pyclass = Holder

    class sslcipherList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslcipherList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslcipher_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslcipher[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslcertkey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslcertkey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslcertkey_Def.schema
            TClist = [ZSI.TC.String(pname="certkeyname", aname="_certkeyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cert", aname="_cert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="inform", aname="_inform", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="signaturealg", aname="_signaturealg", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serial", aname="_serial", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="issuer", aname="_issuer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcertnotbefore", aname="_clientcertnotbefore", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcertnotafter", aname="_clientcertnotafter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="daystoexpiration", aname="_daystoexpiration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subject", aname="_subject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="publickey", aname="_publickey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="publickeysize", aname="_publickeysize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="version", aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fipskey", aname="_fipskey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="passcrypt", aname="_passcrypt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="data", aname="_data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="servername", aname="_servername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="expirymonitor", aname="_expirymonitor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="notificationperiod", aname="_notificationperiod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="service", aname="_service", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="crldistributionpoint", aname="_crldistributionpoint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._certkeyname = None
                    self._cert = None
                    self._key = None
                    self._inform = None
                    self._signaturealg = None
                    self._serial = None
                    self._issuer = None
                    self._clientcertnotbefore = None
                    self._clientcertnotafter = None
                    self._daystoexpiration = None
                    self._subject = None
                    self._publickey = None
                    self._publickeysize = None
                    self._version = None
                    self._status = None
                    self._fipskey = None
                    self._passcrypt = None
                    self._data = None
                    self._servername = None
                    self._servicename = None
                    self._expirymonitor = None
                    self._notificationperiod = None
                    self._service = None
                    self._crldistributionpoint = None
                    return
            Holder.__name__ = "sslcertkey_Holder"
            self.pyclass = Holder

    class sslcertkeyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslcertkeyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslcertkey_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslcertkey[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslparameter_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="quantumsize", aname="_quantumsize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="crlmemorysizemb", aname="_crlmemorysizemb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="strictcachecks", aname="_strictcachecks", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ssltriggertimeout", aname="_ssltriggertimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sendclosenotify", aname="_sendclosenotify", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="encrypttriggerpktcount", aname="_encrypttriggerpktcount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="denysslreneg", aname="_denysslreneg", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._quantumsize = None
                    self._crlmemorysizemb = None
                    self._strictcachecks = None
                    self._ssltriggertimeout = None
                    self._sendclosenotify = None
                    self._encrypttriggerpktcount = None
                    self._denysslreneg = None
                    return
            Holder.__name__ = "sslparameter_Holder"
            self.pyclass = Holder

    class sslparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslcrl_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslcrl")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslcrl_Def.schema
            TClist = [ZSI.TC.String(pname="crlname", aname="_crlname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crlpath", aname="_crlpath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="inform", aname="_inform", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cacert", aname="_cacert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="refresh", aname="_refresh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="scope", aname="_scope", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="server", aname="_server", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="url", aname="_url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="method", aname="_method", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="basedn", aname="_basedn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="interval", aname="_interval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="day", aname="_day", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="time", aname="_time", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="binddn", aname="_binddn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="flags", aname="_flags", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="lastupdatetime", aname="_lastupdatetime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="version", aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="signaturealgo", aname="_signaturealgo", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="issuer", aname="_issuer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastupdate", aname="_lastupdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nextupdate", aname="_nextupdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="date", aname="_date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="number", aname="_number", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="binary", aname="_binary", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="daystoexpiration", aname="_daystoexpiration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._crlname = None
                    self._crlpath = None
                    self._inform = None
                    self._cacert = None
                    self._refresh = None
                    self._scope = None
                    self._server = None
                    self._port = None
                    self._url = None
                    self._method = None
                    self._basedn = None
                    self._interval = None
                    self._day = None
                    self._time = None
                    self._binddn = None
                    self._password = None
                    self._flags = None
                    self._lastupdatetime = None
                    self._version = None
                    self._signaturealgo = None
                    self._issuer = None
                    self._lastupdate = None
                    self._nextupdate = None
                    self._date = None
                    self._number = None
                    self._binary = None
                    self._daystoexpiration = None
                    return
            Holder.__name__ = "sslcrl_Holder"
            self.pyclass = Holder

    class sslcrlList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslcrlList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslcrl_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslcrl[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslfips_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslfips")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslfips_Def.schema
            TClist = [ZSI.TC.String(pname="inithsm", aname="_inithsm", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sopassword", aname="_sopassword", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userpassword", aname="_userpassword", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="oldsopassword", aname="_oldsopassword", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hsmlabel", aname="_hsmlabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="serial", aname="_serial", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="majorversion", aname="_majorversion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="minorversion", aname="_minorversion", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="flashmemorytotal", aname="_flashmemorytotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="flashmemoryfree", aname="_flashmemoryfree", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="sramtotal", aname="_sramtotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="sramfree", aname="_sramfree", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._inithsm = None
                    self._sopassword = None
                    self._userpassword = None
                    self._oldsopassword = None
                    self._hsmlabel = None
                    self._serial = None
                    self._majorversion = None
                    self._minorversion = None
                    self._flashmemorytotal = None
                    self._flashmemoryfree = None
                    self._sramtotal = None
                    self._sramfree = None
                    self._status = None
                    return
            Holder.__name__ = "sslfips_Holder"
            self.pyclass = Holder

    class sslfipsList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslfipsList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslfips_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslfips[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslfipskey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslfipskey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslfipskey_Def.schema
            TClist = [ZSI.TC.String(pname="fipskeyname", aname="_fipskeyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="modulus", aname="_modulus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="exponent", aname="_exponent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="size", aname="_size", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fipskeyname = None
                    self._modulus = None
                    self._exponent = None
                    self._size = None
                    return
            Holder.__name__ = "sslfipskey_Holder"
            self.pyclass = Holder

    class sslfipskeyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslfipskeyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslfipskey_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslfipskey[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslservice_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslservice")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslservice_Def.schema
            TClist = [ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cipherdetails", aname="_cipherdetails", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crlcheck", aname="_crlcheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dh", aname="_dh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dhfile", aname="_dhfile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="dhcount", aname="_dhcount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ersa", aname="_ersa", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ersacount", aname="_ersacount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessreuse", aname="_sessreuse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipherredirect", aname="_cipherredirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipherurl", aname="_cipherurl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sslv2redirect", aname="_sslv2redirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sslv2url", aname="_sslv2url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientauth", aname="_clientauth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcert", aname="_clientcert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sslredirect", aname="_sslredirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirectportrewrite", aname="_redirectportrewrite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nonfipsciphers", aname="_nonfipsciphers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssl2", aname="_ssl2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssl3", aname="_ssl3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tls1", aname="_tls1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serverauth", aname="_serverauth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cipheraliasname", aname="_cipheraliasname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="certkeyname", aname="_certkeyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cleartextport", aname="_cleartextport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="polinherit", aname="_polinherit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cert", aname="_cert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cacert", aname="_cacert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._servicename = None
                    self._cipherdetails = None
                    self._crlcheck = None
                    self._dh = None
                    self._dhfile = None
                    self._dhcount = None
                    self._ersa = None
                    self._ersacount = None
                    self._sessreuse = None
                    self._sesstimeout = None
                    self._cipherredirect = None
                    self._cipherurl = None
                    self._sslv2redirect = None
                    self._sslv2url = None
                    self._clientauth = None
                    self._clientcert = None
                    self._sslredirect = None
                    self._redirectportrewrite = None
                    self._nonfipsciphers = None
                    self._ssl2 = None
                    self._ssl3 = None
                    self._tls1 = None
                    self._serverauth = None
                    self._cipheraliasname = None
                    self._description = None
                    self._certkeyname = None
                    self._policyname = None
                    self._cleartextport = None
                    self._priority = None
                    self._polinherit = None
                    self._cert = None
                    self._cacert = None
                    return
            Holder.__name__ = "sslservice_Holder"
            self.pyclass = Holder

    class sslserviceList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslserviceList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslservice_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslservice[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslservicegroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslservicegroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslservicegroup_Def.schema
            TClist = [ZSI.TC.String(pname="servicegroupname", aname="_servicegroupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cipherdetails", aname="_cipherdetails", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dh", aname="_dh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dhfile", aname="_dhfile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="dhcount", aname="_dhcount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ersa", aname="_ersa", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ersacount", aname="_ersacount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessreuse", aname="_sessreuse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipherredirect", aname="_cipherredirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipherurl", aname="_cipherurl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sslv2redirect", aname="_sslv2redirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sslv2url", aname="_sslv2url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientauth", aname="_clientauth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcert", aname="_clientcert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sslredirect", aname="_sslredirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirectportrewrite", aname="_redirectportrewrite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nonfipsciphers", aname="_nonfipsciphers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssl2", aname="_ssl2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssl3", aname="_ssl3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tls1", aname="_tls1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serverauth", aname="_serverauth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cipheraliasname", aname="_cipheraliasname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="certkeyname", aname="_certkeyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cleartextport", aname="_cleartextport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cert", aname="_cert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cacert", aname="_cacert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._servicegroupname = None
                    self._cipherdetails = None
                    self._dh = None
                    self._dhfile = None
                    self._dhcount = None
                    self._ersa = None
                    self._ersacount = None
                    self._sessreuse = None
                    self._sesstimeout = None
                    self._cipherredirect = None
                    self._cipherurl = None
                    self._sslv2redirect = None
                    self._sslv2url = None
                    self._clientauth = None
                    self._clientcert = None
                    self._sslredirect = None
                    self._redirectportrewrite = None
                    self._nonfipsciphers = None
                    self._ssl2 = None
                    self._ssl3 = None
                    self._tls1 = None
                    self._serverauth = None
                    self._cipheraliasname = None
                    self._description = None
                    self._certkeyname = None
                    self._cleartextport = None
                    self._servicename = None
                    self._cert = None
                    self._cacert = None
                    return
            Holder.__name__ = "sslservicegroup_Holder"
            self.pyclass = Holder

    class sslservicegroupList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslservicegroupList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslservicegroup_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslservicegroup[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslvserver_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslvserver")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslvserver_Def.schema
            TClist = [ZSI.TC.String(pname="vservername", aname="_vservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cipherdetails", aname="_cipherdetails", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cleartextport", aname="_cleartextport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dh", aname="_dh", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dhfile", aname="_dhfile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="dhcount", aname="_dhcount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ersa", aname="_ersa", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ersacount", aname="_ersacount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessreuse", aname="_sessreuse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipherredirect", aname="_cipherredirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="crlcheck", aname="_crlcheck", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipherurl", aname="_cipherurl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sslv2redirect", aname="_sslv2redirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sslv2url", aname="_sslv2url", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientauth", aname="_clientauth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcert", aname="_clientcert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sslredirect", aname="_sslredirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="polinherit", aname="_polinherit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirectportrewrite", aname="_redirectportrewrite", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nonfipsciphers", aname="_nonfipsciphers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssl2", aname="_ssl2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssl3", aname="_ssl3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tls1", aname="_tls1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cipheraliasname", aname="_cipheraliasname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="service", aname="_service", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="certkeyname", aname="_certkeyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cert", aname="_cert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cacert", aname="_cacert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._vservername = None
                    self._cipherdetails = None
                    self._cleartextport = None
                    self._dh = None
                    self._dhfile = None
                    self._dhcount = None
                    self._ersa = None
                    self._ersacount = None
                    self._sessreuse = None
                    self._sesstimeout = None
                    self._cipherredirect = None
                    self._crlcheck = None
                    self._cipherurl = None
                    self._sslv2redirect = None
                    self._sslv2url = None
                    self._clientauth = None
                    self._clientcert = None
                    self._sslredirect = None
                    self._priority = None
                    self._polinherit = None
                    self._redirectportrewrite = None
                    self._nonfipsciphers = None
                    self._ssl2 = None
                    self._ssl3 = None
                    self._tls1 = None
                    self._cipheraliasname = None
                    self._description = None
                    self._service = None
                    self._certkeyname = None
                    self._policyname = None
                    self._servicename = None
                    self._cert = None
                    self._cacert = None
                    return
            Holder.__name__ = "sslvserver_Holder"
            self.pyclass = Holder

    class sslvserverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslvserverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslvserver_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslvserver[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslwrapkey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslwrapkey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslwrapkey_Def.schema
            TClist = [ZSI.TC.String(pname="wrapkeyname", aname="_wrapkeyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._wrapkeyname = None
                    return
            Holder.__name__ = "sslwrapkey_Holder"
            self.pyclass = Holder

    class sslwrapkeyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslwrapkeyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslwrapkey_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslwrapkey[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientauth", aname="_clientauth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcert", aname="_clientcert", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="certheader", aname="_certheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcertserialnumber", aname="_clientcertserialnumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="certserialheader", aname="_certserialheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcertsubject", aname="_clientcertsubject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="certsubjectheader", aname="_certsubjectheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcerthash", aname="_clientcerthash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="certhashheader", aname="_certhashheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcertissuer", aname="_clientcertissuer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="certissuerheader", aname="_certissuerheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionid", aname="_sessionid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionidheader", aname="_sessionidheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipher", aname="_cipher", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cipherheader", aname="_cipherheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="owasupport", aname="_owasupport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcertnotbefore", aname="_clientcertnotbefore", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="certnotbeforeheader", aname="_certnotbeforeheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcertnotafter", aname="_clientcertnotafter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="certnotafterheader", aname="_certnotafterheader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._clientauth = None
                    self._clientcert = None
                    self._certheader = None
                    self._clientcertserialnumber = None
                    self._certserialheader = None
                    self._clientcertsubject = None
                    self._certsubjectheader = None
                    self._clientcerthash = None
                    self._certhashheader = None
                    self._clientcertissuer = None
                    self._certissuerheader = None
                    self._sessionid = None
                    self._sessionidheader = None
                    self._cipher = None
                    self._cipherheader = None
                    self._owasupport = None
                    self._clientcertnotbefore = None
                    self._certnotbeforeheader = None
                    self._clientcertnotafter = None
                    self._certnotafterheader = None
                    return
            Holder.__name__ = "sslaction_Holder"
            self.pyclass = Holder

    class sslactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._actioN = None
                    self._hits = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "sslpolicy_Holder"
            self.pyclass = Holder

    class sslpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class sslglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "sslglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.sslglobal_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._priority = None
                    return
            Holder.__name__ = "sslglobal_Holder"
            self.pyclass = Holder

    class sslglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "sslglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.sslglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'sslglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systemsession_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systemsession")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systemsession_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="sid", aname="_sid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logintime", aname="_logintime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastactivitytime", aname="_lastactivitytime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="expirytime", aname="_expirytime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="numofconnections", aname="_numofconnections", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="currentconn", aname="_currentconn", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sid = None
                    self._username = None
                    self._logintime = None
                    self._lastactivitytime = None
                    self._expirytime = None
                    self._numofconnections = None
                    self._currentconn = None
                    return
            Holder.__name__ = "systemsession_Holder"
            self.pyclass = Holder

    class systemsessionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systemsessionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systemsession_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systemsession[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systementity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systementity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systementity_Def.schema
            TClist = [ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datasource", aname="_datasource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="core", aname="_core", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="response", aname="_response", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._datasource = None
                    self._core = None
                    self._response = None
                    return
            Holder.__name__ = "systementity_Holder"
            self.pyclass = Holder

    class systementityList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systementityList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systementity_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systementity[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systemglobaldata_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systemglobaldata")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systemglobaldata_Def.schema
            TClist = [ZSI.TC.String(pname="counters", aname="_counters", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="countergroup", aname="_countergroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="starttime", aname="_starttime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="endtime", aname="_endtime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="last", aname="_last", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="unit", aname="_unit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datasource", aname="_datasource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="core", aname="_core", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="response", aname="_response", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="startupdate", aname="_startupdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="lastupdate", aname="_lastupdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._counters = None
                    self._countergroup = None
                    self._starttime = None
                    self._endtime = None
                    self._last = None
                    self._unit = None
                    self._datasource = None
                    self._core = None
                    self._response = None
                    self._startupdate = None
                    self._lastupdate = None
                    return
            Holder.__name__ = "systemglobaldata_Holder"
            self.pyclass = Holder

    class systemglobaldataList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systemglobaldataList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systemglobaldata_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systemglobaldata[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systementitydata_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systementitydata")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systementitydata_Def.schema
            TClist = [ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="counters", aname="_counters", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="starttime", aname="_starttime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="endtime", aname="_endtime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="last", aname="_last", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="unit", aname="_unit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datasource", aname="_datasource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="core", aname="_core", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="response", aname="_response", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="startupdate", aname="_startupdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="lastupdate", aname="_lastupdate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._name = None
                    self._counters = None
                    self._starttime = None
                    self._endtime = None
                    self._last = None
                    self._unit = None
                    self._datasource = None
                    self._core = None
                    self._response = None
                    self._startupdate = None
                    self._lastupdate = None
                    return
            Holder.__name__ = "systementitydata_Holder"
            self.pyclass = Holder

    class systementitydataList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systementitydataList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systementitydata_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systementitydata[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systemcounters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systemcounters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systemcounters_Def.schema
            TClist = [ZSI.TC.String(pname="countergroup", aname="_countergroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datasource", aname="_datasource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="response", aname="_response", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._countergroup = None
                    self._datasource = None
                    self._response = None
                    return
            Holder.__name__ = "systemcounters_Holder"
            self.pyclass = Holder

    class systemcountersList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systemcountersList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systemcounters_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systemcounters[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systemcountergroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systemcountergroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systemcountergroup_Def.schema
            TClist = [ZSI.TC.String(pname="datasource", aname="_datasource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="response", aname="_response", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._datasource = None
                    self._response = None
                    return
            Holder.__name__ = "systemcountergroup_Holder"
            self.pyclass = Holder

    class systemcountergroupList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systemcountergroupList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systemcountergroup_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systemcountergroup[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systemcmdpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systemcmdpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systemcmdpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cmdspec", aname="_cmdspec", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._actioN = None
                    self._cmdspec = None
                    return
            Holder.__name__ = "systemcmdpolicy_Holder"
            self.pyclass = Holder

    class systemcmdpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systemcmdpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systemcmdpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systemcmdpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systemuser_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systemuser")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systemuser_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="groupname", aname="_groupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._groupname = None
                    self._policyname = None
                    self._priority = None
                    return
            Holder.__name__ = "systemuser_Holder"
            self.pyclass = Holder

    class systemuserList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systemuserList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systemuser_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systemuser[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systemcore_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systemcore")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systemcore_Def.schema
            TClist = [ZSI.TC.String(pname="datasource", aname="_datasource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="response", aname="_response", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._datasource = None
                    self._response = None
                    return
            Holder.__name__ = "systemcore_Holder"
            self.pyclass = Holder

    class systemcoreList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systemcoreList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systemcore_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systemcore[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systemdatasource_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systemdatasource")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systemdatasource_Def.schema
            TClist = [ZSI.TC.String(pname="datasource", aname="_datasource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="response", aname="_response", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._datasource = None
                    self._response = None
                    return
            Holder.__name__ = "systemdatasource_Holder"
            self.pyclass = Holder

    class systemdatasourceList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systemdatasourceList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systemdatasource_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systemdatasource[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systemgroup_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systemgroup")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systemgroup_Def.schema
            TClist = [ZSI.TC.String(pname="groupname", aname="_groupname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._groupname = None
                    self._username = None
                    self._policyname = None
                    self._priority = None
                    return
            Holder.__name__ = "systemgroup_Holder"
            self.pyclass = Holder

    class systemgroupList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systemgroupList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systemgroup_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systemgroup[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systemglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systemglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systemglobal_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._priority = None
                    return
            Holder.__name__ = "systemglobal_Holder"
            self.pyclass = Holder

    class systemglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systemglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systemglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systemglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class systemcollectionparam_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "systemcollectionparam")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.systemcollectionparam_Def.schema
            TClist = [ZSI.TC.String(pname="communityname", aname="_communityname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="datapath", aname="_datapath", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._communityname = None
                    self._datapath = None
                    return
            Holder.__name__ = "systemcollectionparam_Holder"
            self.pyclass = Holder

    class systemcollectionparamList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "systemcollectionparamList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.systemcollectionparam_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'systemcollectionparam[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class tmsessionpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "tmsessionpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tmsessionpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._actioN = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "tmsessionpolicy_Holder"
            self.pyclass = Holder

    class tmsessionpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "tmsessionpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.tmsessionpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'tmsessionpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class tmsessionaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "tmsessionaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tmsessionaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultauthorizationaction", aname="_defaultauthorizationaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sso", aname="_sso", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssocredential", aname="_ssocredential", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._sesstimeout = None
                    self._defaultauthorizationaction = None
                    self._sso = None
                    self._ssocredential = None
                    return
            Holder.__name__ = "tmsessionaction_Holder"
            self.pyclass = Holder

    class tmsessionactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "tmsessionactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.tmsessionaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'tmsessionaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class tmglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "tmglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tmglobal_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="auditpolicyname", aname="_auditpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="auditpolicypriority", aname="_auditpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="sessionpolicyname", aname="_sessionpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="sessionpolicypriority", aname="_sessionpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._priority = None
                    self._type = None
                    self._auditpolicyname = None
                    self._auditpolicypriority = None
                    self._sessionpolicyname = None
                    self._sessionpolicypriority = None
                    return
            Holder.__name__ = "tmglobal_Holder"
            self.pyclass = Holder

    class tmglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "tmglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.tmglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'tmglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class tmsessionparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "tmsessionparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tmsessionparameter_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultauthorizationaction", aname="_defaultauthorizationaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sso", aname="_sso", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssocredential", aname="_ssocredential", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._sesstimeout = None
                    self._defaultauthorizationaction = None
                    self._sso = None
                    self._ssocredential = None
                    return
            Holder.__name__ = "tmsessionparameter_Holder"
            self.pyclass = Holder

    class tmsessionparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "tmsessionparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.tmsessionparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'tmsessionparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class transformprofile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "transformprofile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.transformprofile_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="regexforfindingurlinjavascript", aname="_regexforfindingurlinjavascript", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="regexforfindingurlincss", aname="_regexforfindingurlincss", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="regexforfindingurlinxcomponent", aname="_regexforfindingurlinxcomponent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="regexforfindingurlinxml", aname="_regexforfindingurlinxml", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="additionalreqheaderslist", aname="_additionalreqheaderslist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="additionalrespheaderslist", aname="_additionalrespheaderslist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="onlytransformabsurlinbody", aname="_onlytransformabsurlinbody", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._type = None
                    self._regexforfindingurlinjavascript = None
                    self._regexforfindingurlincss = None
                    self._regexforfindingurlinxcomponent = None
                    self._regexforfindingurlinxml = None
                    self._additionalreqheaderslist = None
                    self._additionalrespheaderslist = None
                    self._onlytransformabsurlinbody = None
                    self._comment = None
                    self._priority = None
                    self._state = None
                    return
            Holder.__name__ = "transformprofile_Holder"
            self.pyclass = Holder

    class transformprofileList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "transformprofileList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.transformprofile_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'transformprofile[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class transformaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "transformaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.transformaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="profilename", aname="_profilename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="requrlfrom", aname="_requrlfrom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="requrlinto", aname="_requrlinto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="resurlfrom", aname="_resurlfrom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="resurlinto", aname="_resurlinto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cookiedomaininto", aname="_cookiedomaininto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="continuematching", aname="_continuematching", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="comment", aname="_comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._profilename = None
                    self._priority = None
                    self._requrlfrom = None
                    self._requrlinto = None
                    self._resurlfrom = None
                    self._resurlinto = None
                    self._cookiedomaininto = None
                    self._continuematching = None
                    self._state = None
                    self._comment = None
                    return
            Holder.__name__ = "transformaction_Holder"
            self.pyclass = Holder

    class transformactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "transformactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.transformaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'transformaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class transformpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "transformpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.transformpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="profilename", aname="_profilename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._profilename = None
                    self._priority = None
                    self._hits = None
                    return
            Holder.__name__ = "transformpolicy_Holder"
            self.pyclass = Holder

    class transformpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "transformpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.transformpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'transformpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class transformglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "transformglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.transformglobal_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._priority = None
                    return
            Holder.__name__ = "transformglobal_Holder"
            self.pyclass = Holder

    class transformglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "transformglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.transformglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'transformglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class tunneltrafficpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "tunneltrafficpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tunneltrafficpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="txbytes", aname="_txbytes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="rxbytes", aname="_rxbytes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="clientttlb", aname="_clientttlb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="clienttransactions", aname="_clienttransactions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="serverttlb", aname="_serverttlb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="servertransactions", aname="_servertransactions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._actioN = None
                    self._hits = None
                    self._txbytes = None
                    self._rxbytes = None
                    self._clientttlb = None
                    self._clienttransactions = None
                    self._serverttlb = None
                    self._servertransactions = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "tunneltrafficpolicy_Holder"
            self.pyclass = Holder

    class tunneltrafficpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "tunneltrafficpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.tunneltrafficpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'tunneltrafficpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class tunnelglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "tunnelglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.tunnelglobal_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._priority = None
                    self._state = None
                    return
            Holder.__name__ = "tunnelglobal_Holder"
            self.pyclass = Holder

    class tunnelglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "tunnelglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.tunnelglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'tunnelglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class techsupport_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "techsupport")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.techsupport_Def.schema
            TClist = [ZSI.TC.String(pname="filename", aname="_filename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servername", aname="_servername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filename = None
                    self._servername = None
                    return
            Holder.__name__ = "techsupport_Holder"
            self.pyclass = Holder

    class techsupportList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "techsupportList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.techsupport_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'techsupport[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpnvserver_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnvserver")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpnvserver_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress2", aname="_ipaddress2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="port", aname="_port", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="range", aname="_range", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicetype", aname="_servicetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachetype", aname="_cachetype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirect", aname="_redirect", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="precedence", aname="_precedence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="redirecturl", aname="_redirecturl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authentication", aname="_authentication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxaaausers", aname="_maxaaausers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="curaaausers", aname="_curaaausers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="servicename", aname="_servicename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="weight", aname="_weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cachevserver", aname="_cachevserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="backupvserver", aname="_backupvserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clttimeout", aname="_clttimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="somethod", aname="_somethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sothreshold", aname="_sothreshold", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sopersistence", aname="_sopersistence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sopersistencetimeout", aname="_sopersistencetimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="intranetapplication", aname="_intranetapplication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="nexthopserver", aname="_nexthopserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="urlname", aname="_urlname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="intranetip", aname="_intranetip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="staserver", aname="_staserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="staauthid", aname="_staauthid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="usemip", aname="_usemip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="map", aname="_map", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="downstateflush", aname="_downstateflush", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type2", aname="_type2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gotopriorityexpression", aname="_gotopriorityexpression", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="disableprimaryondown", aname="_disableprimaryondown", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="auditpolicyname", aname="_auditpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="auditpolicypriority", aname="_auditpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="sessionpolicyname", aname="_sessionpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="sessionpolicypriority", aname="_sessionpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="authpolicyname", aname="_authpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="secondaryauthpolicy", aname="_secondaryauthpolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="authpolicypriority", aname="_authpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="trafficpolicyname", aname="_trafficpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="trafficpolicypriority", aname="_trafficpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="preauthenticationpolicyname", aname="_preauthenticationpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="preauthenticationpolicypriority", aname="_preauthenticationpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cvpnpolicyname", aname="_cvpnpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="cvpnpriority", aname="_cvpnpriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cvpnbindpoint", aname="_cvpnbindpoint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._ipaddress = None
                    self._ipaddress2 = None
                    self._value = None
                    self._port = None
                    self._range = None
                    self._servicetype = None
                    self._type = None
                    self._state = None
                    self._status = None
                    self._cachetype = None
                    self._redirect = None
                    self._precedence = None
                    self._redirecturl = None
                    self._authentication = None
                    self._maxaaausers = None
                    self._curaaausers = None
                    self._domain = None
                    self._rule = None
                    self._policyname = None
                    self._servicename = None
                    self._weight = None
                    self._cachevserver = None
                    self._backupvserver = None
                    self._priority = None
                    self._clttimeout = None
                    self._somethod = None
                    self._sothreshold = None
                    self._sopersistence = None
                    self._sopersistencetimeout = None
                    self._intranetapplication = None
                    self._nexthopserver = None
                    self._urlname = None
                    self._intranetip = None
                    self._netmask = None
                    self._staserver = None
                    self._staauthid = None
                    self._usemip = None
                    self._map = None
                    self._downstateflush = None
                    self._type2 = None
                    self._gotopriorityexpression = None
                    self._disableprimaryondown = None
                    self._auditpolicyname = None
                    self._auditpolicypriority = None
                    self._sessionpolicyname = None
                    self._sessionpolicypriority = None
                    self._authpolicyname = None
                    self._secondaryauthpolicy = None
                    self._authpolicypriority = None
                    self._trafficpolicyname = None
                    self._trafficpolicypriority = None
                    self._preauthenticationpolicyname = None
                    self._preauthenticationpolicypriority = None
                    self._cvpnpolicyname = None
                    self._cvpnpriority = None
                    self._cvpnbindpoint = None
                    return
            Holder.__name__ = "vpnvserver_Holder"
            self.pyclass = Holder

    class vpnvserverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpnvserverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpnvserver_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpnvserver[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpnintranetapplication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnintranetapplication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpnintranetapplication_Def.schema
            TClist = [ZSI.TC.String(pname="intranetapplication", aname="_intranetapplication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="protocol", aname="_protocol", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destip", aname="_destip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipaddress", aname="_ipaddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostname", aname="_hostname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destport", aname="_destport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="clientapplication", aname="_clientapplication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="spoofiip", aname="_spoofiip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="interception", aname="_interception", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcip", aname="_srcip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="srcport", aname="_srcport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._intranetapplication = None
                    self._protocol = None
                    self._destip = None
                    self._netmask = None
                    self._ipaddress = None
                    self._hostname = None
                    self._destport = None
                    self._clientapplication = None
                    self._spoofiip = None
                    self._interception = None
                    self._srcip = None
                    self._srcport = None
                    return
            Holder.__name__ = "vpnintranetapplication_Holder"
            self.pyclass = Holder

    class vpnintranetapplicationList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpnintranetapplicationList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpnintranetapplication_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpnintranetapplication[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpnnexthopserver_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnnexthopserver")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpnnexthopserver_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nexthopip", aname="_nexthopip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="nexthopport", aname="_nexthopport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="secure", aname="_secure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._nexthopip = None
                    self._nexthopport = None
                    self._secure = None
                    return
            Holder.__name__ = "vpnnexthopserver_Holder"
            self.pyclass = Holder

    class vpnnexthopserverList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpnnexthopserverList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpnnexthopserver_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpnnexthopserver[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpnicaconnection_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnicaconnection")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpnicaconnection_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="srcip", aname="_srcip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="srcport", aname="_srcport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="destip", aname="_destip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="destport", aname="_destport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._domain = None
                    self._srcip = None
                    self._srcport = None
                    self._destip = None
                    self._destport = None
                    return
            Holder.__name__ = "vpnicaconnection_Holder"
            self.pyclass = Holder

    class vpnicaconnectionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpnicaconnectionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpnicaconnection_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpnicaconnection[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpnglobal_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnglobal")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpnglobal_Def.schema
            TClist = [ZSI.TC.String(pname="policyname", aname="_policyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="intranetdomain", aname="_intranetdomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="intranetapplication", aname="_intranetapplication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="nexthopserver", aname="_nexthopserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="urlname", aname="_urlname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="intranetip", aname="_intranetip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="netmask", aname="_netmask", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="staserver", aname="_staserver", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="staauthid", aname="_staauthid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="auditpolicyname", aname="_auditpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="auditpolicypriority", aname="_auditpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="sessionpolicyname", aname="_sessionpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="sessionpolicypriority", aname="_sessionpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="authpolicyname", aname="_authpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="secondaryauthpolicy", aname="_secondaryauthpolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="authpolicypriority", aname="_authpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="trafficpolicyname", aname="_trafficpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="trafficpolicypriority", aname="_trafficpolicypriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cvpnpolicyname", aname="_cvpnpolicyname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="cvpnpriority", aname="_cvpnpriority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","stringList",lazy=False)(pname="cvpnbindpoint", aname="_cvpnbindpoint", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._policyname = None
                    self._priority = None
                    self._intranetdomain = None
                    self._intranetapplication = None
                    self._nexthopserver = None
                    self._urlname = None
                    self._intranetip = None
                    self._netmask = None
                    self._staserver = None
                    self._staauthid = None
                    self._type = None
                    self._auditpolicyname = None
                    self._auditpolicypriority = None
                    self._sessionpolicyname = None
                    self._sessionpolicypriority = None
                    self._authpolicyname = None
                    self._secondaryauthpolicy = None
                    self._authpolicypriority = None
                    self._trafficpolicyname = None
                    self._trafficpolicypriority = None
                    self._cvpnpolicyname = None
                    self._cvpnpriority = None
                    self._cvpnbindpoint = None
                    return
            Holder.__name__ = "vpnglobal_Holder"
            self.pyclass = Holder

    class vpnglobalList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpnglobalList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpnglobal_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpnglobal[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpntrafficpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpntrafficpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpntrafficpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._actioN = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "vpntrafficpolicy_Holder"
            self.pyclass = Holder

    class vpntrafficpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpntrafficpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpntrafficpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpntrafficpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpntrafficaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpntrafficaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpntrafficaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="qual", aname="_qual", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="apptimeout", aname="_apptimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sso", aname="_sso", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="fta", aname="_fta", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="wanscaler", aname="_wanscaler", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._qual = None
                    self._apptimeout = None
                    self._sso = None
                    self._fta = None
                    self._wanscaler = None
                    return
            Holder.__name__ = "vpntrafficaction_Holder"
            self.pyclass = Holder

    class vpntrafficactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpntrafficactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpntrafficaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpntrafficaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpnurl_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnurl")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpnurl_Def.schema
            TClist = [ZSI.TC.String(pname="urlname", aname="_urlname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="linkname", aname="_linkname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actualurl", aname="_actualurl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientlessaccess", aname="_clientlessaccess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._urlname = None
                    self._linkname = None
                    self._actualurl = None
                    self._clientlessaccess = None
                    return
            Holder.__name__ = "vpnurl_Holder"
            self.pyclass = Holder

    class vpnurlList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpnurlList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpnurl_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpnurl[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpnsessionpolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessionpolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpnsessionpolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="actioN", aname="_actioN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._actioN = None
                    self._boundto = None
                    self._activepolicy = None
                    self._priority = None
                    return
            Holder.__name__ = "vpnsessionpolicy_Holder"
            self.pyclass = Holder

    class vpnsessionpolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpnsessionpolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpnsessionpolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpnsessionpolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpnsessionaction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnsessionaction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpnsessionaction_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="httpport", aname="_httpport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="winsip", aname="_winsip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="splitdns", aname="_splitdns", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientsecurity", aname="_clientsecurity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientsecuritygroup", aname="_clientsecuritygroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientsecuritymessage", aname="_clientsecuritymessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientsecuritylog", aname="_clientsecuritylog", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="splittunnel", aname="_splittunnel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locallanaccess", aname="_locallanaccess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rfc1918", aname="_rfc1918", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="spoofiip", aname="_spoofiip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="killconnections", aname="_killconnections", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="transparentinterception", aname="_transparentinterception", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="windowsclienttype", aname="_windowsclienttype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultauthorizationaction", aname="_defaultauthorizationaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authorizationgroup", aname="_authorizationgroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clientidletimeout", aname="_clientidletimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clientidletimeoutwarning", aname="_clientidletimeoutwarning", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="proxy", aname="_proxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="allprotocolproxy", aname="_allprotocolproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="httpproxy", aname="_httpproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ftpproxy", aname="_ftpproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="socksproxy", aname="_socksproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gopherproxy", aname="_gopherproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sslproxy", aname="_sslproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="proxyexception", aname="_proxyexception", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="proxylocalbypass", aname="_proxylocalbypass", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcleanupprompt", aname="_clientcleanupprompt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="forcecleanup", aname="_forcecleanup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="clientoptions", aname="_clientoptions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="clientconfiguration", aname="_clientconfiguration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sso", aname="_sso", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssocredential", aname="_ssocredential", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="windowsautologon", aname="_windowsautologon", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="usemip", aname="_usemip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="useiip", aname="_useiip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientdebug", aname="_clientdebug", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loginscript", aname="_loginscript", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logoutscript", aname="_logoutscript", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="homepage", aname="_homepage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="icaproxy", aname="_icaproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="wihome", aname="_wihome", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="citrixreceiverhome", aname="_citrixreceiverhome", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="wiportalmode", aname="_wiportalmode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientchoices", aname="_clientchoices", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="epaclienttype", aname="_epaclienttype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="iipdnssuffix", aname="_iipdnssuffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="forcedtimeout", aname="_forcedtimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="forcedtimeoutwarning", aname="_forcedtimeoutwarning", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ntdomain", aname="_ntdomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientlessvpnmode", aname="_clientlessvpnmode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientlessmodeurlencoding", aname="_clientlessmodeurlencoding", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientlesspersistentcookie", aname="_clientlesspersistentcookie", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="emailhome", aname="_emailhome", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._httpport = None
                    self._winsip = None
                    self._dnsvservername = None
                    self._splitdns = None
                    self._sesstimeout = None
                    self._clientsecurity = None
                    self._clientsecuritygroup = None
                    self._clientsecuritymessage = None
                    self._clientsecuritylog = None
                    self._splittunnel = None
                    self._locallanaccess = None
                    self._rfc1918 = None
                    self._spoofiip = None
                    self._killconnections = None
                    self._transparentinterception = None
                    self._windowsclienttype = None
                    self._defaultauthorizationaction = None
                    self._authorizationgroup = None
                    self._clientidletimeout = None
                    self._clientidletimeoutwarning = None
                    self._proxy = None
                    self._allprotocolproxy = None
                    self._httpproxy = None
                    self._ftpproxy = None
                    self._socksproxy = None
                    self._gopherproxy = None
                    self._sslproxy = None
                    self._proxyexception = None
                    self._proxylocalbypass = None
                    self._clientcleanupprompt = None
                    self._forcecleanup = None
                    self._clientoptions = None
                    self._clientconfiguration = None
                    self._sso = None
                    self._ssocredential = None
                    self._windowsautologon = None
                    self._usemip = None
                    self._useiip = None
                    self._clientdebug = None
                    self._loginscript = None
                    self._logoutscript = None
                    self._homepage = None
                    self._icaproxy = None
                    self._wihome = None
                    self._citrixreceiverhome = None
                    self._wiportalmode = None
                    self._clientchoices = None
                    self._epaclienttype = None
                    self._iipdnssuffix = None
                    self._forcedtimeout = None
                    self._forcedtimeoutwarning = None
                    self._ntdomain = None
                    self._clientlessvpnmode = None
                    self._clientlessmodeurlencoding = None
                    self._clientlesspersistentcookie = None
                    self._emailhome = None
                    return
            Holder.__name__ = "vpnsessionaction_Holder"
            self.pyclass = Holder

    class vpnsessionactionList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpnsessionactionList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpnsessionaction_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpnsessionaction[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpnparameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnparameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpnparameter_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","unsignedIntList",lazy=False)(pname="httpport", aname="_httpport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="winsip", aname="_winsip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dnsvservername", aname="_dnsvservername", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="splitdns", aname="_splitdns", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sesstimeout", aname="_sesstimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientsecurity", aname="_clientsecurity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientsecuritygroup", aname="_clientsecuritygroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientsecuritymessage", aname="_clientsecuritymessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientsecuritylog", aname="_clientsecuritylog", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="splittunnel", aname="_splittunnel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="locallanaccess", aname="_locallanaccess", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rfc1918", aname="_rfc1918", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="spoofiip", aname="_spoofiip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="killconnections", aname="_killconnections", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="transparentinterception", aname="_transparentinterception", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="windowsclienttype", aname="_windowsclienttype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultauthorizationaction", aname="_defaultauthorizationaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authorizationgroup", aname="_authorizationgroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clientidletimeout", aname="_clientidletimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clientidletimeoutwarning", aname="_clientidletimeoutwarning", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="proxy", aname="_proxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="allprotocolproxy", aname="_allprotocolproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="httpproxy", aname="_httpproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ftpproxy", aname="_ftpproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="socksproxy", aname="_socksproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="gopherproxy", aname="_gopherproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sslproxy", aname="_sslproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="proxyexception", aname="_proxyexception", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="proxylocalbypass", aname="_proxylocalbypass", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientcleanupprompt", aname="_clientcleanupprompt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="forcecleanup", aname="_forcecleanup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="clientoptions", aname="_clientoptions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="clientconfiguration", aname="_clientconfiguration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sso", aname="_sso", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ssocredential", aname="_ssocredential", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="windowsautologon", aname="_windowsautologon", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="usemip", aname="_usemip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="useiip", aname="_useiip", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientdebug", aname="_clientdebug", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="loginscript", aname="_loginscript", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logoutscript", aname="_logoutscript", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="homepage", aname="_homepage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="icaproxy", aname="_icaproxy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="wihome", aname="_wihome", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="citrixreceiverhome", aname="_citrixreceiverhome", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="wiportalmode", aname="_wiportalmode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientchoices", aname="_clientchoices", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="epaclienttype", aname="_epaclienttype", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="iipdnssuffix", aname="_iipdnssuffix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="forcedtimeout", aname="_forcedtimeout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="forcedtimeoutwarning", aname="_forcedtimeoutwarning", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ntdomain", aname="_ntdomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientlessvpnmode", aname="_clientlessvpnmode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientlessmodeurlencoding", aname="_clientlessmodeurlencoding", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientlesspersistentcookie", aname="_clientlesspersistentcookie", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="emailhome", aname="_emailhome", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._httpport = None
                    self._winsip = None
                    self._dnsvservername = None
                    self._splitdns = None
                    self._sesstimeout = None
                    self._clientsecurity = None
                    self._clientsecuritygroup = None
                    self._clientsecuritymessage = None
                    self._clientsecuritylog = None
                    self._splittunnel = None
                    self._locallanaccess = None
                    self._rfc1918 = None
                    self._spoofiip = None
                    self._killconnections = None
                    self._transparentinterception = None
                    self._windowsclienttype = None
                    self._defaultauthorizationaction = None
                    self._authorizationgroup = None
                    self._clientidletimeout = None
                    self._clientidletimeoutwarning = None
                    self._proxy = None
                    self._allprotocolproxy = None
                    self._httpproxy = None
                    self._ftpproxy = None
                    self._socksproxy = None
                    self._gopherproxy = None
                    self._sslproxy = None
                    self._proxyexception = None
                    self._proxylocalbypass = None
                    self._clientcleanupprompt = None
                    self._forcecleanup = None
                    self._clientoptions = None
                    self._clientconfiguration = None
                    self._sso = None
                    self._ssocredential = None
                    self._windowsautologon = None
                    self._usemip = None
                    self._useiip = None
                    self._clientdebug = None
                    self._loginscript = None
                    self._logoutscript = None
                    self._homepage = None
                    self._icaproxy = None
                    self._wihome = None
                    self._citrixreceiverhome = None
                    self._wiportalmode = None
                    self._clientchoices = None
                    self._epaclienttype = None
                    self._iipdnssuffix = None
                    self._forcedtimeout = None
                    self._forcedtimeoutwarning = None
                    self._ntdomain = None
                    self._clientlessvpnmode = None
                    self._clientlessmodeurlencoding = None
                    self._clientlesspersistentcookie = None
                    self._emailhome = None
                    return
            Holder.__name__ = "vpnparameter_Holder"
            self.pyclass = Holder

    class vpnparameterList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpnparameterList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpnparameter_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpnparameter[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpnclientlessaccesspolicy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnclientlessaccesspolicy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpnclientlessaccesspolicy_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="rule", aname="_rule", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="profilename", aname="_profilename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="undefaction", aname="_undefaction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="hits", aname="_hits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedLong(pname="undefhits", aname="_undefhits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="activepolicy", aname="_activepolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="boundto", aname="_boundto", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._rule = None
                    self._profilename = None
                    self._undefaction = None
                    self._hits = None
                    self._undefhits = None
                    self._activepolicy = None
                    self._boundto = None
                    self._priority = None
                    self._description = None
                    return
            Holder.__name__ = "vpnclientlessaccesspolicy_Holder"
            self.pyclass = Holder

    class vpnclientlessaccesspolicyList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpnclientlessaccesspolicyList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpnclientlessaccesspolicy_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpnclientlessaccesspolicy[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class vpnclientlessaccessprofile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "vpnclientlessaccessprofile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vpnclientlessaccessprofile_Def.schema
            TClist = [ZSI.TC.String(pname="profilename", aname="_profilename", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="urlrewritepolicylabel", aname="_urlrewritepolicylabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="javascriptrewritepolicylabel", aname="_javascriptrewritepolicylabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cssrewritepolicylabel", aname="_cssrewritepolicylabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xmlrewritepolicylabel", aname="_xmlrewritepolicylabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="xcomponentrewritepolicylabel", aname="_xcomponentrewritepolicylabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reqhdrrewritepolicylabel", aname="_reqhdrrewritepolicylabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reshdrrewritepolicylabel", aname="_reshdrrewritepolicylabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="regexforfindingurlinjavascript", aname="_regexforfindingurlinjavascript", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="regexforfindingurlincss", aname="_regexforfindingurlincss", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="regexforfindingurlinxcomponent", aname="_regexforfindingurlinxcomponent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="regexforfindingurlinxml", aname="_regexforfindingurlinxml", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientconsumedcookies", aname="_clientconsumedcookies", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="requirepersistentcookie", aname="_requirepersistentcookie", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._profilename = None
                    self._urlrewritepolicylabel = None
                    self._javascriptrewritepolicylabel = None
                    self._cssrewritepolicylabel = None
                    self._xmlrewritepolicylabel = None
                    self._xcomponentrewritepolicylabel = None
                    self._reqhdrrewritepolicylabel = None
                    self._reshdrrewritepolicylabel = None
                    self._regexforfindingurlinjavascript = None
                    self._regexforfindingurlincss = None
                    self._regexforfindingurlinxcomponent = None
                    self._regexforfindingurlinxml = None
                    self._clientconsumedcookies = None
                    self._requirepersistentcookie = None
                    self._description = None
                    return
            Holder.__name__ = "vpnclientlessaccessprofile_Holder"
            self.pyclass = Holder

    class vpnclientlessaccessprofileList_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:NSConfig"
        type = (schema, "vpnclientlessaccessprofileList")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.vpnclientlessaccessprofile_Def(None, typed=False)
            atype = (u'urn:NSConfig', u'vpnclientlessaccessprofile[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class simpleResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "simpleResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.simpleResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    return
            Holder.__name__ = "simpleResult_Holder"
            self.pyclass = Holder

    class getconfigstatusResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getconfigstatusResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getconfigstatusResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","configstatusList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getconfigstatusResult_Holder"
            self.pyclass = Holder

    class getlocationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlocationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlocationResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","locationList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlocationResult_Holder"
            self.pyclass = Holder

    class getlocationparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlocationparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlocationparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","locationparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlocationparameterResult_Holder"
            self.pyclass = Holder

    class getlocationfileResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlocationfileResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlocationfileResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","locationfileList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlocationfileResult_Holder"
            self.pyclass = Holder

    class getserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","serverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getserverResult_Holder"
            self.pyclass = Holder

    class getserviceResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getserviceResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getserviceResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","serviceList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getserviceResult_Holder"
            self.pyclass = Holder

    class getservicegroupResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getservicegroupResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getservicegroupResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","servicegroupList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getservicegroupResult_Holder"
            self.pyclass = Holder

    class getvserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vserverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvserverResult_Holder"
            self.pyclass = Holder

    class getuiinternalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getuiinternalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getuiinternalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","uiinternalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getuiinternalResult_Holder"
            self.pyclass = Holder

    class getaaasessionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaasessionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaasessionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaasessionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaasessionResult_Holder"
            self.pyclass = Holder

    class getaaauserResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaauserResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaauserResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaauserList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaauserResult_Holder"
            self.pyclass = Holder

    class getaaagroupResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaagroupResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaagroupResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaagroupList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaagroupResult_Holder"
            self.pyclass = Holder

    class getaaaradiusparamsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaaradiusparamsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaaradiusparamsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaaradiusparamsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaaradiusparamsResult_Holder"
            self.pyclass = Holder

    class getaaaldapparamsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaaldapparamsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaaldapparamsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaaldapparamsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaaldapparamsResult_Holder"
            self.pyclass = Holder

    class getaaatacacsparamsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaatacacsparamsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaatacacsparamsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaatacacsparamsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaatacacsparamsResult_Holder"
            self.pyclass = Holder

    class getaaant4paramsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaant4paramsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaant4paramsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaant4paramsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaant4paramsResult_Holder"
            self.pyclass = Holder

    class getaaacertparamsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaacertparamsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaacertparamsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaacertparamsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaacertparamsResult_Holder"
            self.pyclass = Holder

    class getaaaparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaaparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaaparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaaparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaaparameterResult_Holder"
            self.pyclass = Holder

    class getaaapreauthenticationactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaapreauthenticationactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaapreauthenticationactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaapreauthenticationactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaapreauthenticationactionResult_Holder"
            self.pyclass = Holder

    class getaaapreauthenticationpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaapreauthenticationpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaapreauthenticationpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaapreauthenticationpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaapreauthenticationpolicyResult_Holder"
            self.pyclass = Holder

    class getaaapreauthenticationparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaapreauthenticationparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaapreauthenticationparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaapreauthenticationparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaapreauthenticationparameterResult_Holder"
            self.pyclass = Holder

    class getaaaglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getaaaglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getaaaglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","aaaglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getaaaglobalResult_Holder"
            self.pyclass = Holder

    class getappfwfieldtypeResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getappfwfieldtypeResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getappfwfieldtypeResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","appfwfieldtypeList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getappfwfieldtypeResult_Holder"
            self.pyclass = Holder

    class getappfwsettingsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getappfwsettingsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getappfwsettingsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","appfwsettingsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getappfwsettingsResult_Holder"
            self.pyclass = Holder

    class getappfwprofileResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getappfwprofileResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getappfwprofileResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","appfwprofileList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getappfwprofileResult_Holder"
            self.pyclass = Holder

    class getappfwpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getappfwpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getappfwpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","appfwpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getappfwpolicyResult_Holder"
            self.pyclass = Holder

    class getappfwglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getappfwglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getappfwglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","appfwglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getappfwglobalResult_Holder"
            self.pyclass = Holder

    class getappfwlearningsettingsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getappfwlearningsettingsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getappfwlearningsettingsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","appfwlearningsettingsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getappfwlearningsettingsResult_Holder"
            self.pyclass = Holder

    class getappfwlearningdataResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getappfwlearningdataResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getappfwlearningdataResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","appfwlearningdataList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getappfwlearningdataResult_Holder"
            self.pyclass = Holder

    class getappfwconfidfieldResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getappfwconfidfieldResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getappfwconfidfieldResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","appfwconfidfieldList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getappfwconfidfieldResult_Holder"
            self.pyclass = Holder

    class getappfwhtmlerrorpageResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getappfwhtmlerrorpageResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getappfwhtmlerrorpageResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","appfwhtmlerrorpageList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getappfwhtmlerrorpageResult_Holder"
            self.pyclass = Holder

    class getauditmessagesResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauditmessagesResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauditmessagesResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","auditmessagesList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauditmessagesResult_Holder"
            self.pyclass = Holder

    class getauditsyslogactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauditsyslogactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauditsyslogactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","auditsyslogactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauditsyslogactionResult_Holder"
            self.pyclass = Holder

    class getauditsyslogpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauditsyslogpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauditsyslogpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","auditsyslogpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauditsyslogpolicyResult_Holder"
            self.pyclass = Holder

    class getauditsyslogparamsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauditsyslogparamsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauditsyslogparamsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","auditsyslogparamsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauditsyslogparamsResult_Holder"
            self.pyclass = Holder

    class getauditnslogactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauditnslogactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauditnslogactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","auditnslogactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauditnslogactionResult_Holder"
            self.pyclass = Holder

    class getauditnslogpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauditnslogpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauditnslogpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","auditnslogpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauditnslogpolicyResult_Holder"
            self.pyclass = Holder

    class getauditnslogparamsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauditnslogparamsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauditnslogparamsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","auditnslogparamsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauditnslogparamsResult_Holder"
            self.pyclass = Holder

    class getauthenticationradiusactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationradiusactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationradiusactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationradiusactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationradiusactionResult_Holder"
            self.pyclass = Holder

    class getauthenticationldapactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationldapactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationldapactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationldapactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationldapactionResult_Holder"
            self.pyclass = Holder

    class getauthenticationtacacsactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationtacacsactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationtacacsactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationtacacsactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationtacacsactionResult_Holder"
            self.pyclass = Holder

    class getauthenticationnt4actionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationnt4actionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationnt4actionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationnt4actionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationnt4actionResult_Holder"
            self.pyclass = Holder

    class getauthenticationcertactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationcertactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationcertactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationcertactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationcertactionResult_Holder"
            self.pyclass = Holder

    class getauthenticationlocalpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationlocalpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationlocalpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationlocalpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationlocalpolicyResult_Holder"
            self.pyclass = Holder

    class getauthenticationradiuspolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationradiuspolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationradiuspolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationradiuspolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationradiuspolicyResult_Holder"
            self.pyclass = Holder

    class getauthenticationcertpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationcertpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationcertpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationcertpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationcertpolicyResult_Holder"
            self.pyclass = Holder

    class getauthenticationldappolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationldappolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationldappolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationldappolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationldappolicyResult_Holder"
            self.pyclass = Holder

    class getauthenticationtacacspolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationtacacspolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationtacacspolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationtacacspolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationtacacspolicyResult_Holder"
            self.pyclass = Holder

    class getauthenticationnt4policyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationnt4policyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationnt4policyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationnt4policyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationnt4policyResult_Holder"
            self.pyclass = Holder

    class getauthenticationvserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthenticationvserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthenticationvserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authenticationvserverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthenticationvserverResult_Holder"
            self.pyclass = Holder

    class getauthorizationpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getauthorizationpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getauthorizationpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","authorizationpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getauthorizationpolicyResult_Holder"
            self.pyclass = Holder

    class getcacheobjectResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcacheobjectResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcacheobjectResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cacheobjectList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcacheobjectResult_Holder"
            self.pyclass = Holder

    class getcachepolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcachepolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcachepolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cachepolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcachepolicyResult_Holder"
            self.pyclass = Holder

    class getcachepolicylabelResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcachepolicylabelResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcachepolicylabelResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cachepolicylabelList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcachepolicylabelResult_Holder"
            self.pyclass = Holder

    class getcacheglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcacheglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcacheglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cacheglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcacheglobalResult_Holder"
            self.pyclass = Holder

    class getcachecontentgroupResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcachecontentgroupResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcachecontentgroupResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cachecontentgroupList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcachecontentgroupResult_Holder"
            self.pyclass = Holder

    class getcacheforwardproxyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcacheforwardproxyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcacheforwardproxyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cacheforwardproxyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcacheforwardproxyResult_Holder"
            self.pyclass = Holder

    class getcacheselectorResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcacheselectorResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcacheselectorResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cacheselectorList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcacheselectorResult_Holder"
            self.pyclass = Holder

    class getcacheparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcacheparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcacheparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cacheparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcacheparameterResult_Holder"
            self.pyclass = Holder

    class getclioutputResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getclioutputResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getclioutputResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","clioutputList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getclioutputResult_Holder"
            self.pyclass = Holder

    class getcmpactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcmpactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcmpactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cmpactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcmpactionResult_Holder"
            self.pyclass = Holder

    class getcmppolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcmppolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcmppolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cmppolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcmppolicyResult_Holder"
            self.pyclass = Holder

    class getcmpglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcmpglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcmpglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cmpglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcmpglobalResult_Holder"
            self.pyclass = Holder

    class getcmpparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcmpparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcmpparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cmpparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcmpparameterResult_Holder"
            self.pyclass = Holder

    class getcrpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcrpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcrpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","crpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcrpolicyResult_Holder"
            self.pyclass = Holder

    class getcrvserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcrvserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcrvserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","crvserverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcrvserverResult_Holder"
            self.pyclass = Holder

    class getcspolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcspolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcspolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cspolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcspolicyResult_Holder"
            self.pyclass = Holder

    class getcspolicylabelResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcspolicylabelResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcspolicylabelResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","cspolicylabelList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcspolicylabelResult_Holder"
            self.pyclass = Holder

    class getcsvserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getcsvserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getcsvserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","csvserverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getcsvserverResult_Holder"
            self.pyclass = Holder

    class getdnsaaaarecResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnsaaaarecResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnsaaaarecResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnsaaaarecList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnsaaaarecResult_Holder"
            self.pyclass = Holder

    class getdnsaddrecResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnsaddrecResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnsaddrecResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnsaddrecList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnsaddrecResult_Holder"
            self.pyclass = Holder

    class getdnscnamerecResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnscnamerecResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnscnamerecResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnscnamerecList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnscnamerecResult_Holder"
            self.pyclass = Holder

    class getdnsmxrecResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnsmxrecResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnsmxrecResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnsmxrecList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnsmxrecResult_Holder"
            self.pyclass = Holder

    class getdnsnsrecResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnsnsrecResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnsnsrecResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnsnsrecList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnsnsrecResult_Holder"
            self.pyclass = Holder

    class getdnsptrrecResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnsptrrecResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnsptrrecResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnsptrrecList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnsptrrecResult_Holder"
            self.pyclass = Holder

    class getdnssrvrecResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnssrvrecResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnssrvrecResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnssrvrecList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnssrvrecResult_Holder"
            self.pyclass = Holder

    class getdnsparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnsparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnsparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnsparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnsparameterResult_Holder"
            self.pyclass = Holder

    class getdnssoarecResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnssoarecResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnssoarecResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnssoarecList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnssoarecResult_Holder"
            self.pyclass = Holder

    class getdnssuffixResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnssuffixResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnssuffixResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnssuffixList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnssuffixResult_Holder"
            self.pyclass = Holder

    class getdnsnameserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnsnameserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnsnameserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnsnameserverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnsnameserverResult_Holder"
            self.pyclass = Holder

    class getdnsviewResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnsviewResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnsviewResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnsviewList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnsviewResult_Holder"
            self.pyclass = Holder

    class getdnspolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnspolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnspolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnspolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnspolicyResult_Holder"
            self.pyclass = Holder

    class getdnsglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdnsglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdnsglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dnsglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdnsglobalResult_Holder"
            self.pyclass = Holder

    class getdospolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getdospolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getdospolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","dospolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getdospolicyResult_Holder"
            self.pyclass = Holder

    class getfilterprebodyinjectionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getfilterprebodyinjectionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getfilterprebodyinjectionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","filterprebodyinjectionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getfilterprebodyinjectionResult_Holder"
            self.pyclass = Holder

    class getfilterpostbodyinjectionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getfilterpostbodyinjectionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getfilterpostbodyinjectionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","filterpostbodyinjectionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getfilterpostbodyinjectionResult_Holder"
            self.pyclass = Holder

    class getfilteractionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getfilteractionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getfilteractionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","filteractionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getfilteractionResult_Holder"
            self.pyclass = Holder

    class getfilterhtmlinjectionvariableResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getfilterhtmlinjectionvariableResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getfilterhtmlinjectionvariableResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","filterhtmlinjectionvariableList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getfilterhtmlinjectionvariableResult_Holder"
            self.pyclass = Holder

    class getfilterhtmlinjectionparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getfilterhtmlinjectionparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getfilterhtmlinjectionparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","filterhtmlinjectionparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getfilterhtmlinjectionparameterResult_Holder"
            self.pyclass = Holder

    class getfilterpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getfilterpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getfilterpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","filterpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getfilterpolicyResult_Holder"
            self.pyclass = Holder

    class getfilterglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getfilterglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getfilterglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","filterglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getfilterglobalResult_Holder"
            self.pyclass = Holder

    class getgslbsiteResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getgslbsiteResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getgslbsiteResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","gslbsiteList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getgslbsiteResult_Holder"
            self.pyclass = Holder

    class getgslbserviceResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getgslbserviceResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getgslbserviceResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","gslbserviceList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getgslbserviceResult_Holder"
            self.pyclass = Holder

    class getgslbvserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getgslbvserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getgslbvserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","gslbvserverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getgslbvserverResult_Holder"
            self.pyclass = Holder

    class getgslbparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getgslbparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getgslbparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","gslbparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getgslbparameterResult_Holder"
            self.pyclass = Holder

    class getgslbpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getgslbpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getgslbpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","gslbpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getgslbpolicyResult_Holder"
            self.pyclass = Holder

    class getgslbactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getgslbactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getgslbactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","gslbactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getgslbactionResult_Holder"
            self.pyclass = Holder

    class getgslbldnsentriesResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getgslbldnsentriesResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getgslbldnsentriesResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","gslbldnsentriesList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getgslbldnsentriesResult_Holder"
            self.pyclass = Holder

    class gethanodeResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gethanodeResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gethanodeResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","hanodeList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gethanodeResult_Holder"
            self.pyclass = Holder

    class getlbmonbindingsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlbmonbindingsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlbmonbindingsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","lbmonbindingsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlbmonbindingsResult_Holder"
            self.pyclass = Holder

    class getlbpersistentsessionsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlbpersistentsessionsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlbpersistentsessionsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","lbpersistentsessionsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlbpersistentsessionsResult_Holder"
            self.pyclass = Holder

    class getlbgroupResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlbgroupResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlbgroupResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","lbgroupList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlbgroupResult_Holder"
            self.pyclass = Holder

    class getlbmonitorResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlbmonitorResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlbmonitorResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","lbmonitorList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlbmonitorResult_Holder"
            self.pyclass = Holder

    class getlbrouteResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlbrouteResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlbrouteResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","lbrouteList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlbrouteResult_Holder"
            self.pyclass = Holder

    class getlbvserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlbvserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlbvserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","lbvserverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlbvserverResult_Holder"
            self.pyclass = Holder

    class getlbsipparametersResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlbsipparametersResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlbsipparametersResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","lbsipparametersList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlbsipparametersResult_Holder"
            self.pyclass = Holder

    class getlbmetrictableResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlbmetrictableResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlbmetrictableResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","lbmetrictableList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlbmetrictableResult_Holder"
            self.pyclass = Holder

    class getlbwlmResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlbwlmResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlbwlmResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","lbwlmList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlbwlmResult_Holder"
            self.pyclass = Holder

    class getarpResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getarpResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getarpResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","arpList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getarpResult_Holder"
            self.pyclass = Holder

    class getciResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getciResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getciResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","ciList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getciResult_Holder"
            self.pyclass = Holder

    class getbridgetableResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getbridgetableResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getbridgetableResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","bridgetableList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getbridgetableResult_Holder"
            self.pyclass = Holder

    class getchannelResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getchannelResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getchannelResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","channelList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getchannelResult_Holder"
            self.pyclass = Holder

    class getfisResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getfisResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getfisResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","fisList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getfisResult_Holder"
            self.pyclass = Holder

    class getinterfaceResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getinterfaceResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getinterfaceResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","interfacEList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getinterfaceResult_Holder"
            self.pyclass = Holder

    class getlacpResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getlacpResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getlacpResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","lacpList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getlacpResult_Holder"
            self.pyclass = Holder

    class getrnatparamResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getrnatparamResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getrnatparamResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","rnatparamList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getrnatparamResult_Holder"
            self.pyclass = Holder

    class getrouteResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getrouteResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getrouteResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","routeList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getrouteResult_Holder"
            self.pyclass = Holder

    class getrnatResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getrnatResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getrnatResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","rnatList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getrnatResult_Holder"
            self.pyclass = Holder

    class getvlanResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvlanResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvlanResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vlanList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvlanResult_Holder"
            self.pyclass = Holder

    class getvridResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvridResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvridResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vridList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvridResult_Holder"
            self.pyclass = Holder

    class getvrid6Result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvrid6Result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvrid6Result_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vrid6List",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvrid6Result_Holder"
            self.pyclass = Holder

    class getroute6Result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getroute6Result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getroute6Result_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","route6List",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getroute6Result_Holder"
            self.pyclass = Holder

    class getnd6Result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnd6Result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnd6Result_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nd6List",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnd6Result_Holder"
            self.pyclass = Holder

    class getipv6Result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getipv6Result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getipv6Result_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","ipv6List",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getipv6Result_Holder"
            self.pyclass = Holder

    class getinatResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getinatResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getinatResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","inatList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getinatResult_Holder"
            self.pyclass = Holder

    class getiptunnelparamResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getiptunnelparamResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getiptunnelparamResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","iptunnelparamList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getiptunnelparamResult_Holder"
            self.pyclass = Holder

    class getiptunnelResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getiptunnelResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getiptunnelResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","iptunnelList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getiptunnelResult_Holder"
            self.pyclass = Holder

    class getnsnsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsnsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsnsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsnsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsnsResult_Holder"
            self.pyclass = Holder

    class getnslicenseResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnslicenseResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnslicenseResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nslicenseList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnslicenseResult_Holder"
            self.pyclass = Holder

    class getnsversionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsversionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsversionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsversionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsversionResult_Holder"
            self.pyclass = Holder

    class getnsconnectiontableResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsconnectiontableResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsconnectiontableResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsconnectiontableList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsconnectiontableResult_Holder"
            self.pyclass = Holder

    class getnslimitsessionsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnslimitsessionsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnslimitsessionsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nslimitsessionsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnslimitsessionsResult_Holder"
            self.pyclass = Holder

    class getnspersistencesessionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnspersistencesessionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnspersistencesessionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nspersistencesessionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnspersistencesessionResult_Holder"
            self.pyclass = Holder

    class getnsconfigResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsconfigResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsconfigResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsconfigList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsconfigResult_Holder"
            self.pyclass = Holder

    class getnshostnameResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnshostnameResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnshostnameResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nshostnameList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnshostnameResult_Holder"
            self.pyclass = Holder

    class getnslimitidentifierResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnslimitidentifierResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnslimitidentifierResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nslimitidentifierList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnslimitidentifierResult_Holder"
            self.pyclass = Holder

    class getnslimitselectorResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnslimitselectorResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnslimitselectorResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nslimitselectorList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnslimitselectorResult_Holder"
            self.pyclass = Holder

    class getnsaclResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsaclResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsaclResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsaclList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsaclResult_Holder"
            self.pyclass = Holder

    class getnsacl6Result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsacl6Result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsacl6Result_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsacl6List",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsacl6Result_Holder"
            self.pyclass = Holder

    class getnsfeatureResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsfeatureResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsfeatureResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsfeatureList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsfeatureResult_Holder"
            self.pyclass = Holder

    class getnsip6Result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsip6Result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsip6Result_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsip6List",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsip6Result_Holder"
            self.pyclass = Holder

    class getnsipResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsipResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsipResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsipList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsipResult_Holder"
            self.pyclass = Holder

    class getnsmodeResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsmodeResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsmodeResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsmodeList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsmodeResult_Holder"
            self.pyclass = Holder

    class getnsdhcpparamsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsdhcpparamsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsdhcpparamsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsdhcpparamsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsdhcpparamsResult_Holder"
            self.pyclass = Holder

    class getnsspparamsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsspparamsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsspparamsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsspparamsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsspparamsResult_Holder"
            self.pyclass = Holder

    class getnstcpbufparamResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnstcpbufparamResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnstcpbufparamResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nstcpbufparamList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnstcpbufparamResult_Holder"
            self.pyclass = Holder

    class getnstcpparamResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnstcpparamResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnstcpparamResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nstcpparamList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnstcpparamResult_Holder"
            self.pyclass = Holder

    class getnshttpparamResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnshttpparamResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnshttpparamResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nshttpparamList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnshttpparamResult_Holder"
            self.pyclass = Holder

    class getnsweblogparamResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsweblogparamResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsweblogparamResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsweblogparamList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsweblogparamResult_Holder"
            self.pyclass = Holder

    class getnsratecontrolResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsratecontrolResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsratecontrolResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsratecontrolList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsratecontrolResult_Holder"
            self.pyclass = Holder

    class getnsrpcnodeResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsrpcnodeResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsrpcnodeResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsrpcnodeList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsrpcnodeResult_Holder"
            self.pyclass = Holder

    class getnsidletimeoutResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnsidletimeoutResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnsidletimeoutResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nsidletimeoutList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnsidletimeoutResult_Holder"
            self.pyclass = Holder

    class getnstimeoutResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnstimeoutResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnstimeoutResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nstimeoutList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnstimeoutResult_Holder"
            self.pyclass = Holder

    class getnssimpleaclResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnssimpleaclResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnssimpleaclResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nssimpleaclList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnssimpleaclResult_Holder"
            self.pyclass = Holder

    class getnshardwareResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnshardwareResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnshardwareResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nshardwareList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnshardwareResult_Holder"
            self.pyclass = Holder

    class getnseventsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getnseventsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getnseventsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","nseventsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getnseventsResult_Holder"
            self.pyclass = Holder

    class getntpsyncResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getntpsyncResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getntpsyncResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","ntpsyncList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getntpsyncResult_Holder"
            self.pyclass = Holder

    class getntpserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getntpserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getntpserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","ntpserverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getntpserverResult_Holder"
            self.pyclass = Holder

    class getpolicyexpressionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getpolicyexpressionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getpolicyexpressionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","policyexpressionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getpolicyexpressionResult_Holder"
            self.pyclass = Holder

    class getpolicymapResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getpolicymapResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getpolicymapResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","policymapList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getpolicymapResult_Holder"
            self.pyclass = Holder

    class getpolicypatclassResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getpolicypatclassResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getpolicypatclassResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","policypatclassList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getpolicypatclassResult_Holder"
            self.pyclass = Holder

    class getpolicypatsetResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getpolicypatsetResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getpolicypatsetResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","policypatsetList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getpolicypatsetResult_Holder"
            self.pyclass = Holder

    class getpolicyhttpcalloutResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getpolicyhttpcalloutResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getpolicyhttpcalloutResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","policyhttpcalloutList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getpolicyhttpcalloutResult_Holder"
            self.pyclass = Holder

    class getpqbindingResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getpqbindingResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getpqbindingResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","pqbindingList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getpqbindingResult_Holder"
            self.pyclass = Holder

    class getpqpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getpqpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getpqpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","pqpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getpqpolicyResult_Holder"
            self.pyclass = Holder

    class getresponderpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getresponderpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getresponderpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","responderpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getresponderpolicyResult_Holder"
            self.pyclass = Holder

    class getresponderactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getresponderactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getresponderactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","responderactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getresponderactionResult_Holder"
            self.pyclass = Holder

    class getresponderglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getresponderglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getresponderglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","responderglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getresponderglobalResult_Holder"
            self.pyclass = Holder

    class getresponderparamResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getresponderparamResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getresponderparamResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","responderparamList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getresponderparamResult_Holder"
            self.pyclass = Holder

    class getresponderpolicylabelResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getresponderpolicylabelResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getresponderpolicylabelResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","responderpolicylabelList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getresponderpolicylabelResult_Holder"
            self.pyclass = Holder

    class getrewritepolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getrewritepolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getrewritepolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","rewritepolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getrewritepolicyResult_Holder"
            self.pyclass = Holder

    class getrewriteactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getrewriteactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getrewriteactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","rewriteactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getrewriteactionResult_Holder"
            self.pyclass = Holder

    class getrewriteglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getrewriteglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getrewriteglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","rewriteglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getrewriteglobalResult_Holder"
            self.pyclass = Holder

    class getrewriteparamResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getrewriteparamResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getrewriteparamResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","rewriteparamList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getrewriteparamResult_Holder"
            self.pyclass = Holder

    class getrewritepolicylabelResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getrewritepolicylabelResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getrewritepolicylabelResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","rewritepolicylabelList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getrewritepolicylabelResult_Holder"
            self.pyclass = Holder

    class getrouterospfResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getrouterospfResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getrouterospfResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","routerospfList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getrouterospfResult_Holder"
            self.pyclass = Holder

    class getrouterripResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getrouterripResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getrouterripResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","routerripList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getrouterripResult_Holder"
            self.pyclass = Holder

    class getsnmpoidResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsnmpoidResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsnmpoidResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","snmpoidList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsnmpoidResult_Holder"
            self.pyclass = Holder

    class getsnmpalarmResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsnmpalarmResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsnmpalarmResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","snmpalarmList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsnmpalarmResult_Holder"
            self.pyclass = Holder

    class getsnmpcommunityResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsnmpcommunityResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsnmpcommunityResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","snmpcommunityList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsnmpcommunityResult_Holder"
            self.pyclass = Holder

    class getsnmpmanagerResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsnmpmanagerResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsnmpmanagerResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","snmpmanagerList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsnmpmanagerResult_Holder"
            self.pyclass = Holder

    class getsnmpmibResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsnmpmibResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsnmpmibResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","snmpmibList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsnmpmibResult_Holder"
            self.pyclass = Holder

    class getsnmptrapResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsnmptrapResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsnmptrapResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","snmptrapList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsnmptrapResult_Holder"
            self.pyclass = Holder

    class getsnmpgroupResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsnmpgroupResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsnmpgroupResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","snmpgroupList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsnmpgroupResult_Holder"
            self.pyclass = Holder

    class getsnmpviewResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsnmpviewResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsnmpviewResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","snmpviewList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsnmpviewResult_Holder"
            self.pyclass = Holder

    class getsnmpuserResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsnmpuserResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsnmpuserResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","snmpuserList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsnmpuserResult_Holder"
            self.pyclass = Holder

    class getsnmpengineidResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsnmpengineidResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsnmpengineidResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","snmpengineidList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsnmpengineidResult_Holder"
            self.pyclass = Holder

    class getscparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getscparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getscparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","scparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getscparameterResult_Holder"
            self.pyclass = Holder

    class getscpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getscpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getscpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","scpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getscpolicyResult_Holder"
            self.pyclass = Holder

    class getsslcertlinkResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslcertlinkResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslcertlinkResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslcertlinkList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslcertlinkResult_Holder"
            self.pyclass = Holder

    class getsslcipherResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslcipherResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslcipherResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslcipherList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslcipherResult_Holder"
            self.pyclass = Holder

    class getsslcertkeyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslcertkeyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslcertkeyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslcertkeyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslcertkeyResult_Holder"
            self.pyclass = Holder

    class getsslparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslparameterResult_Holder"
            self.pyclass = Holder

    class getsslcrlResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslcrlResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslcrlResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslcrlList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslcrlResult_Holder"
            self.pyclass = Holder

    class getsslfipsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslfipsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslfipsResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslfipsList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslfipsResult_Holder"
            self.pyclass = Holder

    class getsslfipskeyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslfipskeyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslfipskeyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslfipskeyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslfipskeyResult_Holder"
            self.pyclass = Holder

    class getsslserviceResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslserviceResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslserviceResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslserviceList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslserviceResult_Holder"
            self.pyclass = Holder

    class getsslservicegroupResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslservicegroupResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslservicegroupResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslservicegroupList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslservicegroupResult_Holder"
            self.pyclass = Holder

    class getsslvserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslvserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslvserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslvserverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslvserverResult_Holder"
            self.pyclass = Holder

    class getsslwrapkeyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslwrapkeyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslwrapkeyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslwrapkeyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslwrapkeyResult_Holder"
            self.pyclass = Holder

    class getsslactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslactionResult_Holder"
            self.pyclass = Holder

    class getsslpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslpolicyResult_Holder"
            self.pyclass = Holder

    class getsslglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsslglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsslglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","sslglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsslglobalResult_Holder"
            self.pyclass = Holder

    class getsystemsessionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystemsessionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystemsessionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systemsessionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystemsessionResult_Holder"
            self.pyclass = Holder

    class getsystementityResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystementityResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystementityResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systementityList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystementityResult_Holder"
            self.pyclass = Holder

    class getsystemglobaldataResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystemglobaldataResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystemglobaldataResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systemglobaldataList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystemglobaldataResult_Holder"
            self.pyclass = Holder

    class getsystementitydataResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystementitydataResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystementitydataResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systementitydataList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystementitydataResult_Holder"
            self.pyclass = Holder

    class getsystemcountersResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystemcountersResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystemcountersResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systemcountersList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystemcountersResult_Holder"
            self.pyclass = Holder

    class getsystemcountergroupResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystemcountergroupResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystemcountergroupResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systemcountergroupList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystemcountergroupResult_Holder"
            self.pyclass = Holder

    class getsystemcmdpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystemcmdpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystemcmdpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systemcmdpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystemcmdpolicyResult_Holder"
            self.pyclass = Holder

    class getsystemuserResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystemuserResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystemuserResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systemuserList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystemuserResult_Holder"
            self.pyclass = Holder

    class getsystemcoreResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystemcoreResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystemcoreResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systemcoreList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystemcoreResult_Holder"
            self.pyclass = Holder

    class getsystemdatasourceResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystemdatasourceResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystemdatasourceResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systemdatasourceList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystemdatasourceResult_Holder"
            self.pyclass = Holder

    class getsystemgroupResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystemgroupResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystemgroupResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systemgroupList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystemgroupResult_Holder"
            self.pyclass = Holder

    class getsystemglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystemglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystemglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systemglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystemglobalResult_Holder"
            self.pyclass = Holder

    class getsystemcollectionparamResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getsystemcollectionparamResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getsystemcollectionparamResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","systemcollectionparamList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getsystemcollectionparamResult_Holder"
            self.pyclass = Holder

    class gettmsessionpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gettmsessionpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gettmsessionpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","tmsessionpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gettmsessionpolicyResult_Holder"
            self.pyclass = Holder

    class gettmsessionactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gettmsessionactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gettmsessionactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","tmsessionactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gettmsessionactionResult_Holder"
            self.pyclass = Holder

    class gettmglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gettmglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gettmglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","tmglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gettmglobalResult_Holder"
            self.pyclass = Holder

    class gettmsessionparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gettmsessionparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gettmsessionparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","tmsessionparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gettmsessionparameterResult_Holder"
            self.pyclass = Holder

    class gettransformprofileResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gettransformprofileResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gettransformprofileResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","transformprofileList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gettransformprofileResult_Holder"
            self.pyclass = Holder

    class gettransformactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gettransformactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gettransformactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","transformactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gettransformactionResult_Holder"
            self.pyclass = Holder

    class gettransformpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gettransformpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gettransformpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","transformpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gettransformpolicyResult_Holder"
            self.pyclass = Holder

    class gettransformglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gettransformglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gettransformglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","transformglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gettransformglobalResult_Holder"
            self.pyclass = Holder

    class gettunneltrafficpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gettunneltrafficpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gettunneltrafficpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","tunneltrafficpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gettunneltrafficpolicyResult_Holder"
            self.pyclass = Holder

    class gettunnelglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gettunnelglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gettunnelglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","tunnelglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gettunnelglobalResult_Holder"
            self.pyclass = Holder

    class gettechsupportResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "gettechsupportResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.gettechsupportResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","techsupportList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "gettechsupportResult_Holder"
            self.pyclass = Holder

    class getvpnvserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpnvserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpnvserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpnvserverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpnvserverResult_Holder"
            self.pyclass = Holder

    class getvpnintranetapplicationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpnintranetapplicationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpnintranetapplicationResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpnintranetapplicationList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpnintranetapplicationResult_Holder"
            self.pyclass = Holder

    class getvpnnexthopserverResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpnnexthopserverResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpnnexthopserverResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpnnexthopserverList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpnnexthopserverResult_Holder"
            self.pyclass = Holder

    class getvpnicaconnectionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpnicaconnectionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpnicaconnectionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpnicaconnectionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpnicaconnectionResult_Holder"
            self.pyclass = Holder

    class getvpnglobalResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpnglobalResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpnglobalResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpnglobalList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpnglobalResult_Holder"
            self.pyclass = Holder

    class getvpntrafficpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpntrafficpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpntrafficpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpntrafficpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpntrafficpolicyResult_Holder"
            self.pyclass = Holder

    class getvpntrafficactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpntrafficactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpntrafficactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpntrafficactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpntrafficactionResult_Holder"
            self.pyclass = Holder

    class getvpnurlResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpnurlResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpnurlResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpnurlList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpnurlResult_Holder"
            self.pyclass = Holder

    class getvpnsessionpolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpnsessionpolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpnsessionpolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpnsessionpolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpnsessionpolicyResult_Holder"
            self.pyclass = Holder

    class getvpnsessionactionResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpnsessionactionResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpnsessionactionResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpnsessionactionList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpnsessionactionResult_Holder"
            self.pyclass = Holder

    class getvpnparameterResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpnparameterResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpnparameterResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpnparameterList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpnparameterResult_Holder"
            self.pyclass = Holder

    class getvpnclientlessaccesspolicyResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpnclientlessaccesspolicyResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpnclientlessaccesspolicyResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpnclientlessaccesspolicyList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpnclientlessaccesspolicyResult_Holder"
            self.pyclass = Holder

    class getvpnclientlessaccessprofileResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:NSConfig"
        type = (schema, "getvpnclientlessaccessprofileResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getvpnclientlessaccessprofileResult_Def.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="rc", aname="_rc", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:NSConfig","vpnclientlessaccessprofileList",lazy=False)(pname="List", aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rc = None
                    self._message = None
                    self._List = None
                    return
            Holder.__name__ = "getvpnclientlessaccessprofileResult_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:NSConfig)
